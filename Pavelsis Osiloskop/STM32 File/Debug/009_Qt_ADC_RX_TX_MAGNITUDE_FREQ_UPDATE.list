
009_Qt_ADC_RX_TX_MAGNITUDE_FREQ_UPDATE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1e4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000614  0800c2a8  0800c2a8  0001c2a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c8bc  0800c8bc  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800c8bc  0800c8bc  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c8bc  0800c8bc  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c8bc  0800c8bc  0001c8bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c8c0  0800c8c0  0001c8c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800c8c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  200001e8  0800caac  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  0800caac  00020430  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001054d  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000237e  00000000  00000000  0003075d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  00032ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da8  00000000  00000000  00033970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b36f  00000000  00000000  00034718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000110f5  00000000  00000000  0004fa87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d332  00000000  00000000  00060b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fdeae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c64  00000000  00000000  000fdf00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e8 	.word	0x200001e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c28c 	.word	0x0800c28c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001ec 	.word	0x200001ec
 8000104:	0800c28c 	.word	0x0800c28c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fa53 	bl	80018e8 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f9a3 	bl	8001798 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fa45 	bl	80018e8 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa3b 	bl	80018e8 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f9cb 	bl	800181c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f9c1 	bl	800181c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f002 f893 	bl	80025e8 <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 fcdc 	bl	8001e88 <__aeabi_dsub>
 80004d0:	f002 f88a 	bl	80025e8 <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_d2lz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0005      	movs	r5, r0
 80004e8:	000c      	movs	r4, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	2300      	movs	r3, #0
 80004ee:	0028      	movs	r0, r5
 80004f0:	0021      	movs	r1, r4
 80004f2:	f7ff ffb1 	bl	8000458 <__aeabi_dcmplt>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d108      	bne.n	800050c <__aeabi_d2lz+0x28>
 80004fa:	0028      	movs	r0, r5
 80004fc:	0021      	movs	r1, r4
 80004fe:	f000 f80f 	bl	8000520 <__aeabi_d2ulz>
 8000502:	0002      	movs	r2, r0
 8000504:	000b      	movs	r3, r1
 8000506:	0010      	movs	r0, r2
 8000508:	0019      	movs	r1, r3
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	061b      	lsls	r3, r3, #24
 8000510:	18e1      	adds	r1, r4, r3
 8000512:	0028      	movs	r0, r5
 8000514:	f000 f804 	bl	8000520 <__aeabi_d2ulz>
 8000518:	2300      	movs	r3, #0
 800051a:	4242      	negs	r2, r0
 800051c:	418b      	sbcs	r3, r1
 800051e:	e7f2      	b.n	8000506 <__aeabi_d2lz+0x22>

08000520 <__aeabi_d2ulz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	2200      	movs	r2, #0
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <__aeabi_d2ulz+0x34>)
 8000526:	000d      	movs	r5, r1
 8000528:	0004      	movs	r4, r0
 800052a:	f001 fa41 	bl	80019b0 <__aeabi_dmul>
 800052e:	f7ff ffbb 	bl	80004a8 <__aeabi_d2uiz>
 8000532:	0006      	movs	r6, r0
 8000534:	f002 f8be 	bl	80026b4 <__aeabi_ui2d>
 8000538:	2200      	movs	r2, #0
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <__aeabi_d2ulz+0x38>)
 800053c:	f001 fa38 	bl	80019b0 <__aeabi_dmul>
 8000540:	0002      	movs	r2, r0
 8000542:	000b      	movs	r3, r1
 8000544:	0020      	movs	r0, r4
 8000546:	0029      	movs	r1, r5
 8000548:	f001 fc9e 	bl	8001e88 <__aeabi_dsub>
 800054c:	f7ff ffac 	bl	80004a8 <__aeabi_d2uiz>
 8000550:	0031      	movs	r1, r6
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	3df00000 	.word	0x3df00000
 8000558:	41f00000 	.word	0x41f00000

0800055c <__aeabi_l2d>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	0006      	movs	r6, r0
 8000560:	0008      	movs	r0, r1
 8000562:	f002 f877 	bl	8002654 <__aeabi_i2d>
 8000566:	2200      	movs	r2, #0
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <__aeabi_l2d+0x28>)
 800056a:	f001 fa21 	bl	80019b0 <__aeabi_dmul>
 800056e:	000d      	movs	r5, r1
 8000570:	0004      	movs	r4, r0
 8000572:	0030      	movs	r0, r6
 8000574:	f002 f89e 	bl	80026b4 <__aeabi_ui2d>
 8000578:	002b      	movs	r3, r5
 800057a:	0022      	movs	r2, r4
 800057c:	f000 fada 	bl	8000b34 <__aeabi_dadd>
 8000580:	bd70      	pop	{r4, r5, r6, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	41f00000 	.word	0x41f00000

08000588 <__aeabi_fadd>:
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	46c6      	mov	lr, r8
 800058c:	0243      	lsls	r3, r0, #9
 800058e:	0a5b      	lsrs	r3, r3, #9
 8000590:	024e      	lsls	r6, r1, #9
 8000592:	0045      	lsls	r5, r0, #1
 8000594:	004f      	lsls	r7, r1, #1
 8000596:	00da      	lsls	r2, r3, #3
 8000598:	0fc4      	lsrs	r4, r0, #31
 800059a:	469c      	mov	ip, r3
 800059c:	0a70      	lsrs	r0, r6, #9
 800059e:	4690      	mov	r8, r2
 80005a0:	b500      	push	{lr}
 80005a2:	0e2d      	lsrs	r5, r5, #24
 80005a4:	0e3f      	lsrs	r7, r7, #24
 80005a6:	0fc9      	lsrs	r1, r1, #31
 80005a8:	09b6      	lsrs	r6, r6, #6
 80005aa:	428c      	cmp	r4, r1
 80005ac:	d04b      	beq.n	8000646 <__aeabi_fadd+0xbe>
 80005ae:	1bea      	subs	r2, r5, r7
 80005b0:	2a00      	cmp	r2, #0
 80005b2:	dd36      	ble.n	8000622 <__aeabi_fadd+0x9a>
 80005b4:	2f00      	cmp	r7, #0
 80005b6:	d061      	beq.n	800067c <__aeabi_fadd+0xf4>
 80005b8:	2dff      	cmp	r5, #255	; 0xff
 80005ba:	d100      	bne.n	80005be <__aeabi_fadd+0x36>
 80005bc:	e0ad      	b.n	800071a <__aeabi_fadd+0x192>
 80005be:	2380      	movs	r3, #128	; 0x80
 80005c0:	04db      	lsls	r3, r3, #19
 80005c2:	431e      	orrs	r6, r3
 80005c4:	2a1b      	cmp	r2, #27
 80005c6:	dc00      	bgt.n	80005ca <__aeabi_fadd+0x42>
 80005c8:	e0d3      	b.n	8000772 <__aeabi_fadd+0x1ea>
 80005ca:	2001      	movs	r0, #1
 80005cc:	4643      	mov	r3, r8
 80005ce:	1a18      	subs	r0, r3, r0
 80005d0:	0143      	lsls	r3, r0, #5
 80005d2:	d400      	bmi.n	80005d6 <__aeabi_fadd+0x4e>
 80005d4:	e08c      	b.n	80006f0 <__aeabi_fadd+0x168>
 80005d6:	0180      	lsls	r0, r0, #6
 80005d8:	0987      	lsrs	r7, r0, #6
 80005da:	0038      	movs	r0, r7
 80005dc:	f002 f960 	bl	80028a0 <__clzsi2>
 80005e0:	3805      	subs	r0, #5
 80005e2:	4087      	lsls	r7, r0
 80005e4:	4285      	cmp	r5, r0
 80005e6:	dc00      	bgt.n	80005ea <__aeabi_fadd+0x62>
 80005e8:	e0b6      	b.n	8000758 <__aeabi_fadd+0x1d0>
 80005ea:	1a2d      	subs	r5, r5, r0
 80005ec:	48b3      	ldr	r0, [pc, #716]	; (80008bc <__aeabi_fadd+0x334>)
 80005ee:	4038      	ands	r0, r7
 80005f0:	0743      	lsls	r3, r0, #29
 80005f2:	d004      	beq.n	80005fe <__aeabi_fadd+0x76>
 80005f4:	230f      	movs	r3, #15
 80005f6:	4003      	ands	r3, r0
 80005f8:	2b04      	cmp	r3, #4
 80005fa:	d000      	beq.n	80005fe <__aeabi_fadd+0x76>
 80005fc:	3004      	adds	r0, #4
 80005fe:	0143      	lsls	r3, r0, #5
 8000600:	d400      	bmi.n	8000604 <__aeabi_fadd+0x7c>
 8000602:	e078      	b.n	80006f6 <__aeabi_fadd+0x16e>
 8000604:	1c6a      	adds	r2, r5, #1
 8000606:	2dfe      	cmp	r5, #254	; 0xfe
 8000608:	d065      	beq.n	80006d6 <__aeabi_fadd+0x14e>
 800060a:	0180      	lsls	r0, r0, #6
 800060c:	0a43      	lsrs	r3, r0, #9
 800060e:	469c      	mov	ip, r3
 8000610:	b2d2      	uxtb	r2, r2
 8000612:	4663      	mov	r3, ip
 8000614:	05d0      	lsls	r0, r2, #23
 8000616:	4318      	orrs	r0, r3
 8000618:	07e4      	lsls	r4, r4, #31
 800061a:	4320      	orrs	r0, r4
 800061c:	bc80      	pop	{r7}
 800061e:	46b8      	mov	r8, r7
 8000620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000622:	2a00      	cmp	r2, #0
 8000624:	d035      	beq.n	8000692 <__aeabi_fadd+0x10a>
 8000626:	1b7a      	subs	r2, r7, r5
 8000628:	2d00      	cmp	r5, #0
 800062a:	d000      	beq.n	800062e <__aeabi_fadd+0xa6>
 800062c:	e0af      	b.n	800078e <__aeabi_fadd+0x206>
 800062e:	4643      	mov	r3, r8
 8000630:	2b00      	cmp	r3, #0
 8000632:	d100      	bne.n	8000636 <__aeabi_fadd+0xae>
 8000634:	e0a7      	b.n	8000786 <__aeabi_fadd+0x1fe>
 8000636:	1e53      	subs	r3, r2, #1
 8000638:	2a01      	cmp	r2, #1
 800063a:	d100      	bne.n	800063e <__aeabi_fadd+0xb6>
 800063c:	e12f      	b.n	800089e <__aeabi_fadd+0x316>
 800063e:	2aff      	cmp	r2, #255	; 0xff
 8000640:	d069      	beq.n	8000716 <__aeabi_fadd+0x18e>
 8000642:	001a      	movs	r2, r3
 8000644:	e0aa      	b.n	800079c <__aeabi_fadd+0x214>
 8000646:	1be9      	subs	r1, r5, r7
 8000648:	2900      	cmp	r1, #0
 800064a:	dd70      	ble.n	800072e <__aeabi_fadd+0x1a6>
 800064c:	2f00      	cmp	r7, #0
 800064e:	d037      	beq.n	80006c0 <__aeabi_fadd+0x138>
 8000650:	2dff      	cmp	r5, #255	; 0xff
 8000652:	d062      	beq.n	800071a <__aeabi_fadd+0x192>
 8000654:	2380      	movs	r3, #128	; 0x80
 8000656:	04db      	lsls	r3, r3, #19
 8000658:	431e      	orrs	r6, r3
 800065a:	291b      	cmp	r1, #27
 800065c:	dc00      	bgt.n	8000660 <__aeabi_fadd+0xd8>
 800065e:	e0b0      	b.n	80007c2 <__aeabi_fadd+0x23a>
 8000660:	2001      	movs	r0, #1
 8000662:	4440      	add	r0, r8
 8000664:	0143      	lsls	r3, r0, #5
 8000666:	d543      	bpl.n	80006f0 <__aeabi_fadd+0x168>
 8000668:	3501      	adds	r5, #1
 800066a:	2dff      	cmp	r5, #255	; 0xff
 800066c:	d033      	beq.n	80006d6 <__aeabi_fadd+0x14e>
 800066e:	2301      	movs	r3, #1
 8000670:	4a93      	ldr	r2, [pc, #588]	; (80008c0 <__aeabi_fadd+0x338>)
 8000672:	4003      	ands	r3, r0
 8000674:	0840      	lsrs	r0, r0, #1
 8000676:	4010      	ands	r0, r2
 8000678:	4318      	orrs	r0, r3
 800067a:	e7b9      	b.n	80005f0 <__aeabi_fadd+0x68>
 800067c:	2e00      	cmp	r6, #0
 800067e:	d100      	bne.n	8000682 <__aeabi_fadd+0xfa>
 8000680:	e083      	b.n	800078a <__aeabi_fadd+0x202>
 8000682:	1e51      	subs	r1, r2, #1
 8000684:	2a01      	cmp	r2, #1
 8000686:	d100      	bne.n	800068a <__aeabi_fadd+0x102>
 8000688:	e0d8      	b.n	800083c <__aeabi_fadd+0x2b4>
 800068a:	2aff      	cmp	r2, #255	; 0xff
 800068c:	d045      	beq.n	800071a <__aeabi_fadd+0x192>
 800068e:	000a      	movs	r2, r1
 8000690:	e798      	b.n	80005c4 <__aeabi_fadd+0x3c>
 8000692:	27fe      	movs	r7, #254	; 0xfe
 8000694:	1c6a      	adds	r2, r5, #1
 8000696:	4217      	tst	r7, r2
 8000698:	d000      	beq.n	800069c <__aeabi_fadd+0x114>
 800069a:	e086      	b.n	80007aa <__aeabi_fadd+0x222>
 800069c:	2d00      	cmp	r5, #0
 800069e:	d000      	beq.n	80006a2 <__aeabi_fadd+0x11a>
 80006a0:	e0b7      	b.n	8000812 <__aeabi_fadd+0x28a>
 80006a2:	4643      	mov	r3, r8
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d100      	bne.n	80006aa <__aeabi_fadd+0x122>
 80006a8:	e0f3      	b.n	8000892 <__aeabi_fadd+0x30a>
 80006aa:	2200      	movs	r2, #0
 80006ac:	2e00      	cmp	r6, #0
 80006ae:	d0b0      	beq.n	8000612 <__aeabi_fadd+0x8a>
 80006b0:	1b98      	subs	r0, r3, r6
 80006b2:	0143      	lsls	r3, r0, #5
 80006b4:	d400      	bmi.n	80006b8 <__aeabi_fadd+0x130>
 80006b6:	e0fa      	b.n	80008ae <__aeabi_fadd+0x326>
 80006b8:	4643      	mov	r3, r8
 80006ba:	000c      	movs	r4, r1
 80006bc:	1af0      	subs	r0, r6, r3
 80006be:	e797      	b.n	80005f0 <__aeabi_fadd+0x68>
 80006c0:	2e00      	cmp	r6, #0
 80006c2:	d100      	bne.n	80006c6 <__aeabi_fadd+0x13e>
 80006c4:	e0c8      	b.n	8000858 <__aeabi_fadd+0x2d0>
 80006c6:	1e4a      	subs	r2, r1, #1
 80006c8:	2901      	cmp	r1, #1
 80006ca:	d100      	bne.n	80006ce <__aeabi_fadd+0x146>
 80006cc:	e0ae      	b.n	800082c <__aeabi_fadd+0x2a4>
 80006ce:	29ff      	cmp	r1, #255	; 0xff
 80006d0:	d023      	beq.n	800071a <__aeabi_fadd+0x192>
 80006d2:	0011      	movs	r1, r2
 80006d4:	e7c1      	b.n	800065a <__aeabi_fadd+0xd2>
 80006d6:	2300      	movs	r3, #0
 80006d8:	22ff      	movs	r2, #255	; 0xff
 80006da:	469c      	mov	ip, r3
 80006dc:	e799      	b.n	8000612 <__aeabi_fadd+0x8a>
 80006de:	21fe      	movs	r1, #254	; 0xfe
 80006e0:	1c6a      	adds	r2, r5, #1
 80006e2:	4211      	tst	r1, r2
 80006e4:	d077      	beq.n	80007d6 <__aeabi_fadd+0x24e>
 80006e6:	2aff      	cmp	r2, #255	; 0xff
 80006e8:	d0f5      	beq.n	80006d6 <__aeabi_fadd+0x14e>
 80006ea:	0015      	movs	r5, r2
 80006ec:	4446      	add	r6, r8
 80006ee:	0870      	lsrs	r0, r6, #1
 80006f0:	0743      	lsls	r3, r0, #29
 80006f2:	d000      	beq.n	80006f6 <__aeabi_fadd+0x16e>
 80006f4:	e77e      	b.n	80005f4 <__aeabi_fadd+0x6c>
 80006f6:	08c3      	lsrs	r3, r0, #3
 80006f8:	2dff      	cmp	r5, #255	; 0xff
 80006fa:	d00e      	beq.n	800071a <__aeabi_fadd+0x192>
 80006fc:	025b      	lsls	r3, r3, #9
 80006fe:	0a5b      	lsrs	r3, r3, #9
 8000700:	469c      	mov	ip, r3
 8000702:	b2ea      	uxtb	r2, r5
 8000704:	e785      	b.n	8000612 <__aeabi_fadd+0x8a>
 8000706:	2e00      	cmp	r6, #0
 8000708:	d007      	beq.n	800071a <__aeabi_fadd+0x192>
 800070a:	2280      	movs	r2, #128	; 0x80
 800070c:	03d2      	lsls	r2, r2, #15
 800070e:	4213      	tst	r3, r2
 8000710:	d003      	beq.n	800071a <__aeabi_fadd+0x192>
 8000712:	4210      	tst	r0, r2
 8000714:	d101      	bne.n	800071a <__aeabi_fadd+0x192>
 8000716:	000c      	movs	r4, r1
 8000718:	0003      	movs	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d0db      	beq.n	80006d6 <__aeabi_fadd+0x14e>
 800071e:	2080      	movs	r0, #128	; 0x80
 8000720:	03c0      	lsls	r0, r0, #15
 8000722:	4318      	orrs	r0, r3
 8000724:	0240      	lsls	r0, r0, #9
 8000726:	0a43      	lsrs	r3, r0, #9
 8000728:	469c      	mov	ip, r3
 800072a:	22ff      	movs	r2, #255	; 0xff
 800072c:	e771      	b.n	8000612 <__aeabi_fadd+0x8a>
 800072e:	2900      	cmp	r1, #0
 8000730:	d0d5      	beq.n	80006de <__aeabi_fadd+0x156>
 8000732:	1b7a      	subs	r2, r7, r5
 8000734:	2d00      	cmp	r5, #0
 8000736:	d160      	bne.n	80007fa <__aeabi_fadd+0x272>
 8000738:	4643      	mov	r3, r8
 800073a:	2b00      	cmp	r3, #0
 800073c:	d024      	beq.n	8000788 <__aeabi_fadd+0x200>
 800073e:	1e53      	subs	r3, r2, #1
 8000740:	2a01      	cmp	r2, #1
 8000742:	d073      	beq.n	800082c <__aeabi_fadd+0x2a4>
 8000744:	2aff      	cmp	r2, #255	; 0xff
 8000746:	d0e7      	beq.n	8000718 <__aeabi_fadd+0x190>
 8000748:	001a      	movs	r2, r3
 800074a:	2a1b      	cmp	r2, #27
 800074c:	dc00      	bgt.n	8000750 <__aeabi_fadd+0x1c8>
 800074e:	e085      	b.n	800085c <__aeabi_fadd+0x2d4>
 8000750:	2001      	movs	r0, #1
 8000752:	003d      	movs	r5, r7
 8000754:	1980      	adds	r0, r0, r6
 8000756:	e785      	b.n	8000664 <__aeabi_fadd+0xdc>
 8000758:	2320      	movs	r3, #32
 800075a:	003a      	movs	r2, r7
 800075c:	1b45      	subs	r5, r0, r5
 800075e:	0038      	movs	r0, r7
 8000760:	3501      	adds	r5, #1
 8000762:	40ea      	lsrs	r2, r5
 8000764:	1b5d      	subs	r5, r3, r5
 8000766:	40a8      	lsls	r0, r5
 8000768:	1e43      	subs	r3, r0, #1
 800076a:	4198      	sbcs	r0, r3
 800076c:	2500      	movs	r5, #0
 800076e:	4310      	orrs	r0, r2
 8000770:	e73e      	b.n	80005f0 <__aeabi_fadd+0x68>
 8000772:	2320      	movs	r3, #32
 8000774:	0030      	movs	r0, r6
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	0031      	movs	r1, r6
 800077a:	4098      	lsls	r0, r3
 800077c:	40d1      	lsrs	r1, r2
 800077e:	1e43      	subs	r3, r0, #1
 8000780:	4198      	sbcs	r0, r3
 8000782:	4308      	orrs	r0, r1
 8000784:	e722      	b.n	80005cc <__aeabi_fadd+0x44>
 8000786:	000c      	movs	r4, r1
 8000788:	0003      	movs	r3, r0
 800078a:	0015      	movs	r5, r2
 800078c:	e7b4      	b.n	80006f8 <__aeabi_fadd+0x170>
 800078e:	2fff      	cmp	r7, #255	; 0xff
 8000790:	d0c1      	beq.n	8000716 <__aeabi_fadd+0x18e>
 8000792:	2380      	movs	r3, #128	; 0x80
 8000794:	4640      	mov	r0, r8
 8000796:	04db      	lsls	r3, r3, #19
 8000798:	4318      	orrs	r0, r3
 800079a:	4680      	mov	r8, r0
 800079c:	2a1b      	cmp	r2, #27
 800079e:	dd51      	ble.n	8000844 <__aeabi_fadd+0x2bc>
 80007a0:	2001      	movs	r0, #1
 80007a2:	000c      	movs	r4, r1
 80007a4:	003d      	movs	r5, r7
 80007a6:	1a30      	subs	r0, r6, r0
 80007a8:	e712      	b.n	80005d0 <__aeabi_fadd+0x48>
 80007aa:	4643      	mov	r3, r8
 80007ac:	1b9f      	subs	r7, r3, r6
 80007ae:	017b      	lsls	r3, r7, #5
 80007b0:	d42b      	bmi.n	800080a <__aeabi_fadd+0x282>
 80007b2:	2f00      	cmp	r7, #0
 80007b4:	d000      	beq.n	80007b8 <__aeabi_fadd+0x230>
 80007b6:	e710      	b.n	80005da <__aeabi_fadd+0x52>
 80007b8:	2300      	movs	r3, #0
 80007ba:	2400      	movs	r4, #0
 80007bc:	2200      	movs	r2, #0
 80007be:	469c      	mov	ip, r3
 80007c0:	e727      	b.n	8000612 <__aeabi_fadd+0x8a>
 80007c2:	2320      	movs	r3, #32
 80007c4:	0032      	movs	r2, r6
 80007c6:	0030      	movs	r0, r6
 80007c8:	40ca      	lsrs	r2, r1
 80007ca:	1a59      	subs	r1, r3, r1
 80007cc:	4088      	lsls	r0, r1
 80007ce:	1e43      	subs	r3, r0, #1
 80007d0:	4198      	sbcs	r0, r3
 80007d2:	4310      	orrs	r0, r2
 80007d4:	e745      	b.n	8000662 <__aeabi_fadd+0xda>
 80007d6:	2d00      	cmp	r5, #0
 80007d8:	d14a      	bne.n	8000870 <__aeabi_fadd+0x2e8>
 80007da:	4643      	mov	r3, r8
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d063      	beq.n	80008a8 <__aeabi_fadd+0x320>
 80007e0:	2200      	movs	r2, #0
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	d100      	bne.n	80007e8 <__aeabi_fadd+0x260>
 80007e6:	e714      	b.n	8000612 <__aeabi_fadd+0x8a>
 80007e8:	0030      	movs	r0, r6
 80007ea:	4440      	add	r0, r8
 80007ec:	0143      	lsls	r3, r0, #5
 80007ee:	d400      	bmi.n	80007f2 <__aeabi_fadd+0x26a>
 80007f0:	e77e      	b.n	80006f0 <__aeabi_fadd+0x168>
 80007f2:	4b32      	ldr	r3, [pc, #200]	; (80008bc <__aeabi_fadd+0x334>)
 80007f4:	3501      	adds	r5, #1
 80007f6:	4018      	ands	r0, r3
 80007f8:	e77a      	b.n	80006f0 <__aeabi_fadd+0x168>
 80007fa:	2fff      	cmp	r7, #255	; 0xff
 80007fc:	d08c      	beq.n	8000718 <__aeabi_fadd+0x190>
 80007fe:	2380      	movs	r3, #128	; 0x80
 8000800:	4641      	mov	r1, r8
 8000802:	04db      	lsls	r3, r3, #19
 8000804:	4319      	orrs	r1, r3
 8000806:	4688      	mov	r8, r1
 8000808:	e79f      	b.n	800074a <__aeabi_fadd+0x1c2>
 800080a:	4643      	mov	r3, r8
 800080c:	000c      	movs	r4, r1
 800080e:	1af7      	subs	r7, r6, r3
 8000810:	e6e3      	b.n	80005da <__aeabi_fadd+0x52>
 8000812:	4642      	mov	r2, r8
 8000814:	2a00      	cmp	r2, #0
 8000816:	d000      	beq.n	800081a <__aeabi_fadd+0x292>
 8000818:	e775      	b.n	8000706 <__aeabi_fadd+0x17e>
 800081a:	2e00      	cmp	r6, #0
 800081c:	d000      	beq.n	8000820 <__aeabi_fadd+0x298>
 800081e:	e77a      	b.n	8000716 <__aeabi_fadd+0x18e>
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	03db      	lsls	r3, r3, #15
 8000824:	2400      	movs	r4, #0
 8000826:	469c      	mov	ip, r3
 8000828:	22ff      	movs	r2, #255	; 0xff
 800082a:	e6f2      	b.n	8000612 <__aeabi_fadd+0x8a>
 800082c:	0030      	movs	r0, r6
 800082e:	4440      	add	r0, r8
 8000830:	2501      	movs	r5, #1
 8000832:	0143      	lsls	r3, r0, #5
 8000834:	d400      	bmi.n	8000838 <__aeabi_fadd+0x2b0>
 8000836:	e75b      	b.n	80006f0 <__aeabi_fadd+0x168>
 8000838:	2502      	movs	r5, #2
 800083a:	e718      	b.n	800066e <__aeabi_fadd+0xe6>
 800083c:	4643      	mov	r3, r8
 800083e:	2501      	movs	r5, #1
 8000840:	1b98      	subs	r0, r3, r6
 8000842:	e6c5      	b.n	80005d0 <__aeabi_fadd+0x48>
 8000844:	2320      	movs	r3, #32
 8000846:	4644      	mov	r4, r8
 8000848:	4640      	mov	r0, r8
 800084a:	40d4      	lsrs	r4, r2
 800084c:	1a9a      	subs	r2, r3, r2
 800084e:	4090      	lsls	r0, r2
 8000850:	1e43      	subs	r3, r0, #1
 8000852:	4198      	sbcs	r0, r3
 8000854:	4320      	orrs	r0, r4
 8000856:	e7a4      	b.n	80007a2 <__aeabi_fadd+0x21a>
 8000858:	000d      	movs	r5, r1
 800085a:	e74d      	b.n	80006f8 <__aeabi_fadd+0x170>
 800085c:	2320      	movs	r3, #32
 800085e:	4641      	mov	r1, r8
 8000860:	4640      	mov	r0, r8
 8000862:	40d1      	lsrs	r1, r2
 8000864:	1a9a      	subs	r2, r3, r2
 8000866:	4090      	lsls	r0, r2
 8000868:	1e43      	subs	r3, r0, #1
 800086a:	4198      	sbcs	r0, r3
 800086c:	4308      	orrs	r0, r1
 800086e:	e770      	b.n	8000752 <__aeabi_fadd+0x1ca>
 8000870:	4642      	mov	r2, r8
 8000872:	2a00      	cmp	r2, #0
 8000874:	d100      	bne.n	8000878 <__aeabi_fadd+0x2f0>
 8000876:	e74f      	b.n	8000718 <__aeabi_fadd+0x190>
 8000878:	2e00      	cmp	r6, #0
 800087a:	d100      	bne.n	800087e <__aeabi_fadd+0x2f6>
 800087c:	e74d      	b.n	800071a <__aeabi_fadd+0x192>
 800087e:	2280      	movs	r2, #128	; 0x80
 8000880:	03d2      	lsls	r2, r2, #15
 8000882:	4213      	tst	r3, r2
 8000884:	d100      	bne.n	8000888 <__aeabi_fadd+0x300>
 8000886:	e748      	b.n	800071a <__aeabi_fadd+0x192>
 8000888:	4210      	tst	r0, r2
 800088a:	d000      	beq.n	800088e <__aeabi_fadd+0x306>
 800088c:	e745      	b.n	800071a <__aeabi_fadd+0x192>
 800088e:	0003      	movs	r3, r0
 8000890:	e743      	b.n	800071a <__aeabi_fadd+0x192>
 8000892:	2e00      	cmp	r6, #0
 8000894:	d090      	beq.n	80007b8 <__aeabi_fadd+0x230>
 8000896:	000c      	movs	r4, r1
 8000898:	4684      	mov	ip, r0
 800089a:	2200      	movs	r2, #0
 800089c:	e6b9      	b.n	8000612 <__aeabi_fadd+0x8a>
 800089e:	4643      	mov	r3, r8
 80008a0:	000c      	movs	r4, r1
 80008a2:	1af0      	subs	r0, r6, r3
 80008a4:	3501      	adds	r5, #1
 80008a6:	e693      	b.n	80005d0 <__aeabi_fadd+0x48>
 80008a8:	4684      	mov	ip, r0
 80008aa:	2200      	movs	r2, #0
 80008ac:	e6b1      	b.n	8000612 <__aeabi_fadd+0x8a>
 80008ae:	2800      	cmp	r0, #0
 80008b0:	d000      	beq.n	80008b4 <__aeabi_fadd+0x32c>
 80008b2:	e71d      	b.n	80006f0 <__aeabi_fadd+0x168>
 80008b4:	2300      	movs	r3, #0
 80008b6:	2400      	movs	r4, #0
 80008b8:	469c      	mov	ip, r3
 80008ba:	e6aa      	b.n	8000612 <__aeabi_fadd+0x8a>
 80008bc:	fbffffff 	.word	0xfbffffff
 80008c0:	7dffffff 	.word	0x7dffffff

080008c4 <__aeabi_fdiv>:
 80008c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008c6:	464f      	mov	r7, r9
 80008c8:	4646      	mov	r6, r8
 80008ca:	46d6      	mov	lr, sl
 80008cc:	0245      	lsls	r5, r0, #9
 80008ce:	b5c0      	push	{r6, r7, lr}
 80008d0:	0047      	lsls	r7, r0, #1
 80008d2:	1c0c      	adds	r4, r1, #0
 80008d4:	0a6d      	lsrs	r5, r5, #9
 80008d6:	0e3f      	lsrs	r7, r7, #24
 80008d8:	0fc6      	lsrs	r6, r0, #31
 80008da:	2f00      	cmp	r7, #0
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fdiv+0x1c>
 80008de:	e070      	b.n	80009c2 <__aeabi_fdiv+0xfe>
 80008e0:	2fff      	cmp	r7, #255	; 0xff
 80008e2:	d100      	bne.n	80008e6 <__aeabi_fdiv+0x22>
 80008e4:	e075      	b.n	80009d2 <__aeabi_fdiv+0x10e>
 80008e6:	00eb      	lsls	r3, r5, #3
 80008e8:	2580      	movs	r5, #128	; 0x80
 80008ea:	04ed      	lsls	r5, r5, #19
 80008ec:	431d      	orrs	r5, r3
 80008ee:	2300      	movs	r3, #0
 80008f0:	4699      	mov	r9, r3
 80008f2:	469a      	mov	sl, r3
 80008f4:	3f7f      	subs	r7, #127	; 0x7f
 80008f6:	0260      	lsls	r0, r4, #9
 80008f8:	0a43      	lsrs	r3, r0, #9
 80008fa:	4698      	mov	r8, r3
 80008fc:	0063      	lsls	r3, r4, #1
 80008fe:	0e1b      	lsrs	r3, r3, #24
 8000900:	0fe4      	lsrs	r4, r4, #31
 8000902:	2b00      	cmp	r3, #0
 8000904:	d04e      	beq.n	80009a4 <__aeabi_fdiv+0xe0>
 8000906:	2bff      	cmp	r3, #255	; 0xff
 8000908:	d046      	beq.n	8000998 <__aeabi_fdiv+0xd4>
 800090a:	4642      	mov	r2, r8
 800090c:	00d0      	lsls	r0, r2, #3
 800090e:	2280      	movs	r2, #128	; 0x80
 8000910:	04d2      	lsls	r2, r2, #19
 8000912:	4302      	orrs	r2, r0
 8000914:	4690      	mov	r8, r2
 8000916:	2200      	movs	r2, #0
 8000918:	3b7f      	subs	r3, #127	; 0x7f
 800091a:	0031      	movs	r1, r6
 800091c:	1aff      	subs	r7, r7, r3
 800091e:	464b      	mov	r3, r9
 8000920:	4061      	eors	r1, r4
 8000922:	b2c9      	uxtb	r1, r1
 8000924:	4313      	orrs	r3, r2
 8000926:	2b0f      	cmp	r3, #15
 8000928:	d900      	bls.n	800092c <__aeabi_fdiv+0x68>
 800092a:	e0b5      	b.n	8000a98 <__aeabi_fdiv+0x1d4>
 800092c:	486e      	ldr	r0, [pc, #440]	; (8000ae8 <__aeabi_fdiv+0x224>)
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	58c3      	ldr	r3, [r0, r3]
 8000932:	469f      	mov	pc, r3
 8000934:	2300      	movs	r3, #0
 8000936:	4698      	mov	r8, r3
 8000938:	0026      	movs	r6, r4
 800093a:	4645      	mov	r5, r8
 800093c:	4692      	mov	sl, r2
 800093e:	4653      	mov	r3, sl
 8000940:	2b02      	cmp	r3, #2
 8000942:	d100      	bne.n	8000946 <__aeabi_fdiv+0x82>
 8000944:	e089      	b.n	8000a5a <__aeabi_fdiv+0x196>
 8000946:	2b03      	cmp	r3, #3
 8000948:	d100      	bne.n	800094c <__aeabi_fdiv+0x88>
 800094a:	e09e      	b.n	8000a8a <__aeabi_fdiv+0x1c6>
 800094c:	2b01      	cmp	r3, #1
 800094e:	d018      	beq.n	8000982 <__aeabi_fdiv+0xbe>
 8000950:	003b      	movs	r3, r7
 8000952:	337f      	adds	r3, #127	; 0x7f
 8000954:	2b00      	cmp	r3, #0
 8000956:	dd69      	ble.n	8000a2c <__aeabi_fdiv+0x168>
 8000958:	076a      	lsls	r2, r5, #29
 800095a:	d004      	beq.n	8000966 <__aeabi_fdiv+0xa2>
 800095c:	220f      	movs	r2, #15
 800095e:	402a      	ands	r2, r5
 8000960:	2a04      	cmp	r2, #4
 8000962:	d000      	beq.n	8000966 <__aeabi_fdiv+0xa2>
 8000964:	3504      	adds	r5, #4
 8000966:	012a      	lsls	r2, r5, #4
 8000968:	d503      	bpl.n	8000972 <__aeabi_fdiv+0xae>
 800096a:	4b60      	ldr	r3, [pc, #384]	; (8000aec <__aeabi_fdiv+0x228>)
 800096c:	401d      	ands	r5, r3
 800096e:	003b      	movs	r3, r7
 8000970:	3380      	adds	r3, #128	; 0x80
 8000972:	2bfe      	cmp	r3, #254	; 0xfe
 8000974:	dd00      	ble.n	8000978 <__aeabi_fdiv+0xb4>
 8000976:	e070      	b.n	8000a5a <__aeabi_fdiv+0x196>
 8000978:	01ad      	lsls	r5, r5, #6
 800097a:	0a6d      	lsrs	r5, r5, #9
 800097c:	b2d8      	uxtb	r0, r3
 800097e:	e002      	b.n	8000986 <__aeabi_fdiv+0xc2>
 8000980:	000e      	movs	r6, r1
 8000982:	2000      	movs	r0, #0
 8000984:	2500      	movs	r5, #0
 8000986:	05c0      	lsls	r0, r0, #23
 8000988:	4328      	orrs	r0, r5
 800098a:	07f6      	lsls	r6, r6, #31
 800098c:	4330      	orrs	r0, r6
 800098e:	bce0      	pop	{r5, r6, r7}
 8000990:	46ba      	mov	sl, r7
 8000992:	46b1      	mov	r9, r6
 8000994:	46a8      	mov	r8, r5
 8000996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000998:	4643      	mov	r3, r8
 800099a:	2b00      	cmp	r3, #0
 800099c:	d13f      	bne.n	8000a1e <__aeabi_fdiv+0x15a>
 800099e:	2202      	movs	r2, #2
 80009a0:	3fff      	subs	r7, #255	; 0xff
 80009a2:	e003      	b.n	80009ac <__aeabi_fdiv+0xe8>
 80009a4:	4643      	mov	r3, r8
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d12d      	bne.n	8000a06 <__aeabi_fdiv+0x142>
 80009aa:	2201      	movs	r2, #1
 80009ac:	0031      	movs	r1, r6
 80009ae:	464b      	mov	r3, r9
 80009b0:	4061      	eors	r1, r4
 80009b2:	b2c9      	uxtb	r1, r1
 80009b4:	4313      	orrs	r3, r2
 80009b6:	2b0f      	cmp	r3, #15
 80009b8:	d834      	bhi.n	8000a24 <__aeabi_fdiv+0x160>
 80009ba:	484d      	ldr	r0, [pc, #308]	; (8000af0 <__aeabi_fdiv+0x22c>)
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	58c3      	ldr	r3, [r0, r3]
 80009c0:	469f      	mov	pc, r3
 80009c2:	2d00      	cmp	r5, #0
 80009c4:	d113      	bne.n	80009ee <__aeabi_fdiv+0x12a>
 80009c6:	2304      	movs	r3, #4
 80009c8:	4699      	mov	r9, r3
 80009ca:	3b03      	subs	r3, #3
 80009cc:	2700      	movs	r7, #0
 80009ce:	469a      	mov	sl, r3
 80009d0:	e791      	b.n	80008f6 <__aeabi_fdiv+0x32>
 80009d2:	2d00      	cmp	r5, #0
 80009d4:	d105      	bne.n	80009e2 <__aeabi_fdiv+0x11e>
 80009d6:	2308      	movs	r3, #8
 80009d8:	4699      	mov	r9, r3
 80009da:	3b06      	subs	r3, #6
 80009dc:	27ff      	movs	r7, #255	; 0xff
 80009de:	469a      	mov	sl, r3
 80009e0:	e789      	b.n	80008f6 <__aeabi_fdiv+0x32>
 80009e2:	230c      	movs	r3, #12
 80009e4:	4699      	mov	r9, r3
 80009e6:	3b09      	subs	r3, #9
 80009e8:	27ff      	movs	r7, #255	; 0xff
 80009ea:	469a      	mov	sl, r3
 80009ec:	e783      	b.n	80008f6 <__aeabi_fdiv+0x32>
 80009ee:	0028      	movs	r0, r5
 80009f0:	f001 ff56 	bl	80028a0 <__clzsi2>
 80009f4:	2776      	movs	r7, #118	; 0x76
 80009f6:	1f43      	subs	r3, r0, #5
 80009f8:	409d      	lsls	r5, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	427f      	negs	r7, r7
 80009fe:	4699      	mov	r9, r3
 8000a00:	469a      	mov	sl, r3
 8000a02:	1a3f      	subs	r7, r7, r0
 8000a04:	e777      	b.n	80008f6 <__aeabi_fdiv+0x32>
 8000a06:	4640      	mov	r0, r8
 8000a08:	f001 ff4a 	bl	80028a0 <__clzsi2>
 8000a0c:	4642      	mov	r2, r8
 8000a0e:	1f43      	subs	r3, r0, #5
 8000a10:	409a      	lsls	r2, r3
 8000a12:	2376      	movs	r3, #118	; 0x76
 8000a14:	425b      	negs	r3, r3
 8000a16:	4690      	mov	r8, r2
 8000a18:	1a1b      	subs	r3, r3, r0
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	e77d      	b.n	800091a <__aeabi_fdiv+0x56>
 8000a1e:	23ff      	movs	r3, #255	; 0xff
 8000a20:	2203      	movs	r2, #3
 8000a22:	e77a      	b.n	800091a <__aeabi_fdiv+0x56>
 8000a24:	000e      	movs	r6, r1
 8000a26:	20ff      	movs	r0, #255	; 0xff
 8000a28:	2500      	movs	r5, #0
 8000a2a:	e7ac      	b.n	8000986 <__aeabi_fdiv+0xc2>
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	1ac0      	subs	r0, r0, r3
 8000a30:	281b      	cmp	r0, #27
 8000a32:	dca6      	bgt.n	8000982 <__aeabi_fdiv+0xbe>
 8000a34:	379e      	adds	r7, #158	; 0x9e
 8000a36:	002a      	movs	r2, r5
 8000a38:	40bd      	lsls	r5, r7
 8000a3a:	40c2      	lsrs	r2, r0
 8000a3c:	1e6b      	subs	r3, r5, #1
 8000a3e:	419d      	sbcs	r5, r3
 8000a40:	4315      	orrs	r5, r2
 8000a42:	076b      	lsls	r3, r5, #29
 8000a44:	d004      	beq.n	8000a50 <__aeabi_fdiv+0x18c>
 8000a46:	230f      	movs	r3, #15
 8000a48:	402b      	ands	r3, r5
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	d000      	beq.n	8000a50 <__aeabi_fdiv+0x18c>
 8000a4e:	3504      	adds	r5, #4
 8000a50:	016b      	lsls	r3, r5, #5
 8000a52:	d544      	bpl.n	8000ade <__aeabi_fdiv+0x21a>
 8000a54:	2001      	movs	r0, #1
 8000a56:	2500      	movs	r5, #0
 8000a58:	e795      	b.n	8000986 <__aeabi_fdiv+0xc2>
 8000a5a:	20ff      	movs	r0, #255	; 0xff
 8000a5c:	2500      	movs	r5, #0
 8000a5e:	e792      	b.n	8000986 <__aeabi_fdiv+0xc2>
 8000a60:	2580      	movs	r5, #128	; 0x80
 8000a62:	2600      	movs	r6, #0
 8000a64:	20ff      	movs	r0, #255	; 0xff
 8000a66:	03ed      	lsls	r5, r5, #15
 8000a68:	e78d      	b.n	8000986 <__aeabi_fdiv+0xc2>
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	4698      	mov	r8, r3
 8000a6e:	2080      	movs	r0, #128	; 0x80
 8000a70:	03c0      	lsls	r0, r0, #15
 8000a72:	4205      	tst	r5, r0
 8000a74:	d009      	beq.n	8000a8a <__aeabi_fdiv+0x1c6>
 8000a76:	4643      	mov	r3, r8
 8000a78:	4203      	tst	r3, r0
 8000a7a:	d106      	bne.n	8000a8a <__aeabi_fdiv+0x1c6>
 8000a7c:	4645      	mov	r5, r8
 8000a7e:	4305      	orrs	r5, r0
 8000a80:	026d      	lsls	r5, r5, #9
 8000a82:	0026      	movs	r6, r4
 8000a84:	20ff      	movs	r0, #255	; 0xff
 8000a86:	0a6d      	lsrs	r5, r5, #9
 8000a88:	e77d      	b.n	8000986 <__aeabi_fdiv+0xc2>
 8000a8a:	2080      	movs	r0, #128	; 0x80
 8000a8c:	03c0      	lsls	r0, r0, #15
 8000a8e:	4305      	orrs	r5, r0
 8000a90:	026d      	lsls	r5, r5, #9
 8000a92:	20ff      	movs	r0, #255	; 0xff
 8000a94:	0a6d      	lsrs	r5, r5, #9
 8000a96:	e776      	b.n	8000986 <__aeabi_fdiv+0xc2>
 8000a98:	4642      	mov	r2, r8
 8000a9a:	016b      	lsls	r3, r5, #5
 8000a9c:	0150      	lsls	r0, r2, #5
 8000a9e:	4283      	cmp	r3, r0
 8000aa0:	d219      	bcs.n	8000ad6 <__aeabi_fdiv+0x212>
 8000aa2:	221b      	movs	r2, #27
 8000aa4:	2500      	movs	r5, #0
 8000aa6:	3f01      	subs	r7, #1
 8000aa8:	2601      	movs	r6, #1
 8000aaa:	001c      	movs	r4, r3
 8000aac:	006d      	lsls	r5, r5, #1
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	2c00      	cmp	r4, #0
 8000ab2:	db01      	blt.n	8000ab8 <__aeabi_fdiv+0x1f4>
 8000ab4:	4298      	cmp	r0, r3
 8000ab6:	d801      	bhi.n	8000abc <__aeabi_fdiv+0x1f8>
 8000ab8:	1a1b      	subs	r3, r3, r0
 8000aba:	4335      	orrs	r5, r6
 8000abc:	3a01      	subs	r2, #1
 8000abe:	2a00      	cmp	r2, #0
 8000ac0:	d1f3      	bne.n	8000aaa <__aeabi_fdiv+0x1e6>
 8000ac2:	1e5a      	subs	r2, r3, #1
 8000ac4:	4193      	sbcs	r3, r2
 8000ac6:	431d      	orrs	r5, r3
 8000ac8:	003b      	movs	r3, r7
 8000aca:	337f      	adds	r3, #127	; 0x7f
 8000acc:	000e      	movs	r6, r1
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	dd00      	ble.n	8000ad4 <__aeabi_fdiv+0x210>
 8000ad2:	e741      	b.n	8000958 <__aeabi_fdiv+0x94>
 8000ad4:	e7aa      	b.n	8000a2c <__aeabi_fdiv+0x168>
 8000ad6:	221a      	movs	r2, #26
 8000ad8:	2501      	movs	r5, #1
 8000ada:	1a1b      	subs	r3, r3, r0
 8000adc:	e7e4      	b.n	8000aa8 <__aeabi_fdiv+0x1e4>
 8000ade:	01ad      	lsls	r5, r5, #6
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	0a6d      	lsrs	r5, r5, #9
 8000ae4:	e74f      	b.n	8000986 <__aeabi_fdiv+0xc2>
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	0800c2c8 	.word	0x0800c2c8
 8000aec:	f7ffffff 	.word	0xf7ffffff
 8000af0:	0800c308 	.word	0x0800c308

08000af4 <__aeabi_f2iz>:
 8000af4:	0241      	lsls	r1, r0, #9
 8000af6:	0042      	lsls	r2, r0, #1
 8000af8:	0fc3      	lsrs	r3, r0, #31
 8000afa:	0a49      	lsrs	r1, r1, #9
 8000afc:	2000      	movs	r0, #0
 8000afe:	0e12      	lsrs	r2, r2, #24
 8000b00:	2a7e      	cmp	r2, #126	; 0x7e
 8000b02:	dd03      	ble.n	8000b0c <__aeabi_f2iz+0x18>
 8000b04:	2a9d      	cmp	r2, #157	; 0x9d
 8000b06:	dd02      	ble.n	8000b0e <__aeabi_f2iz+0x1a>
 8000b08:	4a09      	ldr	r2, [pc, #36]	; (8000b30 <__aeabi_f2iz+0x3c>)
 8000b0a:	1898      	adds	r0, r3, r2
 8000b0c:	4770      	bx	lr
 8000b0e:	2080      	movs	r0, #128	; 0x80
 8000b10:	0400      	lsls	r0, r0, #16
 8000b12:	4301      	orrs	r1, r0
 8000b14:	2a95      	cmp	r2, #149	; 0x95
 8000b16:	dc07      	bgt.n	8000b28 <__aeabi_f2iz+0x34>
 8000b18:	2096      	movs	r0, #150	; 0x96
 8000b1a:	1a82      	subs	r2, r0, r2
 8000b1c:	40d1      	lsrs	r1, r2
 8000b1e:	4248      	negs	r0, r1
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d1f3      	bne.n	8000b0c <__aeabi_f2iz+0x18>
 8000b24:	0008      	movs	r0, r1
 8000b26:	e7f1      	b.n	8000b0c <__aeabi_f2iz+0x18>
 8000b28:	3a96      	subs	r2, #150	; 0x96
 8000b2a:	4091      	lsls	r1, r2
 8000b2c:	e7f7      	b.n	8000b1e <__aeabi_f2iz+0x2a>
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	7fffffff 	.word	0x7fffffff

08000b34 <__aeabi_dadd>:
 8000b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b36:	464f      	mov	r7, r9
 8000b38:	4646      	mov	r6, r8
 8000b3a:	46d6      	mov	lr, sl
 8000b3c:	000d      	movs	r5, r1
 8000b3e:	0004      	movs	r4, r0
 8000b40:	b5c0      	push	{r6, r7, lr}
 8000b42:	001f      	movs	r7, r3
 8000b44:	0011      	movs	r1, r2
 8000b46:	0328      	lsls	r0, r5, #12
 8000b48:	0f62      	lsrs	r2, r4, #29
 8000b4a:	0a40      	lsrs	r0, r0, #9
 8000b4c:	4310      	orrs	r0, r2
 8000b4e:	007a      	lsls	r2, r7, #1
 8000b50:	0d52      	lsrs	r2, r2, #21
 8000b52:	00e3      	lsls	r3, r4, #3
 8000b54:	033c      	lsls	r4, r7, #12
 8000b56:	4691      	mov	r9, r2
 8000b58:	0a64      	lsrs	r4, r4, #9
 8000b5a:	0ffa      	lsrs	r2, r7, #31
 8000b5c:	0f4f      	lsrs	r7, r1, #29
 8000b5e:	006e      	lsls	r6, r5, #1
 8000b60:	4327      	orrs	r7, r4
 8000b62:	4692      	mov	sl, r2
 8000b64:	46b8      	mov	r8, r7
 8000b66:	0d76      	lsrs	r6, r6, #21
 8000b68:	0fed      	lsrs	r5, r5, #31
 8000b6a:	00c9      	lsls	r1, r1, #3
 8000b6c:	4295      	cmp	r5, r2
 8000b6e:	d100      	bne.n	8000b72 <__aeabi_dadd+0x3e>
 8000b70:	e099      	b.n	8000ca6 <__aeabi_dadd+0x172>
 8000b72:	464c      	mov	r4, r9
 8000b74:	1b34      	subs	r4, r6, r4
 8000b76:	46a4      	mov	ip, r4
 8000b78:	2c00      	cmp	r4, #0
 8000b7a:	dc00      	bgt.n	8000b7e <__aeabi_dadd+0x4a>
 8000b7c:	e07c      	b.n	8000c78 <__aeabi_dadd+0x144>
 8000b7e:	464a      	mov	r2, r9
 8000b80:	2a00      	cmp	r2, #0
 8000b82:	d100      	bne.n	8000b86 <__aeabi_dadd+0x52>
 8000b84:	e0b8      	b.n	8000cf8 <__aeabi_dadd+0x1c4>
 8000b86:	4ac5      	ldr	r2, [pc, #788]	; (8000e9c <__aeabi_dadd+0x368>)
 8000b88:	4296      	cmp	r6, r2
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_dadd+0x5a>
 8000b8c:	e11c      	b.n	8000dc8 <__aeabi_dadd+0x294>
 8000b8e:	2280      	movs	r2, #128	; 0x80
 8000b90:	003c      	movs	r4, r7
 8000b92:	0412      	lsls	r2, r2, #16
 8000b94:	4314      	orrs	r4, r2
 8000b96:	46a0      	mov	r8, r4
 8000b98:	4662      	mov	r2, ip
 8000b9a:	2a38      	cmp	r2, #56	; 0x38
 8000b9c:	dd00      	ble.n	8000ba0 <__aeabi_dadd+0x6c>
 8000b9e:	e161      	b.n	8000e64 <__aeabi_dadd+0x330>
 8000ba0:	2a1f      	cmp	r2, #31
 8000ba2:	dd00      	ble.n	8000ba6 <__aeabi_dadd+0x72>
 8000ba4:	e1cc      	b.n	8000f40 <__aeabi_dadd+0x40c>
 8000ba6:	4664      	mov	r4, ip
 8000ba8:	2220      	movs	r2, #32
 8000baa:	1b12      	subs	r2, r2, r4
 8000bac:	4644      	mov	r4, r8
 8000bae:	4094      	lsls	r4, r2
 8000bb0:	000f      	movs	r7, r1
 8000bb2:	46a1      	mov	r9, r4
 8000bb4:	4664      	mov	r4, ip
 8000bb6:	4091      	lsls	r1, r2
 8000bb8:	40e7      	lsrs	r7, r4
 8000bba:	464c      	mov	r4, r9
 8000bbc:	1e4a      	subs	r2, r1, #1
 8000bbe:	4191      	sbcs	r1, r2
 8000bc0:	433c      	orrs	r4, r7
 8000bc2:	4642      	mov	r2, r8
 8000bc4:	4321      	orrs	r1, r4
 8000bc6:	4664      	mov	r4, ip
 8000bc8:	40e2      	lsrs	r2, r4
 8000bca:	1a80      	subs	r0, r0, r2
 8000bcc:	1a5c      	subs	r4, r3, r1
 8000bce:	42a3      	cmp	r3, r4
 8000bd0:	419b      	sbcs	r3, r3
 8000bd2:	425f      	negs	r7, r3
 8000bd4:	1bc7      	subs	r7, r0, r7
 8000bd6:	023b      	lsls	r3, r7, #8
 8000bd8:	d400      	bmi.n	8000bdc <__aeabi_dadd+0xa8>
 8000bda:	e0d0      	b.n	8000d7e <__aeabi_dadd+0x24a>
 8000bdc:	027f      	lsls	r7, r7, #9
 8000bde:	0a7f      	lsrs	r7, r7, #9
 8000be0:	2f00      	cmp	r7, #0
 8000be2:	d100      	bne.n	8000be6 <__aeabi_dadd+0xb2>
 8000be4:	e0ff      	b.n	8000de6 <__aeabi_dadd+0x2b2>
 8000be6:	0038      	movs	r0, r7
 8000be8:	f001 fe5a 	bl	80028a0 <__clzsi2>
 8000bec:	0001      	movs	r1, r0
 8000bee:	3908      	subs	r1, #8
 8000bf0:	2320      	movs	r3, #32
 8000bf2:	0022      	movs	r2, r4
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	408f      	lsls	r7, r1
 8000bf8:	40da      	lsrs	r2, r3
 8000bfa:	408c      	lsls	r4, r1
 8000bfc:	4317      	orrs	r7, r2
 8000bfe:	42b1      	cmp	r1, r6
 8000c00:	da00      	bge.n	8000c04 <__aeabi_dadd+0xd0>
 8000c02:	e0ff      	b.n	8000e04 <__aeabi_dadd+0x2d0>
 8000c04:	1b89      	subs	r1, r1, r6
 8000c06:	1c4b      	adds	r3, r1, #1
 8000c08:	2b1f      	cmp	r3, #31
 8000c0a:	dd00      	ble.n	8000c0e <__aeabi_dadd+0xda>
 8000c0c:	e0a8      	b.n	8000d60 <__aeabi_dadd+0x22c>
 8000c0e:	2220      	movs	r2, #32
 8000c10:	0039      	movs	r1, r7
 8000c12:	1ad2      	subs	r2, r2, r3
 8000c14:	0020      	movs	r0, r4
 8000c16:	4094      	lsls	r4, r2
 8000c18:	4091      	lsls	r1, r2
 8000c1a:	40d8      	lsrs	r0, r3
 8000c1c:	1e62      	subs	r2, r4, #1
 8000c1e:	4194      	sbcs	r4, r2
 8000c20:	40df      	lsrs	r7, r3
 8000c22:	2600      	movs	r6, #0
 8000c24:	4301      	orrs	r1, r0
 8000c26:	430c      	orrs	r4, r1
 8000c28:	0763      	lsls	r3, r4, #29
 8000c2a:	d009      	beq.n	8000c40 <__aeabi_dadd+0x10c>
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	4023      	ands	r3, r4
 8000c30:	2b04      	cmp	r3, #4
 8000c32:	d005      	beq.n	8000c40 <__aeabi_dadd+0x10c>
 8000c34:	1d23      	adds	r3, r4, #4
 8000c36:	42a3      	cmp	r3, r4
 8000c38:	41a4      	sbcs	r4, r4
 8000c3a:	4264      	negs	r4, r4
 8000c3c:	193f      	adds	r7, r7, r4
 8000c3e:	001c      	movs	r4, r3
 8000c40:	023b      	lsls	r3, r7, #8
 8000c42:	d400      	bmi.n	8000c46 <__aeabi_dadd+0x112>
 8000c44:	e09e      	b.n	8000d84 <__aeabi_dadd+0x250>
 8000c46:	4b95      	ldr	r3, [pc, #596]	; (8000e9c <__aeabi_dadd+0x368>)
 8000c48:	3601      	adds	r6, #1
 8000c4a:	429e      	cmp	r6, r3
 8000c4c:	d100      	bne.n	8000c50 <__aeabi_dadd+0x11c>
 8000c4e:	e0b7      	b.n	8000dc0 <__aeabi_dadd+0x28c>
 8000c50:	4a93      	ldr	r2, [pc, #588]	; (8000ea0 <__aeabi_dadd+0x36c>)
 8000c52:	08e4      	lsrs	r4, r4, #3
 8000c54:	4017      	ands	r7, r2
 8000c56:	077b      	lsls	r3, r7, #29
 8000c58:	0571      	lsls	r1, r6, #21
 8000c5a:	027f      	lsls	r7, r7, #9
 8000c5c:	4323      	orrs	r3, r4
 8000c5e:	0b3f      	lsrs	r7, r7, #12
 8000c60:	0d4a      	lsrs	r2, r1, #21
 8000c62:	0512      	lsls	r2, r2, #20
 8000c64:	433a      	orrs	r2, r7
 8000c66:	07ed      	lsls	r5, r5, #31
 8000c68:	432a      	orrs	r2, r5
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	0011      	movs	r1, r2
 8000c6e:	bce0      	pop	{r5, r6, r7}
 8000c70:	46ba      	mov	sl, r7
 8000c72:	46b1      	mov	r9, r6
 8000c74:	46a8      	mov	r8, r5
 8000c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d04b      	beq.n	8000d14 <__aeabi_dadd+0x1e0>
 8000c7c:	464c      	mov	r4, r9
 8000c7e:	1ba4      	subs	r4, r4, r6
 8000c80:	46a4      	mov	ip, r4
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d000      	beq.n	8000c88 <__aeabi_dadd+0x154>
 8000c86:	e123      	b.n	8000ed0 <__aeabi_dadd+0x39c>
 8000c88:	0004      	movs	r4, r0
 8000c8a:	431c      	orrs	r4, r3
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_dadd+0x15c>
 8000c8e:	e1af      	b.n	8000ff0 <__aeabi_dadd+0x4bc>
 8000c90:	4662      	mov	r2, ip
 8000c92:	1e54      	subs	r4, r2, #1
 8000c94:	2a01      	cmp	r2, #1
 8000c96:	d100      	bne.n	8000c9a <__aeabi_dadd+0x166>
 8000c98:	e215      	b.n	80010c6 <__aeabi_dadd+0x592>
 8000c9a:	4d80      	ldr	r5, [pc, #512]	; (8000e9c <__aeabi_dadd+0x368>)
 8000c9c:	45ac      	cmp	ip, r5
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_dadd+0x16e>
 8000ca0:	e1c8      	b.n	8001034 <__aeabi_dadd+0x500>
 8000ca2:	46a4      	mov	ip, r4
 8000ca4:	e11b      	b.n	8000ede <__aeabi_dadd+0x3aa>
 8000ca6:	464a      	mov	r2, r9
 8000ca8:	1ab2      	subs	r2, r6, r2
 8000caa:	4694      	mov	ip, r2
 8000cac:	2a00      	cmp	r2, #0
 8000cae:	dc00      	bgt.n	8000cb2 <__aeabi_dadd+0x17e>
 8000cb0:	e0ac      	b.n	8000e0c <__aeabi_dadd+0x2d8>
 8000cb2:	464a      	mov	r2, r9
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	d043      	beq.n	8000d40 <__aeabi_dadd+0x20c>
 8000cb8:	4a78      	ldr	r2, [pc, #480]	; (8000e9c <__aeabi_dadd+0x368>)
 8000cba:	4296      	cmp	r6, r2
 8000cbc:	d100      	bne.n	8000cc0 <__aeabi_dadd+0x18c>
 8000cbe:	e1af      	b.n	8001020 <__aeabi_dadd+0x4ec>
 8000cc0:	2280      	movs	r2, #128	; 0x80
 8000cc2:	003c      	movs	r4, r7
 8000cc4:	0412      	lsls	r2, r2, #16
 8000cc6:	4314      	orrs	r4, r2
 8000cc8:	46a0      	mov	r8, r4
 8000cca:	4662      	mov	r2, ip
 8000ccc:	2a38      	cmp	r2, #56	; 0x38
 8000cce:	dc67      	bgt.n	8000da0 <__aeabi_dadd+0x26c>
 8000cd0:	2a1f      	cmp	r2, #31
 8000cd2:	dc00      	bgt.n	8000cd6 <__aeabi_dadd+0x1a2>
 8000cd4:	e15f      	b.n	8000f96 <__aeabi_dadd+0x462>
 8000cd6:	4647      	mov	r7, r8
 8000cd8:	3a20      	subs	r2, #32
 8000cda:	40d7      	lsrs	r7, r2
 8000cdc:	4662      	mov	r2, ip
 8000cde:	2a20      	cmp	r2, #32
 8000ce0:	d005      	beq.n	8000cee <__aeabi_dadd+0x1ba>
 8000ce2:	4664      	mov	r4, ip
 8000ce4:	2240      	movs	r2, #64	; 0x40
 8000ce6:	1b12      	subs	r2, r2, r4
 8000ce8:	4644      	mov	r4, r8
 8000cea:	4094      	lsls	r4, r2
 8000cec:	4321      	orrs	r1, r4
 8000cee:	1e4a      	subs	r2, r1, #1
 8000cf0:	4191      	sbcs	r1, r2
 8000cf2:	000c      	movs	r4, r1
 8000cf4:	433c      	orrs	r4, r7
 8000cf6:	e057      	b.n	8000da8 <__aeabi_dadd+0x274>
 8000cf8:	003a      	movs	r2, r7
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	d100      	bne.n	8000d00 <__aeabi_dadd+0x1cc>
 8000cfe:	e105      	b.n	8000f0c <__aeabi_dadd+0x3d8>
 8000d00:	0022      	movs	r2, r4
 8000d02:	3a01      	subs	r2, #1
 8000d04:	2c01      	cmp	r4, #1
 8000d06:	d100      	bne.n	8000d0a <__aeabi_dadd+0x1d6>
 8000d08:	e182      	b.n	8001010 <__aeabi_dadd+0x4dc>
 8000d0a:	4c64      	ldr	r4, [pc, #400]	; (8000e9c <__aeabi_dadd+0x368>)
 8000d0c:	45a4      	cmp	ip, r4
 8000d0e:	d05b      	beq.n	8000dc8 <__aeabi_dadd+0x294>
 8000d10:	4694      	mov	ip, r2
 8000d12:	e741      	b.n	8000b98 <__aeabi_dadd+0x64>
 8000d14:	4c63      	ldr	r4, [pc, #396]	; (8000ea4 <__aeabi_dadd+0x370>)
 8000d16:	1c77      	adds	r7, r6, #1
 8000d18:	4227      	tst	r7, r4
 8000d1a:	d000      	beq.n	8000d1e <__aeabi_dadd+0x1ea>
 8000d1c:	e0c4      	b.n	8000ea8 <__aeabi_dadd+0x374>
 8000d1e:	0004      	movs	r4, r0
 8000d20:	431c      	orrs	r4, r3
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	d000      	beq.n	8000d28 <__aeabi_dadd+0x1f4>
 8000d26:	e169      	b.n	8000ffc <__aeabi_dadd+0x4c8>
 8000d28:	2c00      	cmp	r4, #0
 8000d2a:	d100      	bne.n	8000d2e <__aeabi_dadd+0x1fa>
 8000d2c:	e1bf      	b.n	80010ae <__aeabi_dadd+0x57a>
 8000d2e:	4644      	mov	r4, r8
 8000d30:	430c      	orrs	r4, r1
 8000d32:	d000      	beq.n	8000d36 <__aeabi_dadd+0x202>
 8000d34:	e1d0      	b.n	80010d8 <__aeabi_dadd+0x5a4>
 8000d36:	0742      	lsls	r2, r0, #29
 8000d38:	08db      	lsrs	r3, r3, #3
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	08c0      	lsrs	r0, r0, #3
 8000d3e:	e029      	b.n	8000d94 <__aeabi_dadd+0x260>
 8000d40:	003a      	movs	r2, r7
 8000d42:	430a      	orrs	r2, r1
 8000d44:	d100      	bne.n	8000d48 <__aeabi_dadd+0x214>
 8000d46:	e170      	b.n	800102a <__aeabi_dadd+0x4f6>
 8000d48:	4662      	mov	r2, ip
 8000d4a:	4664      	mov	r4, ip
 8000d4c:	3a01      	subs	r2, #1
 8000d4e:	2c01      	cmp	r4, #1
 8000d50:	d100      	bne.n	8000d54 <__aeabi_dadd+0x220>
 8000d52:	e0e0      	b.n	8000f16 <__aeabi_dadd+0x3e2>
 8000d54:	4c51      	ldr	r4, [pc, #324]	; (8000e9c <__aeabi_dadd+0x368>)
 8000d56:	45a4      	cmp	ip, r4
 8000d58:	d100      	bne.n	8000d5c <__aeabi_dadd+0x228>
 8000d5a:	e161      	b.n	8001020 <__aeabi_dadd+0x4ec>
 8000d5c:	4694      	mov	ip, r2
 8000d5e:	e7b4      	b.n	8000cca <__aeabi_dadd+0x196>
 8000d60:	003a      	movs	r2, r7
 8000d62:	391f      	subs	r1, #31
 8000d64:	40ca      	lsrs	r2, r1
 8000d66:	0011      	movs	r1, r2
 8000d68:	2b20      	cmp	r3, #32
 8000d6a:	d003      	beq.n	8000d74 <__aeabi_dadd+0x240>
 8000d6c:	2240      	movs	r2, #64	; 0x40
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	409f      	lsls	r7, r3
 8000d72:	433c      	orrs	r4, r7
 8000d74:	1e63      	subs	r3, r4, #1
 8000d76:	419c      	sbcs	r4, r3
 8000d78:	2700      	movs	r7, #0
 8000d7a:	2600      	movs	r6, #0
 8000d7c:	430c      	orrs	r4, r1
 8000d7e:	0763      	lsls	r3, r4, #29
 8000d80:	d000      	beq.n	8000d84 <__aeabi_dadd+0x250>
 8000d82:	e753      	b.n	8000c2c <__aeabi_dadd+0xf8>
 8000d84:	46b4      	mov	ip, r6
 8000d86:	08e4      	lsrs	r4, r4, #3
 8000d88:	077b      	lsls	r3, r7, #29
 8000d8a:	4323      	orrs	r3, r4
 8000d8c:	08f8      	lsrs	r0, r7, #3
 8000d8e:	4a43      	ldr	r2, [pc, #268]	; (8000e9c <__aeabi_dadd+0x368>)
 8000d90:	4594      	cmp	ip, r2
 8000d92:	d01d      	beq.n	8000dd0 <__aeabi_dadd+0x29c>
 8000d94:	4662      	mov	r2, ip
 8000d96:	0307      	lsls	r7, r0, #12
 8000d98:	0552      	lsls	r2, r2, #21
 8000d9a:	0b3f      	lsrs	r7, r7, #12
 8000d9c:	0d52      	lsrs	r2, r2, #21
 8000d9e:	e760      	b.n	8000c62 <__aeabi_dadd+0x12e>
 8000da0:	4644      	mov	r4, r8
 8000da2:	430c      	orrs	r4, r1
 8000da4:	1e62      	subs	r2, r4, #1
 8000da6:	4194      	sbcs	r4, r2
 8000da8:	18e4      	adds	r4, r4, r3
 8000daa:	429c      	cmp	r4, r3
 8000dac:	419b      	sbcs	r3, r3
 8000dae:	425f      	negs	r7, r3
 8000db0:	183f      	adds	r7, r7, r0
 8000db2:	023b      	lsls	r3, r7, #8
 8000db4:	d5e3      	bpl.n	8000d7e <__aeabi_dadd+0x24a>
 8000db6:	4b39      	ldr	r3, [pc, #228]	; (8000e9c <__aeabi_dadd+0x368>)
 8000db8:	3601      	adds	r6, #1
 8000dba:	429e      	cmp	r6, r3
 8000dbc:	d000      	beq.n	8000dc0 <__aeabi_dadd+0x28c>
 8000dbe:	e0b5      	b.n	8000f2c <__aeabi_dadd+0x3f8>
 8000dc0:	0032      	movs	r2, r6
 8000dc2:	2700      	movs	r7, #0
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	e74c      	b.n	8000c62 <__aeabi_dadd+0x12e>
 8000dc8:	0742      	lsls	r2, r0, #29
 8000dca:	08db      	lsrs	r3, r3, #3
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	08c0      	lsrs	r0, r0, #3
 8000dd0:	001a      	movs	r2, r3
 8000dd2:	4302      	orrs	r2, r0
 8000dd4:	d100      	bne.n	8000dd8 <__aeabi_dadd+0x2a4>
 8000dd6:	e1e1      	b.n	800119c <__aeabi_dadd+0x668>
 8000dd8:	2780      	movs	r7, #128	; 0x80
 8000dda:	033f      	lsls	r7, r7, #12
 8000ddc:	4307      	orrs	r7, r0
 8000dde:	033f      	lsls	r7, r7, #12
 8000de0:	4a2e      	ldr	r2, [pc, #184]	; (8000e9c <__aeabi_dadd+0x368>)
 8000de2:	0b3f      	lsrs	r7, r7, #12
 8000de4:	e73d      	b.n	8000c62 <__aeabi_dadd+0x12e>
 8000de6:	0020      	movs	r0, r4
 8000de8:	f001 fd5a 	bl	80028a0 <__clzsi2>
 8000dec:	0001      	movs	r1, r0
 8000dee:	3118      	adds	r1, #24
 8000df0:	291f      	cmp	r1, #31
 8000df2:	dc00      	bgt.n	8000df6 <__aeabi_dadd+0x2c2>
 8000df4:	e6fc      	b.n	8000bf0 <__aeabi_dadd+0xbc>
 8000df6:	3808      	subs	r0, #8
 8000df8:	4084      	lsls	r4, r0
 8000dfa:	0027      	movs	r7, r4
 8000dfc:	2400      	movs	r4, #0
 8000dfe:	42b1      	cmp	r1, r6
 8000e00:	db00      	blt.n	8000e04 <__aeabi_dadd+0x2d0>
 8000e02:	e6ff      	b.n	8000c04 <__aeabi_dadd+0xd0>
 8000e04:	4a26      	ldr	r2, [pc, #152]	; (8000ea0 <__aeabi_dadd+0x36c>)
 8000e06:	1a76      	subs	r6, r6, r1
 8000e08:	4017      	ands	r7, r2
 8000e0a:	e70d      	b.n	8000c28 <__aeabi_dadd+0xf4>
 8000e0c:	2a00      	cmp	r2, #0
 8000e0e:	d02f      	beq.n	8000e70 <__aeabi_dadd+0x33c>
 8000e10:	464a      	mov	r2, r9
 8000e12:	1b92      	subs	r2, r2, r6
 8000e14:	4694      	mov	ip, r2
 8000e16:	2e00      	cmp	r6, #0
 8000e18:	d100      	bne.n	8000e1c <__aeabi_dadd+0x2e8>
 8000e1a:	e0ad      	b.n	8000f78 <__aeabi_dadd+0x444>
 8000e1c:	4a1f      	ldr	r2, [pc, #124]	; (8000e9c <__aeabi_dadd+0x368>)
 8000e1e:	4591      	cmp	r9, r2
 8000e20:	d100      	bne.n	8000e24 <__aeabi_dadd+0x2f0>
 8000e22:	e10f      	b.n	8001044 <__aeabi_dadd+0x510>
 8000e24:	2280      	movs	r2, #128	; 0x80
 8000e26:	0412      	lsls	r2, r2, #16
 8000e28:	4310      	orrs	r0, r2
 8000e2a:	4662      	mov	r2, ip
 8000e2c:	2a38      	cmp	r2, #56	; 0x38
 8000e2e:	dd00      	ble.n	8000e32 <__aeabi_dadd+0x2fe>
 8000e30:	e10f      	b.n	8001052 <__aeabi_dadd+0x51e>
 8000e32:	2a1f      	cmp	r2, #31
 8000e34:	dd00      	ble.n	8000e38 <__aeabi_dadd+0x304>
 8000e36:	e180      	b.n	800113a <__aeabi_dadd+0x606>
 8000e38:	4664      	mov	r4, ip
 8000e3a:	2220      	movs	r2, #32
 8000e3c:	001e      	movs	r6, r3
 8000e3e:	1b12      	subs	r2, r2, r4
 8000e40:	4667      	mov	r7, ip
 8000e42:	0004      	movs	r4, r0
 8000e44:	4093      	lsls	r3, r2
 8000e46:	4094      	lsls	r4, r2
 8000e48:	40fe      	lsrs	r6, r7
 8000e4a:	1e5a      	subs	r2, r3, #1
 8000e4c:	4193      	sbcs	r3, r2
 8000e4e:	40f8      	lsrs	r0, r7
 8000e50:	4334      	orrs	r4, r6
 8000e52:	431c      	orrs	r4, r3
 8000e54:	4480      	add	r8, r0
 8000e56:	1864      	adds	r4, r4, r1
 8000e58:	428c      	cmp	r4, r1
 8000e5a:	41bf      	sbcs	r7, r7
 8000e5c:	427f      	negs	r7, r7
 8000e5e:	464e      	mov	r6, r9
 8000e60:	4447      	add	r7, r8
 8000e62:	e7a6      	b.n	8000db2 <__aeabi_dadd+0x27e>
 8000e64:	4642      	mov	r2, r8
 8000e66:	430a      	orrs	r2, r1
 8000e68:	0011      	movs	r1, r2
 8000e6a:	1e4a      	subs	r2, r1, #1
 8000e6c:	4191      	sbcs	r1, r2
 8000e6e:	e6ad      	b.n	8000bcc <__aeabi_dadd+0x98>
 8000e70:	4c0c      	ldr	r4, [pc, #48]	; (8000ea4 <__aeabi_dadd+0x370>)
 8000e72:	1c72      	adds	r2, r6, #1
 8000e74:	4222      	tst	r2, r4
 8000e76:	d000      	beq.n	8000e7a <__aeabi_dadd+0x346>
 8000e78:	e0a1      	b.n	8000fbe <__aeabi_dadd+0x48a>
 8000e7a:	0002      	movs	r2, r0
 8000e7c:	431a      	orrs	r2, r3
 8000e7e:	2e00      	cmp	r6, #0
 8000e80:	d000      	beq.n	8000e84 <__aeabi_dadd+0x350>
 8000e82:	e0fa      	b.n	800107a <__aeabi_dadd+0x546>
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	d100      	bne.n	8000e8a <__aeabi_dadd+0x356>
 8000e88:	e145      	b.n	8001116 <__aeabi_dadd+0x5e2>
 8000e8a:	003a      	movs	r2, r7
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	d000      	beq.n	8000e92 <__aeabi_dadd+0x35e>
 8000e90:	e146      	b.n	8001120 <__aeabi_dadd+0x5ec>
 8000e92:	0742      	lsls	r2, r0, #29
 8000e94:	08db      	lsrs	r3, r3, #3
 8000e96:	4313      	orrs	r3, r2
 8000e98:	08c0      	lsrs	r0, r0, #3
 8000e9a:	e77b      	b.n	8000d94 <__aeabi_dadd+0x260>
 8000e9c:	000007ff 	.word	0x000007ff
 8000ea0:	ff7fffff 	.word	0xff7fffff
 8000ea4:	000007fe 	.word	0x000007fe
 8000ea8:	4647      	mov	r7, r8
 8000eaa:	1a5c      	subs	r4, r3, r1
 8000eac:	1bc2      	subs	r2, r0, r7
 8000eae:	42a3      	cmp	r3, r4
 8000eb0:	41bf      	sbcs	r7, r7
 8000eb2:	427f      	negs	r7, r7
 8000eb4:	46b9      	mov	r9, r7
 8000eb6:	0017      	movs	r7, r2
 8000eb8:	464a      	mov	r2, r9
 8000eba:	1abf      	subs	r7, r7, r2
 8000ebc:	023a      	lsls	r2, r7, #8
 8000ebe:	d500      	bpl.n	8000ec2 <__aeabi_dadd+0x38e>
 8000ec0:	e08d      	b.n	8000fde <__aeabi_dadd+0x4aa>
 8000ec2:	0023      	movs	r3, r4
 8000ec4:	433b      	orrs	r3, r7
 8000ec6:	d000      	beq.n	8000eca <__aeabi_dadd+0x396>
 8000ec8:	e68a      	b.n	8000be0 <__aeabi_dadd+0xac>
 8000eca:	2000      	movs	r0, #0
 8000ecc:	2500      	movs	r5, #0
 8000ece:	e761      	b.n	8000d94 <__aeabi_dadd+0x260>
 8000ed0:	4cb4      	ldr	r4, [pc, #720]	; (80011a4 <__aeabi_dadd+0x670>)
 8000ed2:	45a1      	cmp	r9, r4
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_dadd+0x3a4>
 8000ed6:	e0ad      	b.n	8001034 <__aeabi_dadd+0x500>
 8000ed8:	2480      	movs	r4, #128	; 0x80
 8000eda:	0424      	lsls	r4, r4, #16
 8000edc:	4320      	orrs	r0, r4
 8000ede:	4664      	mov	r4, ip
 8000ee0:	2c38      	cmp	r4, #56	; 0x38
 8000ee2:	dc3d      	bgt.n	8000f60 <__aeabi_dadd+0x42c>
 8000ee4:	4662      	mov	r2, ip
 8000ee6:	2c1f      	cmp	r4, #31
 8000ee8:	dd00      	ble.n	8000eec <__aeabi_dadd+0x3b8>
 8000eea:	e0b7      	b.n	800105c <__aeabi_dadd+0x528>
 8000eec:	2520      	movs	r5, #32
 8000eee:	001e      	movs	r6, r3
 8000ef0:	1b2d      	subs	r5, r5, r4
 8000ef2:	0004      	movs	r4, r0
 8000ef4:	40ab      	lsls	r3, r5
 8000ef6:	40ac      	lsls	r4, r5
 8000ef8:	40d6      	lsrs	r6, r2
 8000efa:	40d0      	lsrs	r0, r2
 8000efc:	4642      	mov	r2, r8
 8000efe:	1e5d      	subs	r5, r3, #1
 8000f00:	41ab      	sbcs	r3, r5
 8000f02:	4334      	orrs	r4, r6
 8000f04:	1a12      	subs	r2, r2, r0
 8000f06:	4690      	mov	r8, r2
 8000f08:	4323      	orrs	r3, r4
 8000f0a:	e02c      	b.n	8000f66 <__aeabi_dadd+0x432>
 8000f0c:	0742      	lsls	r2, r0, #29
 8000f0e:	08db      	lsrs	r3, r3, #3
 8000f10:	4313      	orrs	r3, r2
 8000f12:	08c0      	lsrs	r0, r0, #3
 8000f14:	e73b      	b.n	8000d8e <__aeabi_dadd+0x25a>
 8000f16:	185c      	adds	r4, r3, r1
 8000f18:	429c      	cmp	r4, r3
 8000f1a:	419b      	sbcs	r3, r3
 8000f1c:	4440      	add	r0, r8
 8000f1e:	425b      	negs	r3, r3
 8000f20:	18c7      	adds	r7, r0, r3
 8000f22:	2601      	movs	r6, #1
 8000f24:	023b      	lsls	r3, r7, #8
 8000f26:	d400      	bmi.n	8000f2a <__aeabi_dadd+0x3f6>
 8000f28:	e729      	b.n	8000d7e <__aeabi_dadd+0x24a>
 8000f2a:	2602      	movs	r6, #2
 8000f2c:	4a9e      	ldr	r2, [pc, #632]	; (80011a8 <__aeabi_dadd+0x674>)
 8000f2e:	0863      	lsrs	r3, r4, #1
 8000f30:	4017      	ands	r7, r2
 8000f32:	2201      	movs	r2, #1
 8000f34:	4014      	ands	r4, r2
 8000f36:	431c      	orrs	r4, r3
 8000f38:	07fb      	lsls	r3, r7, #31
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	087f      	lsrs	r7, r7, #1
 8000f3e:	e673      	b.n	8000c28 <__aeabi_dadd+0xf4>
 8000f40:	4644      	mov	r4, r8
 8000f42:	3a20      	subs	r2, #32
 8000f44:	40d4      	lsrs	r4, r2
 8000f46:	4662      	mov	r2, ip
 8000f48:	2a20      	cmp	r2, #32
 8000f4a:	d005      	beq.n	8000f58 <__aeabi_dadd+0x424>
 8000f4c:	4667      	mov	r7, ip
 8000f4e:	2240      	movs	r2, #64	; 0x40
 8000f50:	1bd2      	subs	r2, r2, r7
 8000f52:	4647      	mov	r7, r8
 8000f54:	4097      	lsls	r7, r2
 8000f56:	4339      	orrs	r1, r7
 8000f58:	1e4a      	subs	r2, r1, #1
 8000f5a:	4191      	sbcs	r1, r2
 8000f5c:	4321      	orrs	r1, r4
 8000f5e:	e635      	b.n	8000bcc <__aeabi_dadd+0x98>
 8000f60:	4303      	orrs	r3, r0
 8000f62:	1e58      	subs	r0, r3, #1
 8000f64:	4183      	sbcs	r3, r0
 8000f66:	1acc      	subs	r4, r1, r3
 8000f68:	42a1      	cmp	r1, r4
 8000f6a:	41bf      	sbcs	r7, r7
 8000f6c:	4643      	mov	r3, r8
 8000f6e:	427f      	negs	r7, r7
 8000f70:	4655      	mov	r5, sl
 8000f72:	464e      	mov	r6, r9
 8000f74:	1bdf      	subs	r7, r3, r7
 8000f76:	e62e      	b.n	8000bd6 <__aeabi_dadd+0xa2>
 8000f78:	0002      	movs	r2, r0
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_dadd+0x44c>
 8000f7e:	e0bd      	b.n	80010fc <__aeabi_dadd+0x5c8>
 8000f80:	4662      	mov	r2, ip
 8000f82:	4664      	mov	r4, ip
 8000f84:	3a01      	subs	r2, #1
 8000f86:	2c01      	cmp	r4, #1
 8000f88:	d100      	bne.n	8000f8c <__aeabi_dadd+0x458>
 8000f8a:	e0e5      	b.n	8001158 <__aeabi_dadd+0x624>
 8000f8c:	4c85      	ldr	r4, [pc, #532]	; (80011a4 <__aeabi_dadd+0x670>)
 8000f8e:	45a4      	cmp	ip, r4
 8000f90:	d058      	beq.n	8001044 <__aeabi_dadd+0x510>
 8000f92:	4694      	mov	ip, r2
 8000f94:	e749      	b.n	8000e2a <__aeabi_dadd+0x2f6>
 8000f96:	4664      	mov	r4, ip
 8000f98:	2220      	movs	r2, #32
 8000f9a:	1b12      	subs	r2, r2, r4
 8000f9c:	4644      	mov	r4, r8
 8000f9e:	4094      	lsls	r4, r2
 8000fa0:	000f      	movs	r7, r1
 8000fa2:	46a1      	mov	r9, r4
 8000fa4:	4664      	mov	r4, ip
 8000fa6:	4091      	lsls	r1, r2
 8000fa8:	40e7      	lsrs	r7, r4
 8000faa:	464c      	mov	r4, r9
 8000fac:	1e4a      	subs	r2, r1, #1
 8000fae:	4191      	sbcs	r1, r2
 8000fb0:	433c      	orrs	r4, r7
 8000fb2:	4642      	mov	r2, r8
 8000fb4:	430c      	orrs	r4, r1
 8000fb6:	4661      	mov	r1, ip
 8000fb8:	40ca      	lsrs	r2, r1
 8000fba:	1880      	adds	r0, r0, r2
 8000fbc:	e6f4      	b.n	8000da8 <__aeabi_dadd+0x274>
 8000fbe:	4c79      	ldr	r4, [pc, #484]	; (80011a4 <__aeabi_dadd+0x670>)
 8000fc0:	42a2      	cmp	r2, r4
 8000fc2:	d100      	bne.n	8000fc6 <__aeabi_dadd+0x492>
 8000fc4:	e6fd      	b.n	8000dc2 <__aeabi_dadd+0x28e>
 8000fc6:	1859      	adds	r1, r3, r1
 8000fc8:	4299      	cmp	r1, r3
 8000fca:	419b      	sbcs	r3, r3
 8000fcc:	4440      	add	r0, r8
 8000fce:	425f      	negs	r7, r3
 8000fd0:	19c7      	adds	r7, r0, r7
 8000fd2:	07fc      	lsls	r4, r7, #31
 8000fd4:	0849      	lsrs	r1, r1, #1
 8000fd6:	0016      	movs	r6, r2
 8000fd8:	430c      	orrs	r4, r1
 8000fda:	087f      	lsrs	r7, r7, #1
 8000fdc:	e6cf      	b.n	8000d7e <__aeabi_dadd+0x24a>
 8000fde:	1acc      	subs	r4, r1, r3
 8000fe0:	42a1      	cmp	r1, r4
 8000fe2:	41bf      	sbcs	r7, r7
 8000fe4:	4643      	mov	r3, r8
 8000fe6:	427f      	negs	r7, r7
 8000fe8:	1a18      	subs	r0, r3, r0
 8000fea:	4655      	mov	r5, sl
 8000fec:	1bc7      	subs	r7, r0, r7
 8000fee:	e5f7      	b.n	8000be0 <__aeabi_dadd+0xac>
 8000ff0:	08c9      	lsrs	r1, r1, #3
 8000ff2:	077b      	lsls	r3, r7, #29
 8000ff4:	4655      	mov	r5, sl
 8000ff6:	430b      	orrs	r3, r1
 8000ff8:	08f8      	lsrs	r0, r7, #3
 8000ffa:	e6c8      	b.n	8000d8e <__aeabi_dadd+0x25a>
 8000ffc:	2c00      	cmp	r4, #0
 8000ffe:	d000      	beq.n	8001002 <__aeabi_dadd+0x4ce>
 8001000:	e081      	b.n	8001106 <__aeabi_dadd+0x5d2>
 8001002:	4643      	mov	r3, r8
 8001004:	430b      	orrs	r3, r1
 8001006:	d115      	bne.n	8001034 <__aeabi_dadd+0x500>
 8001008:	2080      	movs	r0, #128	; 0x80
 800100a:	2500      	movs	r5, #0
 800100c:	0300      	lsls	r0, r0, #12
 800100e:	e6e3      	b.n	8000dd8 <__aeabi_dadd+0x2a4>
 8001010:	1a5c      	subs	r4, r3, r1
 8001012:	42a3      	cmp	r3, r4
 8001014:	419b      	sbcs	r3, r3
 8001016:	1bc7      	subs	r7, r0, r7
 8001018:	425b      	negs	r3, r3
 800101a:	2601      	movs	r6, #1
 800101c:	1aff      	subs	r7, r7, r3
 800101e:	e5da      	b.n	8000bd6 <__aeabi_dadd+0xa2>
 8001020:	0742      	lsls	r2, r0, #29
 8001022:	08db      	lsrs	r3, r3, #3
 8001024:	4313      	orrs	r3, r2
 8001026:	08c0      	lsrs	r0, r0, #3
 8001028:	e6d2      	b.n	8000dd0 <__aeabi_dadd+0x29c>
 800102a:	0742      	lsls	r2, r0, #29
 800102c:	08db      	lsrs	r3, r3, #3
 800102e:	4313      	orrs	r3, r2
 8001030:	08c0      	lsrs	r0, r0, #3
 8001032:	e6ac      	b.n	8000d8e <__aeabi_dadd+0x25a>
 8001034:	4643      	mov	r3, r8
 8001036:	4642      	mov	r2, r8
 8001038:	08c9      	lsrs	r1, r1, #3
 800103a:	075b      	lsls	r3, r3, #29
 800103c:	4655      	mov	r5, sl
 800103e:	430b      	orrs	r3, r1
 8001040:	08d0      	lsrs	r0, r2, #3
 8001042:	e6c5      	b.n	8000dd0 <__aeabi_dadd+0x29c>
 8001044:	4643      	mov	r3, r8
 8001046:	4642      	mov	r2, r8
 8001048:	075b      	lsls	r3, r3, #29
 800104a:	08c9      	lsrs	r1, r1, #3
 800104c:	430b      	orrs	r3, r1
 800104e:	08d0      	lsrs	r0, r2, #3
 8001050:	e6be      	b.n	8000dd0 <__aeabi_dadd+0x29c>
 8001052:	4303      	orrs	r3, r0
 8001054:	001c      	movs	r4, r3
 8001056:	1e63      	subs	r3, r4, #1
 8001058:	419c      	sbcs	r4, r3
 800105a:	e6fc      	b.n	8000e56 <__aeabi_dadd+0x322>
 800105c:	0002      	movs	r2, r0
 800105e:	3c20      	subs	r4, #32
 8001060:	40e2      	lsrs	r2, r4
 8001062:	0014      	movs	r4, r2
 8001064:	4662      	mov	r2, ip
 8001066:	2a20      	cmp	r2, #32
 8001068:	d003      	beq.n	8001072 <__aeabi_dadd+0x53e>
 800106a:	2540      	movs	r5, #64	; 0x40
 800106c:	1aad      	subs	r5, r5, r2
 800106e:	40a8      	lsls	r0, r5
 8001070:	4303      	orrs	r3, r0
 8001072:	1e58      	subs	r0, r3, #1
 8001074:	4183      	sbcs	r3, r0
 8001076:	4323      	orrs	r3, r4
 8001078:	e775      	b.n	8000f66 <__aeabi_dadd+0x432>
 800107a:	2a00      	cmp	r2, #0
 800107c:	d0e2      	beq.n	8001044 <__aeabi_dadd+0x510>
 800107e:	003a      	movs	r2, r7
 8001080:	430a      	orrs	r2, r1
 8001082:	d0cd      	beq.n	8001020 <__aeabi_dadd+0x4ec>
 8001084:	0742      	lsls	r2, r0, #29
 8001086:	08db      	lsrs	r3, r3, #3
 8001088:	4313      	orrs	r3, r2
 800108a:	2280      	movs	r2, #128	; 0x80
 800108c:	08c0      	lsrs	r0, r0, #3
 800108e:	0312      	lsls	r2, r2, #12
 8001090:	4210      	tst	r0, r2
 8001092:	d006      	beq.n	80010a2 <__aeabi_dadd+0x56e>
 8001094:	08fc      	lsrs	r4, r7, #3
 8001096:	4214      	tst	r4, r2
 8001098:	d103      	bne.n	80010a2 <__aeabi_dadd+0x56e>
 800109a:	0020      	movs	r0, r4
 800109c:	08cb      	lsrs	r3, r1, #3
 800109e:	077a      	lsls	r2, r7, #29
 80010a0:	4313      	orrs	r3, r2
 80010a2:	0f5a      	lsrs	r2, r3, #29
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	0752      	lsls	r2, r2, #29
 80010a8:	08db      	lsrs	r3, r3, #3
 80010aa:	4313      	orrs	r3, r2
 80010ac:	e690      	b.n	8000dd0 <__aeabi_dadd+0x29c>
 80010ae:	4643      	mov	r3, r8
 80010b0:	430b      	orrs	r3, r1
 80010b2:	d100      	bne.n	80010b6 <__aeabi_dadd+0x582>
 80010b4:	e709      	b.n	8000eca <__aeabi_dadd+0x396>
 80010b6:	4643      	mov	r3, r8
 80010b8:	4642      	mov	r2, r8
 80010ba:	08c9      	lsrs	r1, r1, #3
 80010bc:	075b      	lsls	r3, r3, #29
 80010be:	4655      	mov	r5, sl
 80010c0:	430b      	orrs	r3, r1
 80010c2:	08d0      	lsrs	r0, r2, #3
 80010c4:	e666      	b.n	8000d94 <__aeabi_dadd+0x260>
 80010c6:	1acc      	subs	r4, r1, r3
 80010c8:	42a1      	cmp	r1, r4
 80010ca:	4189      	sbcs	r1, r1
 80010cc:	1a3f      	subs	r7, r7, r0
 80010ce:	4249      	negs	r1, r1
 80010d0:	4655      	mov	r5, sl
 80010d2:	2601      	movs	r6, #1
 80010d4:	1a7f      	subs	r7, r7, r1
 80010d6:	e57e      	b.n	8000bd6 <__aeabi_dadd+0xa2>
 80010d8:	4642      	mov	r2, r8
 80010da:	1a5c      	subs	r4, r3, r1
 80010dc:	1a87      	subs	r7, r0, r2
 80010de:	42a3      	cmp	r3, r4
 80010e0:	4192      	sbcs	r2, r2
 80010e2:	4252      	negs	r2, r2
 80010e4:	1abf      	subs	r7, r7, r2
 80010e6:	023a      	lsls	r2, r7, #8
 80010e8:	d53d      	bpl.n	8001166 <__aeabi_dadd+0x632>
 80010ea:	1acc      	subs	r4, r1, r3
 80010ec:	42a1      	cmp	r1, r4
 80010ee:	4189      	sbcs	r1, r1
 80010f0:	4643      	mov	r3, r8
 80010f2:	4249      	negs	r1, r1
 80010f4:	1a1f      	subs	r7, r3, r0
 80010f6:	4655      	mov	r5, sl
 80010f8:	1a7f      	subs	r7, r7, r1
 80010fa:	e595      	b.n	8000c28 <__aeabi_dadd+0xf4>
 80010fc:	077b      	lsls	r3, r7, #29
 80010fe:	08c9      	lsrs	r1, r1, #3
 8001100:	430b      	orrs	r3, r1
 8001102:	08f8      	lsrs	r0, r7, #3
 8001104:	e643      	b.n	8000d8e <__aeabi_dadd+0x25a>
 8001106:	4644      	mov	r4, r8
 8001108:	08db      	lsrs	r3, r3, #3
 800110a:	430c      	orrs	r4, r1
 800110c:	d130      	bne.n	8001170 <__aeabi_dadd+0x63c>
 800110e:	0742      	lsls	r2, r0, #29
 8001110:	4313      	orrs	r3, r2
 8001112:	08c0      	lsrs	r0, r0, #3
 8001114:	e65c      	b.n	8000dd0 <__aeabi_dadd+0x29c>
 8001116:	077b      	lsls	r3, r7, #29
 8001118:	08c9      	lsrs	r1, r1, #3
 800111a:	430b      	orrs	r3, r1
 800111c:	08f8      	lsrs	r0, r7, #3
 800111e:	e639      	b.n	8000d94 <__aeabi_dadd+0x260>
 8001120:	185c      	adds	r4, r3, r1
 8001122:	429c      	cmp	r4, r3
 8001124:	419b      	sbcs	r3, r3
 8001126:	4440      	add	r0, r8
 8001128:	425b      	negs	r3, r3
 800112a:	18c7      	adds	r7, r0, r3
 800112c:	023b      	lsls	r3, r7, #8
 800112e:	d400      	bmi.n	8001132 <__aeabi_dadd+0x5fe>
 8001130:	e625      	b.n	8000d7e <__aeabi_dadd+0x24a>
 8001132:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <__aeabi_dadd+0x674>)
 8001134:	2601      	movs	r6, #1
 8001136:	401f      	ands	r7, r3
 8001138:	e621      	b.n	8000d7e <__aeabi_dadd+0x24a>
 800113a:	0004      	movs	r4, r0
 800113c:	3a20      	subs	r2, #32
 800113e:	40d4      	lsrs	r4, r2
 8001140:	4662      	mov	r2, ip
 8001142:	2a20      	cmp	r2, #32
 8001144:	d004      	beq.n	8001150 <__aeabi_dadd+0x61c>
 8001146:	2240      	movs	r2, #64	; 0x40
 8001148:	4666      	mov	r6, ip
 800114a:	1b92      	subs	r2, r2, r6
 800114c:	4090      	lsls	r0, r2
 800114e:	4303      	orrs	r3, r0
 8001150:	1e5a      	subs	r2, r3, #1
 8001152:	4193      	sbcs	r3, r2
 8001154:	431c      	orrs	r4, r3
 8001156:	e67e      	b.n	8000e56 <__aeabi_dadd+0x322>
 8001158:	185c      	adds	r4, r3, r1
 800115a:	428c      	cmp	r4, r1
 800115c:	4189      	sbcs	r1, r1
 800115e:	4440      	add	r0, r8
 8001160:	4249      	negs	r1, r1
 8001162:	1847      	adds	r7, r0, r1
 8001164:	e6dd      	b.n	8000f22 <__aeabi_dadd+0x3ee>
 8001166:	0023      	movs	r3, r4
 8001168:	433b      	orrs	r3, r7
 800116a:	d100      	bne.n	800116e <__aeabi_dadd+0x63a>
 800116c:	e6ad      	b.n	8000eca <__aeabi_dadd+0x396>
 800116e:	e606      	b.n	8000d7e <__aeabi_dadd+0x24a>
 8001170:	0744      	lsls	r4, r0, #29
 8001172:	4323      	orrs	r3, r4
 8001174:	2480      	movs	r4, #128	; 0x80
 8001176:	08c0      	lsrs	r0, r0, #3
 8001178:	0324      	lsls	r4, r4, #12
 800117a:	4220      	tst	r0, r4
 800117c:	d008      	beq.n	8001190 <__aeabi_dadd+0x65c>
 800117e:	4642      	mov	r2, r8
 8001180:	08d6      	lsrs	r6, r2, #3
 8001182:	4226      	tst	r6, r4
 8001184:	d104      	bne.n	8001190 <__aeabi_dadd+0x65c>
 8001186:	4655      	mov	r5, sl
 8001188:	0030      	movs	r0, r6
 800118a:	08cb      	lsrs	r3, r1, #3
 800118c:	0751      	lsls	r1, r2, #29
 800118e:	430b      	orrs	r3, r1
 8001190:	0f5a      	lsrs	r2, r3, #29
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	08db      	lsrs	r3, r3, #3
 8001196:	0752      	lsls	r2, r2, #29
 8001198:	4313      	orrs	r3, r2
 800119a:	e619      	b.n	8000dd0 <__aeabi_dadd+0x29c>
 800119c:	2300      	movs	r3, #0
 800119e:	4a01      	ldr	r2, [pc, #4]	; (80011a4 <__aeabi_dadd+0x670>)
 80011a0:	001f      	movs	r7, r3
 80011a2:	e55e      	b.n	8000c62 <__aeabi_dadd+0x12e>
 80011a4:	000007ff 	.word	0x000007ff
 80011a8:	ff7fffff 	.word	0xff7fffff

080011ac <__aeabi_ddiv>:
 80011ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ae:	4657      	mov	r7, sl
 80011b0:	464e      	mov	r6, r9
 80011b2:	4645      	mov	r5, r8
 80011b4:	46de      	mov	lr, fp
 80011b6:	b5e0      	push	{r5, r6, r7, lr}
 80011b8:	4681      	mov	r9, r0
 80011ba:	0005      	movs	r5, r0
 80011bc:	030c      	lsls	r4, r1, #12
 80011be:	0048      	lsls	r0, r1, #1
 80011c0:	4692      	mov	sl, r2
 80011c2:	001f      	movs	r7, r3
 80011c4:	b085      	sub	sp, #20
 80011c6:	0b24      	lsrs	r4, r4, #12
 80011c8:	0d40      	lsrs	r0, r0, #21
 80011ca:	0fce      	lsrs	r6, r1, #31
 80011cc:	2800      	cmp	r0, #0
 80011ce:	d100      	bne.n	80011d2 <__aeabi_ddiv+0x26>
 80011d0:	e156      	b.n	8001480 <__aeabi_ddiv+0x2d4>
 80011d2:	4bd4      	ldr	r3, [pc, #848]	; (8001524 <__aeabi_ddiv+0x378>)
 80011d4:	4298      	cmp	r0, r3
 80011d6:	d100      	bne.n	80011da <__aeabi_ddiv+0x2e>
 80011d8:	e172      	b.n	80014c0 <__aeabi_ddiv+0x314>
 80011da:	0f6b      	lsrs	r3, r5, #29
 80011dc:	00e4      	lsls	r4, r4, #3
 80011de:	431c      	orrs	r4, r3
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	041b      	lsls	r3, r3, #16
 80011e4:	4323      	orrs	r3, r4
 80011e6:	4698      	mov	r8, r3
 80011e8:	4bcf      	ldr	r3, [pc, #828]	; (8001528 <__aeabi_ddiv+0x37c>)
 80011ea:	00ed      	lsls	r5, r5, #3
 80011ec:	469b      	mov	fp, r3
 80011ee:	2300      	movs	r3, #0
 80011f0:	4699      	mov	r9, r3
 80011f2:	4483      	add	fp, r0
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	033c      	lsls	r4, r7, #12
 80011f8:	007b      	lsls	r3, r7, #1
 80011fa:	4650      	mov	r0, sl
 80011fc:	0b24      	lsrs	r4, r4, #12
 80011fe:	0d5b      	lsrs	r3, r3, #21
 8001200:	0fff      	lsrs	r7, r7, #31
 8001202:	2b00      	cmp	r3, #0
 8001204:	d100      	bne.n	8001208 <__aeabi_ddiv+0x5c>
 8001206:	e11f      	b.n	8001448 <__aeabi_ddiv+0x29c>
 8001208:	4ac6      	ldr	r2, [pc, #792]	; (8001524 <__aeabi_ddiv+0x378>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d100      	bne.n	8001210 <__aeabi_ddiv+0x64>
 800120e:	e162      	b.n	80014d6 <__aeabi_ddiv+0x32a>
 8001210:	49c5      	ldr	r1, [pc, #788]	; (8001528 <__aeabi_ddiv+0x37c>)
 8001212:	0f42      	lsrs	r2, r0, #29
 8001214:	468c      	mov	ip, r1
 8001216:	00e4      	lsls	r4, r4, #3
 8001218:	4659      	mov	r1, fp
 800121a:	4314      	orrs	r4, r2
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	4463      	add	r3, ip
 8001220:	0412      	lsls	r2, r2, #16
 8001222:	1acb      	subs	r3, r1, r3
 8001224:	4314      	orrs	r4, r2
 8001226:	469b      	mov	fp, r3
 8001228:	00c2      	lsls	r2, r0, #3
 800122a:	2000      	movs	r0, #0
 800122c:	0033      	movs	r3, r6
 800122e:	407b      	eors	r3, r7
 8001230:	469a      	mov	sl, r3
 8001232:	464b      	mov	r3, r9
 8001234:	2b0f      	cmp	r3, #15
 8001236:	d827      	bhi.n	8001288 <__aeabi_ddiv+0xdc>
 8001238:	49bc      	ldr	r1, [pc, #752]	; (800152c <__aeabi_ddiv+0x380>)
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	58cb      	ldr	r3, [r1, r3]
 800123e:	469f      	mov	pc, r3
 8001240:	46b2      	mov	sl, r6
 8001242:	9b00      	ldr	r3, [sp, #0]
 8001244:	2b02      	cmp	r3, #2
 8001246:	d016      	beq.n	8001276 <__aeabi_ddiv+0xca>
 8001248:	2b03      	cmp	r3, #3
 800124a:	d100      	bne.n	800124e <__aeabi_ddiv+0xa2>
 800124c:	e28e      	b.n	800176c <__aeabi_ddiv+0x5c0>
 800124e:	2b01      	cmp	r3, #1
 8001250:	d000      	beq.n	8001254 <__aeabi_ddiv+0xa8>
 8001252:	e0d9      	b.n	8001408 <__aeabi_ddiv+0x25c>
 8001254:	2300      	movs	r3, #0
 8001256:	2400      	movs	r4, #0
 8001258:	2500      	movs	r5, #0
 800125a:	4652      	mov	r2, sl
 800125c:	051b      	lsls	r3, r3, #20
 800125e:	4323      	orrs	r3, r4
 8001260:	07d2      	lsls	r2, r2, #31
 8001262:	4313      	orrs	r3, r2
 8001264:	0028      	movs	r0, r5
 8001266:	0019      	movs	r1, r3
 8001268:	b005      	add	sp, #20
 800126a:	bcf0      	pop	{r4, r5, r6, r7}
 800126c:	46bb      	mov	fp, r7
 800126e:	46b2      	mov	sl, r6
 8001270:	46a9      	mov	r9, r5
 8001272:	46a0      	mov	r8, r4
 8001274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001276:	2400      	movs	r4, #0
 8001278:	2500      	movs	r5, #0
 800127a:	4baa      	ldr	r3, [pc, #680]	; (8001524 <__aeabi_ddiv+0x378>)
 800127c:	e7ed      	b.n	800125a <__aeabi_ddiv+0xae>
 800127e:	46ba      	mov	sl, r7
 8001280:	46a0      	mov	r8, r4
 8001282:	0015      	movs	r5, r2
 8001284:	9000      	str	r0, [sp, #0]
 8001286:	e7dc      	b.n	8001242 <__aeabi_ddiv+0x96>
 8001288:	4544      	cmp	r4, r8
 800128a:	d200      	bcs.n	800128e <__aeabi_ddiv+0xe2>
 800128c:	e1c7      	b.n	800161e <__aeabi_ddiv+0x472>
 800128e:	d100      	bne.n	8001292 <__aeabi_ddiv+0xe6>
 8001290:	e1c2      	b.n	8001618 <__aeabi_ddiv+0x46c>
 8001292:	2301      	movs	r3, #1
 8001294:	425b      	negs	r3, r3
 8001296:	469c      	mov	ip, r3
 8001298:	002e      	movs	r6, r5
 800129a:	4640      	mov	r0, r8
 800129c:	2500      	movs	r5, #0
 800129e:	44e3      	add	fp, ip
 80012a0:	0223      	lsls	r3, r4, #8
 80012a2:	0e14      	lsrs	r4, r2, #24
 80012a4:	431c      	orrs	r4, r3
 80012a6:	0c1b      	lsrs	r3, r3, #16
 80012a8:	4699      	mov	r9, r3
 80012aa:	0423      	lsls	r3, r4, #16
 80012ac:	0c1f      	lsrs	r7, r3, #16
 80012ae:	0212      	lsls	r2, r2, #8
 80012b0:	4649      	mov	r1, r9
 80012b2:	9200      	str	r2, [sp, #0]
 80012b4:	9701      	str	r7, [sp, #4]
 80012b6:	f7fe ffc9 	bl	800024c <__aeabi_uidivmod>
 80012ba:	0002      	movs	r2, r0
 80012bc:	437a      	muls	r2, r7
 80012be:	040b      	lsls	r3, r1, #16
 80012c0:	0c31      	lsrs	r1, r6, #16
 80012c2:	4680      	mov	r8, r0
 80012c4:	4319      	orrs	r1, r3
 80012c6:	428a      	cmp	r2, r1
 80012c8:	d907      	bls.n	80012da <__aeabi_ddiv+0x12e>
 80012ca:	2301      	movs	r3, #1
 80012cc:	425b      	negs	r3, r3
 80012ce:	469c      	mov	ip, r3
 80012d0:	1909      	adds	r1, r1, r4
 80012d2:	44e0      	add	r8, ip
 80012d4:	428c      	cmp	r4, r1
 80012d6:	d800      	bhi.n	80012da <__aeabi_ddiv+0x12e>
 80012d8:	e207      	b.n	80016ea <__aeabi_ddiv+0x53e>
 80012da:	1a88      	subs	r0, r1, r2
 80012dc:	4649      	mov	r1, r9
 80012de:	f7fe ffb5 	bl	800024c <__aeabi_uidivmod>
 80012e2:	0409      	lsls	r1, r1, #16
 80012e4:	468c      	mov	ip, r1
 80012e6:	0431      	lsls	r1, r6, #16
 80012e8:	4666      	mov	r6, ip
 80012ea:	9a01      	ldr	r2, [sp, #4]
 80012ec:	0c09      	lsrs	r1, r1, #16
 80012ee:	4342      	muls	r2, r0
 80012f0:	0003      	movs	r3, r0
 80012f2:	4331      	orrs	r1, r6
 80012f4:	428a      	cmp	r2, r1
 80012f6:	d904      	bls.n	8001302 <__aeabi_ddiv+0x156>
 80012f8:	1909      	adds	r1, r1, r4
 80012fa:	3b01      	subs	r3, #1
 80012fc:	428c      	cmp	r4, r1
 80012fe:	d800      	bhi.n	8001302 <__aeabi_ddiv+0x156>
 8001300:	e1ed      	b.n	80016de <__aeabi_ddiv+0x532>
 8001302:	1a88      	subs	r0, r1, r2
 8001304:	4642      	mov	r2, r8
 8001306:	0412      	lsls	r2, r2, #16
 8001308:	431a      	orrs	r2, r3
 800130a:	4690      	mov	r8, r2
 800130c:	4641      	mov	r1, r8
 800130e:	9b00      	ldr	r3, [sp, #0]
 8001310:	040e      	lsls	r6, r1, #16
 8001312:	0c1b      	lsrs	r3, r3, #16
 8001314:	001f      	movs	r7, r3
 8001316:	9302      	str	r3, [sp, #8]
 8001318:	9b00      	ldr	r3, [sp, #0]
 800131a:	0c36      	lsrs	r6, r6, #16
 800131c:	041b      	lsls	r3, r3, #16
 800131e:	0c19      	lsrs	r1, r3, #16
 8001320:	000b      	movs	r3, r1
 8001322:	4373      	muls	r3, r6
 8001324:	0c12      	lsrs	r2, r2, #16
 8001326:	437e      	muls	r6, r7
 8001328:	9103      	str	r1, [sp, #12]
 800132a:	4351      	muls	r1, r2
 800132c:	437a      	muls	r2, r7
 800132e:	0c1f      	lsrs	r7, r3, #16
 8001330:	46bc      	mov	ip, r7
 8001332:	1876      	adds	r6, r6, r1
 8001334:	4466      	add	r6, ip
 8001336:	42b1      	cmp	r1, r6
 8001338:	d903      	bls.n	8001342 <__aeabi_ddiv+0x196>
 800133a:	2180      	movs	r1, #128	; 0x80
 800133c:	0249      	lsls	r1, r1, #9
 800133e:	468c      	mov	ip, r1
 8001340:	4462      	add	r2, ip
 8001342:	0c31      	lsrs	r1, r6, #16
 8001344:	188a      	adds	r2, r1, r2
 8001346:	0431      	lsls	r1, r6, #16
 8001348:	041e      	lsls	r6, r3, #16
 800134a:	0c36      	lsrs	r6, r6, #16
 800134c:	198e      	adds	r6, r1, r6
 800134e:	4290      	cmp	r0, r2
 8001350:	d302      	bcc.n	8001358 <__aeabi_ddiv+0x1ac>
 8001352:	d112      	bne.n	800137a <__aeabi_ddiv+0x1ce>
 8001354:	42b5      	cmp	r5, r6
 8001356:	d210      	bcs.n	800137a <__aeabi_ddiv+0x1ce>
 8001358:	4643      	mov	r3, r8
 800135a:	1e59      	subs	r1, r3, #1
 800135c:	9b00      	ldr	r3, [sp, #0]
 800135e:	469c      	mov	ip, r3
 8001360:	4465      	add	r5, ip
 8001362:	001f      	movs	r7, r3
 8001364:	429d      	cmp	r5, r3
 8001366:	419b      	sbcs	r3, r3
 8001368:	425b      	negs	r3, r3
 800136a:	191b      	adds	r3, r3, r4
 800136c:	18c0      	adds	r0, r0, r3
 800136e:	4284      	cmp	r4, r0
 8001370:	d200      	bcs.n	8001374 <__aeabi_ddiv+0x1c8>
 8001372:	e1a0      	b.n	80016b6 <__aeabi_ddiv+0x50a>
 8001374:	d100      	bne.n	8001378 <__aeabi_ddiv+0x1cc>
 8001376:	e19b      	b.n	80016b0 <__aeabi_ddiv+0x504>
 8001378:	4688      	mov	r8, r1
 800137a:	1bae      	subs	r6, r5, r6
 800137c:	42b5      	cmp	r5, r6
 800137e:	41ad      	sbcs	r5, r5
 8001380:	1a80      	subs	r0, r0, r2
 8001382:	426d      	negs	r5, r5
 8001384:	1b40      	subs	r0, r0, r5
 8001386:	4284      	cmp	r4, r0
 8001388:	d100      	bne.n	800138c <__aeabi_ddiv+0x1e0>
 800138a:	e1d5      	b.n	8001738 <__aeabi_ddiv+0x58c>
 800138c:	4649      	mov	r1, r9
 800138e:	f7fe ff5d 	bl	800024c <__aeabi_uidivmod>
 8001392:	9a01      	ldr	r2, [sp, #4]
 8001394:	040b      	lsls	r3, r1, #16
 8001396:	4342      	muls	r2, r0
 8001398:	0c31      	lsrs	r1, r6, #16
 800139a:	0005      	movs	r5, r0
 800139c:	4319      	orrs	r1, r3
 800139e:	428a      	cmp	r2, r1
 80013a0:	d900      	bls.n	80013a4 <__aeabi_ddiv+0x1f8>
 80013a2:	e16c      	b.n	800167e <__aeabi_ddiv+0x4d2>
 80013a4:	1a88      	subs	r0, r1, r2
 80013a6:	4649      	mov	r1, r9
 80013a8:	f7fe ff50 	bl	800024c <__aeabi_uidivmod>
 80013ac:	9a01      	ldr	r2, [sp, #4]
 80013ae:	0436      	lsls	r6, r6, #16
 80013b0:	4342      	muls	r2, r0
 80013b2:	0409      	lsls	r1, r1, #16
 80013b4:	0c36      	lsrs	r6, r6, #16
 80013b6:	0003      	movs	r3, r0
 80013b8:	430e      	orrs	r6, r1
 80013ba:	42b2      	cmp	r2, r6
 80013bc:	d900      	bls.n	80013c0 <__aeabi_ddiv+0x214>
 80013be:	e153      	b.n	8001668 <__aeabi_ddiv+0x4bc>
 80013c0:	9803      	ldr	r0, [sp, #12]
 80013c2:	1ab6      	subs	r6, r6, r2
 80013c4:	0002      	movs	r2, r0
 80013c6:	042d      	lsls	r5, r5, #16
 80013c8:	431d      	orrs	r5, r3
 80013ca:	9f02      	ldr	r7, [sp, #8]
 80013cc:	042b      	lsls	r3, r5, #16
 80013ce:	0c1b      	lsrs	r3, r3, #16
 80013d0:	435a      	muls	r2, r3
 80013d2:	437b      	muls	r3, r7
 80013d4:	469c      	mov	ip, r3
 80013d6:	0c29      	lsrs	r1, r5, #16
 80013d8:	4348      	muls	r0, r1
 80013da:	0c13      	lsrs	r3, r2, #16
 80013dc:	4484      	add	ip, r0
 80013de:	4463      	add	r3, ip
 80013e0:	4379      	muls	r1, r7
 80013e2:	4298      	cmp	r0, r3
 80013e4:	d903      	bls.n	80013ee <__aeabi_ddiv+0x242>
 80013e6:	2080      	movs	r0, #128	; 0x80
 80013e8:	0240      	lsls	r0, r0, #9
 80013ea:	4684      	mov	ip, r0
 80013ec:	4461      	add	r1, ip
 80013ee:	0c18      	lsrs	r0, r3, #16
 80013f0:	0412      	lsls	r2, r2, #16
 80013f2:	041b      	lsls	r3, r3, #16
 80013f4:	0c12      	lsrs	r2, r2, #16
 80013f6:	1841      	adds	r1, r0, r1
 80013f8:	189b      	adds	r3, r3, r2
 80013fa:	428e      	cmp	r6, r1
 80013fc:	d200      	bcs.n	8001400 <__aeabi_ddiv+0x254>
 80013fe:	e0ff      	b.n	8001600 <__aeabi_ddiv+0x454>
 8001400:	d100      	bne.n	8001404 <__aeabi_ddiv+0x258>
 8001402:	e0fa      	b.n	80015fa <__aeabi_ddiv+0x44e>
 8001404:	2301      	movs	r3, #1
 8001406:	431d      	orrs	r5, r3
 8001408:	4a49      	ldr	r2, [pc, #292]	; (8001530 <__aeabi_ddiv+0x384>)
 800140a:	445a      	add	r2, fp
 800140c:	2a00      	cmp	r2, #0
 800140e:	dc00      	bgt.n	8001412 <__aeabi_ddiv+0x266>
 8001410:	e0aa      	b.n	8001568 <__aeabi_ddiv+0x3bc>
 8001412:	076b      	lsls	r3, r5, #29
 8001414:	d000      	beq.n	8001418 <__aeabi_ddiv+0x26c>
 8001416:	e13d      	b.n	8001694 <__aeabi_ddiv+0x4e8>
 8001418:	08ed      	lsrs	r5, r5, #3
 800141a:	4643      	mov	r3, r8
 800141c:	01db      	lsls	r3, r3, #7
 800141e:	d506      	bpl.n	800142e <__aeabi_ddiv+0x282>
 8001420:	4642      	mov	r2, r8
 8001422:	4b44      	ldr	r3, [pc, #272]	; (8001534 <__aeabi_ddiv+0x388>)
 8001424:	401a      	ands	r2, r3
 8001426:	4690      	mov	r8, r2
 8001428:	2280      	movs	r2, #128	; 0x80
 800142a:	00d2      	lsls	r2, r2, #3
 800142c:	445a      	add	r2, fp
 800142e:	4b42      	ldr	r3, [pc, #264]	; (8001538 <__aeabi_ddiv+0x38c>)
 8001430:	429a      	cmp	r2, r3
 8001432:	dd00      	ble.n	8001436 <__aeabi_ddiv+0x28a>
 8001434:	e71f      	b.n	8001276 <__aeabi_ddiv+0xca>
 8001436:	4643      	mov	r3, r8
 8001438:	075b      	lsls	r3, r3, #29
 800143a:	431d      	orrs	r5, r3
 800143c:	4643      	mov	r3, r8
 800143e:	0552      	lsls	r2, r2, #21
 8001440:	025c      	lsls	r4, r3, #9
 8001442:	0b24      	lsrs	r4, r4, #12
 8001444:	0d53      	lsrs	r3, r2, #21
 8001446:	e708      	b.n	800125a <__aeabi_ddiv+0xae>
 8001448:	4652      	mov	r2, sl
 800144a:	4322      	orrs	r2, r4
 800144c:	d100      	bne.n	8001450 <__aeabi_ddiv+0x2a4>
 800144e:	e07b      	b.n	8001548 <__aeabi_ddiv+0x39c>
 8001450:	2c00      	cmp	r4, #0
 8001452:	d100      	bne.n	8001456 <__aeabi_ddiv+0x2aa>
 8001454:	e0fa      	b.n	800164c <__aeabi_ddiv+0x4a0>
 8001456:	0020      	movs	r0, r4
 8001458:	f001 fa22 	bl	80028a0 <__clzsi2>
 800145c:	0002      	movs	r2, r0
 800145e:	3a0b      	subs	r2, #11
 8001460:	231d      	movs	r3, #29
 8001462:	0001      	movs	r1, r0
 8001464:	1a9b      	subs	r3, r3, r2
 8001466:	4652      	mov	r2, sl
 8001468:	3908      	subs	r1, #8
 800146a:	40da      	lsrs	r2, r3
 800146c:	408c      	lsls	r4, r1
 800146e:	4314      	orrs	r4, r2
 8001470:	4652      	mov	r2, sl
 8001472:	408a      	lsls	r2, r1
 8001474:	4b31      	ldr	r3, [pc, #196]	; (800153c <__aeabi_ddiv+0x390>)
 8001476:	4458      	add	r0, fp
 8001478:	469b      	mov	fp, r3
 800147a:	4483      	add	fp, r0
 800147c:	2000      	movs	r0, #0
 800147e:	e6d5      	b.n	800122c <__aeabi_ddiv+0x80>
 8001480:	464b      	mov	r3, r9
 8001482:	4323      	orrs	r3, r4
 8001484:	4698      	mov	r8, r3
 8001486:	d044      	beq.n	8001512 <__aeabi_ddiv+0x366>
 8001488:	2c00      	cmp	r4, #0
 800148a:	d100      	bne.n	800148e <__aeabi_ddiv+0x2e2>
 800148c:	e0ce      	b.n	800162c <__aeabi_ddiv+0x480>
 800148e:	0020      	movs	r0, r4
 8001490:	f001 fa06 	bl	80028a0 <__clzsi2>
 8001494:	0001      	movs	r1, r0
 8001496:	0002      	movs	r2, r0
 8001498:	390b      	subs	r1, #11
 800149a:	231d      	movs	r3, #29
 800149c:	1a5b      	subs	r3, r3, r1
 800149e:	4649      	mov	r1, r9
 80014a0:	0010      	movs	r0, r2
 80014a2:	40d9      	lsrs	r1, r3
 80014a4:	3808      	subs	r0, #8
 80014a6:	4084      	lsls	r4, r0
 80014a8:	000b      	movs	r3, r1
 80014aa:	464d      	mov	r5, r9
 80014ac:	4323      	orrs	r3, r4
 80014ae:	4698      	mov	r8, r3
 80014b0:	4085      	lsls	r5, r0
 80014b2:	4823      	ldr	r0, [pc, #140]	; (8001540 <__aeabi_ddiv+0x394>)
 80014b4:	1a83      	subs	r3, r0, r2
 80014b6:	469b      	mov	fp, r3
 80014b8:	2300      	movs	r3, #0
 80014ba:	4699      	mov	r9, r3
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	e69a      	b.n	80011f6 <__aeabi_ddiv+0x4a>
 80014c0:	464b      	mov	r3, r9
 80014c2:	4323      	orrs	r3, r4
 80014c4:	4698      	mov	r8, r3
 80014c6:	d11d      	bne.n	8001504 <__aeabi_ddiv+0x358>
 80014c8:	2308      	movs	r3, #8
 80014ca:	4699      	mov	r9, r3
 80014cc:	3b06      	subs	r3, #6
 80014ce:	2500      	movs	r5, #0
 80014d0:	4683      	mov	fp, r0
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	e68f      	b.n	80011f6 <__aeabi_ddiv+0x4a>
 80014d6:	4652      	mov	r2, sl
 80014d8:	4322      	orrs	r2, r4
 80014da:	d109      	bne.n	80014f0 <__aeabi_ddiv+0x344>
 80014dc:	2302      	movs	r3, #2
 80014de:	4649      	mov	r1, r9
 80014e0:	4319      	orrs	r1, r3
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <__aeabi_ddiv+0x398>)
 80014e4:	4689      	mov	r9, r1
 80014e6:	469c      	mov	ip, r3
 80014e8:	2400      	movs	r4, #0
 80014ea:	2002      	movs	r0, #2
 80014ec:	44e3      	add	fp, ip
 80014ee:	e69d      	b.n	800122c <__aeabi_ddiv+0x80>
 80014f0:	2303      	movs	r3, #3
 80014f2:	464a      	mov	r2, r9
 80014f4:	431a      	orrs	r2, r3
 80014f6:	4b13      	ldr	r3, [pc, #76]	; (8001544 <__aeabi_ddiv+0x398>)
 80014f8:	4691      	mov	r9, r2
 80014fa:	469c      	mov	ip, r3
 80014fc:	4652      	mov	r2, sl
 80014fe:	2003      	movs	r0, #3
 8001500:	44e3      	add	fp, ip
 8001502:	e693      	b.n	800122c <__aeabi_ddiv+0x80>
 8001504:	230c      	movs	r3, #12
 8001506:	4699      	mov	r9, r3
 8001508:	3b09      	subs	r3, #9
 800150a:	46a0      	mov	r8, r4
 800150c:	4683      	mov	fp, r0
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	e671      	b.n	80011f6 <__aeabi_ddiv+0x4a>
 8001512:	2304      	movs	r3, #4
 8001514:	4699      	mov	r9, r3
 8001516:	2300      	movs	r3, #0
 8001518:	469b      	mov	fp, r3
 800151a:	3301      	adds	r3, #1
 800151c:	2500      	movs	r5, #0
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	e669      	b.n	80011f6 <__aeabi_ddiv+0x4a>
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	000007ff 	.word	0x000007ff
 8001528:	fffffc01 	.word	0xfffffc01
 800152c:	0800c348 	.word	0x0800c348
 8001530:	000003ff 	.word	0x000003ff
 8001534:	feffffff 	.word	0xfeffffff
 8001538:	000007fe 	.word	0x000007fe
 800153c:	000003f3 	.word	0x000003f3
 8001540:	fffffc0d 	.word	0xfffffc0d
 8001544:	fffff801 	.word	0xfffff801
 8001548:	4649      	mov	r1, r9
 800154a:	2301      	movs	r3, #1
 800154c:	4319      	orrs	r1, r3
 800154e:	4689      	mov	r9, r1
 8001550:	2400      	movs	r4, #0
 8001552:	2001      	movs	r0, #1
 8001554:	e66a      	b.n	800122c <__aeabi_ddiv+0x80>
 8001556:	2300      	movs	r3, #0
 8001558:	2480      	movs	r4, #128	; 0x80
 800155a:	469a      	mov	sl, r3
 800155c:	2500      	movs	r5, #0
 800155e:	4b8a      	ldr	r3, [pc, #552]	; (8001788 <__aeabi_ddiv+0x5dc>)
 8001560:	0324      	lsls	r4, r4, #12
 8001562:	e67a      	b.n	800125a <__aeabi_ddiv+0xae>
 8001564:	2501      	movs	r5, #1
 8001566:	426d      	negs	r5, r5
 8001568:	2301      	movs	r3, #1
 800156a:	1a9b      	subs	r3, r3, r2
 800156c:	2b38      	cmp	r3, #56	; 0x38
 800156e:	dd00      	ble.n	8001572 <__aeabi_ddiv+0x3c6>
 8001570:	e670      	b.n	8001254 <__aeabi_ddiv+0xa8>
 8001572:	2b1f      	cmp	r3, #31
 8001574:	dc00      	bgt.n	8001578 <__aeabi_ddiv+0x3cc>
 8001576:	e0bf      	b.n	80016f8 <__aeabi_ddiv+0x54c>
 8001578:	211f      	movs	r1, #31
 800157a:	4249      	negs	r1, r1
 800157c:	1a8a      	subs	r2, r1, r2
 800157e:	4641      	mov	r1, r8
 8001580:	40d1      	lsrs	r1, r2
 8001582:	000a      	movs	r2, r1
 8001584:	2b20      	cmp	r3, #32
 8001586:	d004      	beq.n	8001592 <__aeabi_ddiv+0x3e6>
 8001588:	4641      	mov	r1, r8
 800158a:	4b80      	ldr	r3, [pc, #512]	; (800178c <__aeabi_ddiv+0x5e0>)
 800158c:	445b      	add	r3, fp
 800158e:	4099      	lsls	r1, r3
 8001590:	430d      	orrs	r5, r1
 8001592:	1e6b      	subs	r3, r5, #1
 8001594:	419d      	sbcs	r5, r3
 8001596:	2307      	movs	r3, #7
 8001598:	432a      	orrs	r2, r5
 800159a:	001d      	movs	r5, r3
 800159c:	2400      	movs	r4, #0
 800159e:	4015      	ands	r5, r2
 80015a0:	4213      	tst	r3, r2
 80015a2:	d100      	bne.n	80015a6 <__aeabi_ddiv+0x3fa>
 80015a4:	e0d4      	b.n	8001750 <__aeabi_ddiv+0x5a4>
 80015a6:	210f      	movs	r1, #15
 80015a8:	2300      	movs	r3, #0
 80015aa:	4011      	ands	r1, r2
 80015ac:	2904      	cmp	r1, #4
 80015ae:	d100      	bne.n	80015b2 <__aeabi_ddiv+0x406>
 80015b0:	e0cb      	b.n	800174a <__aeabi_ddiv+0x59e>
 80015b2:	1d11      	adds	r1, r2, #4
 80015b4:	4291      	cmp	r1, r2
 80015b6:	4192      	sbcs	r2, r2
 80015b8:	4252      	negs	r2, r2
 80015ba:	189b      	adds	r3, r3, r2
 80015bc:	000a      	movs	r2, r1
 80015be:	0219      	lsls	r1, r3, #8
 80015c0:	d400      	bmi.n	80015c4 <__aeabi_ddiv+0x418>
 80015c2:	e0c2      	b.n	800174a <__aeabi_ddiv+0x59e>
 80015c4:	2301      	movs	r3, #1
 80015c6:	2400      	movs	r4, #0
 80015c8:	2500      	movs	r5, #0
 80015ca:	e646      	b.n	800125a <__aeabi_ddiv+0xae>
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	4641      	mov	r1, r8
 80015d0:	031b      	lsls	r3, r3, #12
 80015d2:	4219      	tst	r1, r3
 80015d4:	d008      	beq.n	80015e8 <__aeabi_ddiv+0x43c>
 80015d6:	421c      	tst	r4, r3
 80015d8:	d106      	bne.n	80015e8 <__aeabi_ddiv+0x43c>
 80015da:	431c      	orrs	r4, r3
 80015dc:	0324      	lsls	r4, r4, #12
 80015de:	46ba      	mov	sl, r7
 80015e0:	0015      	movs	r5, r2
 80015e2:	4b69      	ldr	r3, [pc, #420]	; (8001788 <__aeabi_ddiv+0x5dc>)
 80015e4:	0b24      	lsrs	r4, r4, #12
 80015e6:	e638      	b.n	800125a <__aeabi_ddiv+0xae>
 80015e8:	2480      	movs	r4, #128	; 0x80
 80015ea:	4643      	mov	r3, r8
 80015ec:	0324      	lsls	r4, r4, #12
 80015ee:	431c      	orrs	r4, r3
 80015f0:	0324      	lsls	r4, r4, #12
 80015f2:	46b2      	mov	sl, r6
 80015f4:	4b64      	ldr	r3, [pc, #400]	; (8001788 <__aeabi_ddiv+0x5dc>)
 80015f6:	0b24      	lsrs	r4, r4, #12
 80015f8:	e62f      	b.n	800125a <__aeabi_ddiv+0xae>
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d100      	bne.n	8001600 <__aeabi_ddiv+0x454>
 80015fe:	e703      	b.n	8001408 <__aeabi_ddiv+0x25c>
 8001600:	19a6      	adds	r6, r4, r6
 8001602:	1e68      	subs	r0, r5, #1
 8001604:	42a6      	cmp	r6, r4
 8001606:	d200      	bcs.n	800160a <__aeabi_ddiv+0x45e>
 8001608:	e08d      	b.n	8001726 <__aeabi_ddiv+0x57a>
 800160a:	428e      	cmp	r6, r1
 800160c:	d200      	bcs.n	8001610 <__aeabi_ddiv+0x464>
 800160e:	e0a3      	b.n	8001758 <__aeabi_ddiv+0x5ac>
 8001610:	d100      	bne.n	8001614 <__aeabi_ddiv+0x468>
 8001612:	e0b3      	b.n	800177c <__aeabi_ddiv+0x5d0>
 8001614:	0005      	movs	r5, r0
 8001616:	e6f5      	b.n	8001404 <__aeabi_ddiv+0x258>
 8001618:	42aa      	cmp	r2, r5
 800161a:	d900      	bls.n	800161e <__aeabi_ddiv+0x472>
 800161c:	e639      	b.n	8001292 <__aeabi_ddiv+0xe6>
 800161e:	4643      	mov	r3, r8
 8001620:	07de      	lsls	r6, r3, #31
 8001622:	0858      	lsrs	r0, r3, #1
 8001624:	086b      	lsrs	r3, r5, #1
 8001626:	431e      	orrs	r6, r3
 8001628:	07ed      	lsls	r5, r5, #31
 800162a:	e639      	b.n	80012a0 <__aeabi_ddiv+0xf4>
 800162c:	4648      	mov	r0, r9
 800162e:	f001 f937 	bl	80028a0 <__clzsi2>
 8001632:	0001      	movs	r1, r0
 8001634:	0002      	movs	r2, r0
 8001636:	3115      	adds	r1, #21
 8001638:	3220      	adds	r2, #32
 800163a:	291c      	cmp	r1, #28
 800163c:	dc00      	bgt.n	8001640 <__aeabi_ddiv+0x494>
 800163e:	e72c      	b.n	800149a <__aeabi_ddiv+0x2ee>
 8001640:	464b      	mov	r3, r9
 8001642:	3808      	subs	r0, #8
 8001644:	4083      	lsls	r3, r0
 8001646:	2500      	movs	r5, #0
 8001648:	4698      	mov	r8, r3
 800164a:	e732      	b.n	80014b2 <__aeabi_ddiv+0x306>
 800164c:	f001 f928 	bl	80028a0 <__clzsi2>
 8001650:	0003      	movs	r3, r0
 8001652:	001a      	movs	r2, r3
 8001654:	3215      	adds	r2, #21
 8001656:	3020      	adds	r0, #32
 8001658:	2a1c      	cmp	r2, #28
 800165a:	dc00      	bgt.n	800165e <__aeabi_ddiv+0x4b2>
 800165c:	e700      	b.n	8001460 <__aeabi_ddiv+0x2b4>
 800165e:	4654      	mov	r4, sl
 8001660:	3b08      	subs	r3, #8
 8001662:	2200      	movs	r2, #0
 8001664:	409c      	lsls	r4, r3
 8001666:	e705      	b.n	8001474 <__aeabi_ddiv+0x2c8>
 8001668:	1936      	adds	r6, r6, r4
 800166a:	3b01      	subs	r3, #1
 800166c:	42b4      	cmp	r4, r6
 800166e:	d900      	bls.n	8001672 <__aeabi_ddiv+0x4c6>
 8001670:	e6a6      	b.n	80013c0 <__aeabi_ddiv+0x214>
 8001672:	42b2      	cmp	r2, r6
 8001674:	d800      	bhi.n	8001678 <__aeabi_ddiv+0x4cc>
 8001676:	e6a3      	b.n	80013c0 <__aeabi_ddiv+0x214>
 8001678:	1e83      	subs	r3, r0, #2
 800167a:	1936      	adds	r6, r6, r4
 800167c:	e6a0      	b.n	80013c0 <__aeabi_ddiv+0x214>
 800167e:	1909      	adds	r1, r1, r4
 8001680:	3d01      	subs	r5, #1
 8001682:	428c      	cmp	r4, r1
 8001684:	d900      	bls.n	8001688 <__aeabi_ddiv+0x4dc>
 8001686:	e68d      	b.n	80013a4 <__aeabi_ddiv+0x1f8>
 8001688:	428a      	cmp	r2, r1
 800168a:	d800      	bhi.n	800168e <__aeabi_ddiv+0x4e2>
 800168c:	e68a      	b.n	80013a4 <__aeabi_ddiv+0x1f8>
 800168e:	1e85      	subs	r5, r0, #2
 8001690:	1909      	adds	r1, r1, r4
 8001692:	e687      	b.n	80013a4 <__aeabi_ddiv+0x1f8>
 8001694:	230f      	movs	r3, #15
 8001696:	402b      	ands	r3, r5
 8001698:	2b04      	cmp	r3, #4
 800169a:	d100      	bne.n	800169e <__aeabi_ddiv+0x4f2>
 800169c:	e6bc      	b.n	8001418 <__aeabi_ddiv+0x26c>
 800169e:	2305      	movs	r3, #5
 80016a0:	425b      	negs	r3, r3
 80016a2:	42ab      	cmp	r3, r5
 80016a4:	419b      	sbcs	r3, r3
 80016a6:	3504      	adds	r5, #4
 80016a8:	425b      	negs	r3, r3
 80016aa:	08ed      	lsrs	r5, r5, #3
 80016ac:	4498      	add	r8, r3
 80016ae:	e6b4      	b.n	800141a <__aeabi_ddiv+0x26e>
 80016b0:	42af      	cmp	r7, r5
 80016b2:	d900      	bls.n	80016b6 <__aeabi_ddiv+0x50a>
 80016b4:	e660      	b.n	8001378 <__aeabi_ddiv+0x1cc>
 80016b6:	4282      	cmp	r2, r0
 80016b8:	d804      	bhi.n	80016c4 <__aeabi_ddiv+0x518>
 80016ba:	d000      	beq.n	80016be <__aeabi_ddiv+0x512>
 80016bc:	e65c      	b.n	8001378 <__aeabi_ddiv+0x1cc>
 80016be:	42ae      	cmp	r6, r5
 80016c0:	d800      	bhi.n	80016c4 <__aeabi_ddiv+0x518>
 80016c2:	e659      	b.n	8001378 <__aeabi_ddiv+0x1cc>
 80016c4:	2302      	movs	r3, #2
 80016c6:	425b      	negs	r3, r3
 80016c8:	469c      	mov	ip, r3
 80016ca:	9b00      	ldr	r3, [sp, #0]
 80016cc:	44e0      	add	r8, ip
 80016ce:	469c      	mov	ip, r3
 80016d0:	4465      	add	r5, ip
 80016d2:	429d      	cmp	r5, r3
 80016d4:	419b      	sbcs	r3, r3
 80016d6:	425b      	negs	r3, r3
 80016d8:	191b      	adds	r3, r3, r4
 80016da:	18c0      	adds	r0, r0, r3
 80016dc:	e64d      	b.n	800137a <__aeabi_ddiv+0x1ce>
 80016de:	428a      	cmp	r2, r1
 80016e0:	d800      	bhi.n	80016e4 <__aeabi_ddiv+0x538>
 80016e2:	e60e      	b.n	8001302 <__aeabi_ddiv+0x156>
 80016e4:	1e83      	subs	r3, r0, #2
 80016e6:	1909      	adds	r1, r1, r4
 80016e8:	e60b      	b.n	8001302 <__aeabi_ddiv+0x156>
 80016ea:	428a      	cmp	r2, r1
 80016ec:	d800      	bhi.n	80016f0 <__aeabi_ddiv+0x544>
 80016ee:	e5f4      	b.n	80012da <__aeabi_ddiv+0x12e>
 80016f0:	1e83      	subs	r3, r0, #2
 80016f2:	4698      	mov	r8, r3
 80016f4:	1909      	adds	r1, r1, r4
 80016f6:	e5f0      	b.n	80012da <__aeabi_ddiv+0x12e>
 80016f8:	4925      	ldr	r1, [pc, #148]	; (8001790 <__aeabi_ddiv+0x5e4>)
 80016fa:	0028      	movs	r0, r5
 80016fc:	4459      	add	r1, fp
 80016fe:	408d      	lsls	r5, r1
 8001700:	4642      	mov	r2, r8
 8001702:	408a      	lsls	r2, r1
 8001704:	1e69      	subs	r1, r5, #1
 8001706:	418d      	sbcs	r5, r1
 8001708:	4641      	mov	r1, r8
 800170a:	40d8      	lsrs	r0, r3
 800170c:	40d9      	lsrs	r1, r3
 800170e:	4302      	orrs	r2, r0
 8001710:	432a      	orrs	r2, r5
 8001712:	000b      	movs	r3, r1
 8001714:	0751      	lsls	r1, r2, #29
 8001716:	d100      	bne.n	800171a <__aeabi_ddiv+0x56e>
 8001718:	e751      	b.n	80015be <__aeabi_ddiv+0x412>
 800171a:	210f      	movs	r1, #15
 800171c:	4011      	ands	r1, r2
 800171e:	2904      	cmp	r1, #4
 8001720:	d000      	beq.n	8001724 <__aeabi_ddiv+0x578>
 8001722:	e746      	b.n	80015b2 <__aeabi_ddiv+0x406>
 8001724:	e74b      	b.n	80015be <__aeabi_ddiv+0x412>
 8001726:	0005      	movs	r5, r0
 8001728:	428e      	cmp	r6, r1
 800172a:	d000      	beq.n	800172e <__aeabi_ddiv+0x582>
 800172c:	e66a      	b.n	8001404 <__aeabi_ddiv+0x258>
 800172e:	9a00      	ldr	r2, [sp, #0]
 8001730:	4293      	cmp	r3, r2
 8001732:	d000      	beq.n	8001736 <__aeabi_ddiv+0x58a>
 8001734:	e666      	b.n	8001404 <__aeabi_ddiv+0x258>
 8001736:	e667      	b.n	8001408 <__aeabi_ddiv+0x25c>
 8001738:	4a16      	ldr	r2, [pc, #88]	; (8001794 <__aeabi_ddiv+0x5e8>)
 800173a:	445a      	add	r2, fp
 800173c:	2a00      	cmp	r2, #0
 800173e:	dc00      	bgt.n	8001742 <__aeabi_ddiv+0x596>
 8001740:	e710      	b.n	8001564 <__aeabi_ddiv+0x3b8>
 8001742:	2301      	movs	r3, #1
 8001744:	2500      	movs	r5, #0
 8001746:	4498      	add	r8, r3
 8001748:	e667      	b.n	800141a <__aeabi_ddiv+0x26e>
 800174a:	075d      	lsls	r5, r3, #29
 800174c:	025b      	lsls	r3, r3, #9
 800174e:	0b1c      	lsrs	r4, r3, #12
 8001750:	08d2      	lsrs	r2, r2, #3
 8001752:	2300      	movs	r3, #0
 8001754:	4315      	orrs	r5, r2
 8001756:	e580      	b.n	800125a <__aeabi_ddiv+0xae>
 8001758:	9800      	ldr	r0, [sp, #0]
 800175a:	3d02      	subs	r5, #2
 800175c:	0042      	lsls	r2, r0, #1
 800175e:	4282      	cmp	r2, r0
 8001760:	41bf      	sbcs	r7, r7
 8001762:	427f      	negs	r7, r7
 8001764:	193c      	adds	r4, r7, r4
 8001766:	1936      	adds	r6, r6, r4
 8001768:	9200      	str	r2, [sp, #0]
 800176a:	e7dd      	b.n	8001728 <__aeabi_ddiv+0x57c>
 800176c:	2480      	movs	r4, #128	; 0x80
 800176e:	4643      	mov	r3, r8
 8001770:	0324      	lsls	r4, r4, #12
 8001772:	431c      	orrs	r4, r3
 8001774:	0324      	lsls	r4, r4, #12
 8001776:	4b04      	ldr	r3, [pc, #16]	; (8001788 <__aeabi_ddiv+0x5dc>)
 8001778:	0b24      	lsrs	r4, r4, #12
 800177a:	e56e      	b.n	800125a <__aeabi_ddiv+0xae>
 800177c:	9a00      	ldr	r2, [sp, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d3ea      	bcc.n	8001758 <__aeabi_ddiv+0x5ac>
 8001782:	0005      	movs	r5, r0
 8001784:	e7d3      	b.n	800172e <__aeabi_ddiv+0x582>
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	000007ff 	.word	0x000007ff
 800178c:	0000043e 	.word	0x0000043e
 8001790:	0000041e 	.word	0x0000041e
 8001794:	000003ff 	.word	0x000003ff

08001798 <__eqdf2>:
 8001798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800179a:	464e      	mov	r6, r9
 800179c:	4645      	mov	r5, r8
 800179e:	46de      	mov	lr, fp
 80017a0:	4657      	mov	r7, sl
 80017a2:	4690      	mov	r8, r2
 80017a4:	b5e0      	push	{r5, r6, r7, lr}
 80017a6:	0017      	movs	r7, r2
 80017a8:	031a      	lsls	r2, r3, #12
 80017aa:	0b12      	lsrs	r2, r2, #12
 80017ac:	0005      	movs	r5, r0
 80017ae:	4684      	mov	ip, r0
 80017b0:	4819      	ldr	r0, [pc, #100]	; (8001818 <__eqdf2+0x80>)
 80017b2:	030e      	lsls	r6, r1, #12
 80017b4:	004c      	lsls	r4, r1, #1
 80017b6:	4691      	mov	r9, r2
 80017b8:	005a      	lsls	r2, r3, #1
 80017ba:	0fdb      	lsrs	r3, r3, #31
 80017bc:	469b      	mov	fp, r3
 80017be:	0b36      	lsrs	r6, r6, #12
 80017c0:	0d64      	lsrs	r4, r4, #21
 80017c2:	0fc9      	lsrs	r1, r1, #31
 80017c4:	0d52      	lsrs	r2, r2, #21
 80017c6:	4284      	cmp	r4, r0
 80017c8:	d019      	beq.n	80017fe <__eqdf2+0x66>
 80017ca:	4282      	cmp	r2, r0
 80017cc:	d010      	beq.n	80017f0 <__eqdf2+0x58>
 80017ce:	2001      	movs	r0, #1
 80017d0:	4294      	cmp	r4, r2
 80017d2:	d10e      	bne.n	80017f2 <__eqdf2+0x5a>
 80017d4:	454e      	cmp	r6, r9
 80017d6:	d10c      	bne.n	80017f2 <__eqdf2+0x5a>
 80017d8:	2001      	movs	r0, #1
 80017da:	45c4      	cmp	ip, r8
 80017dc:	d109      	bne.n	80017f2 <__eqdf2+0x5a>
 80017de:	4559      	cmp	r1, fp
 80017e0:	d017      	beq.n	8001812 <__eqdf2+0x7a>
 80017e2:	2c00      	cmp	r4, #0
 80017e4:	d105      	bne.n	80017f2 <__eqdf2+0x5a>
 80017e6:	0030      	movs	r0, r6
 80017e8:	4328      	orrs	r0, r5
 80017ea:	1e43      	subs	r3, r0, #1
 80017ec:	4198      	sbcs	r0, r3
 80017ee:	e000      	b.n	80017f2 <__eqdf2+0x5a>
 80017f0:	2001      	movs	r0, #1
 80017f2:	bcf0      	pop	{r4, r5, r6, r7}
 80017f4:	46bb      	mov	fp, r7
 80017f6:	46b2      	mov	sl, r6
 80017f8:	46a9      	mov	r9, r5
 80017fa:	46a0      	mov	r8, r4
 80017fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017fe:	0033      	movs	r3, r6
 8001800:	2001      	movs	r0, #1
 8001802:	432b      	orrs	r3, r5
 8001804:	d1f5      	bne.n	80017f2 <__eqdf2+0x5a>
 8001806:	42a2      	cmp	r2, r4
 8001808:	d1f3      	bne.n	80017f2 <__eqdf2+0x5a>
 800180a:	464b      	mov	r3, r9
 800180c:	433b      	orrs	r3, r7
 800180e:	d1f0      	bne.n	80017f2 <__eqdf2+0x5a>
 8001810:	e7e2      	b.n	80017d8 <__eqdf2+0x40>
 8001812:	2000      	movs	r0, #0
 8001814:	e7ed      	b.n	80017f2 <__eqdf2+0x5a>
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	000007ff 	.word	0x000007ff

0800181c <__gedf2>:
 800181c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800181e:	4647      	mov	r7, r8
 8001820:	46ce      	mov	lr, r9
 8001822:	0004      	movs	r4, r0
 8001824:	0018      	movs	r0, r3
 8001826:	0016      	movs	r6, r2
 8001828:	031b      	lsls	r3, r3, #12
 800182a:	0b1b      	lsrs	r3, r3, #12
 800182c:	4d2d      	ldr	r5, [pc, #180]	; (80018e4 <__gedf2+0xc8>)
 800182e:	004a      	lsls	r2, r1, #1
 8001830:	4699      	mov	r9, r3
 8001832:	b580      	push	{r7, lr}
 8001834:	0043      	lsls	r3, r0, #1
 8001836:	030f      	lsls	r7, r1, #12
 8001838:	46a4      	mov	ip, r4
 800183a:	46b0      	mov	r8, r6
 800183c:	0b3f      	lsrs	r7, r7, #12
 800183e:	0d52      	lsrs	r2, r2, #21
 8001840:	0fc9      	lsrs	r1, r1, #31
 8001842:	0d5b      	lsrs	r3, r3, #21
 8001844:	0fc0      	lsrs	r0, r0, #31
 8001846:	42aa      	cmp	r2, r5
 8001848:	d021      	beq.n	800188e <__gedf2+0x72>
 800184a:	42ab      	cmp	r3, r5
 800184c:	d013      	beq.n	8001876 <__gedf2+0x5a>
 800184e:	2a00      	cmp	r2, #0
 8001850:	d122      	bne.n	8001898 <__gedf2+0x7c>
 8001852:	433c      	orrs	r4, r7
 8001854:	2b00      	cmp	r3, #0
 8001856:	d102      	bne.n	800185e <__gedf2+0x42>
 8001858:	464d      	mov	r5, r9
 800185a:	432e      	orrs	r6, r5
 800185c:	d022      	beq.n	80018a4 <__gedf2+0x88>
 800185e:	2c00      	cmp	r4, #0
 8001860:	d010      	beq.n	8001884 <__gedf2+0x68>
 8001862:	4281      	cmp	r1, r0
 8001864:	d022      	beq.n	80018ac <__gedf2+0x90>
 8001866:	2002      	movs	r0, #2
 8001868:	3901      	subs	r1, #1
 800186a:	4008      	ands	r0, r1
 800186c:	3801      	subs	r0, #1
 800186e:	bcc0      	pop	{r6, r7}
 8001870:	46b9      	mov	r9, r7
 8001872:	46b0      	mov	r8, r6
 8001874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001876:	464d      	mov	r5, r9
 8001878:	432e      	orrs	r6, r5
 800187a:	d129      	bne.n	80018d0 <__gedf2+0xb4>
 800187c:	2a00      	cmp	r2, #0
 800187e:	d1f0      	bne.n	8001862 <__gedf2+0x46>
 8001880:	433c      	orrs	r4, r7
 8001882:	d1ee      	bne.n	8001862 <__gedf2+0x46>
 8001884:	2800      	cmp	r0, #0
 8001886:	d1f2      	bne.n	800186e <__gedf2+0x52>
 8001888:	2001      	movs	r0, #1
 800188a:	4240      	negs	r0, r0
 800188c:	e7ef      	b.n	800186e <__gedf2+0x52>
 800188e:	003d      	movs	r5, r7
 8001890:	4325      	orrs	r5, r4
 8001892:	d11d      	bne.n	80018d0 <__gedf2+0xb4>
 8001894:	4293      	cmp	r3, r2
 8001896:	d0ee      	beq.n	8001876 <__gedf2+0x5a>
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1e2      	bne.n	8001862 <__gedf2+0x46>
 800189c:	464c      	mov	r4, r9
 800189e:	4326      	orrs	r6, r4
 80018a0:	d1df      	bne.n	8001862 <__gedf2+0x46>
 80018a2:	e7e0      	b.n	8001866 <__gedf2+0x4a>
 80018a4:	2000      	movs	r0, #0
 80018a6:	2c00      	cmp	r4, #0
 80018a8:	d0e1      	beq.n	800186e <__gedf2+0x52>
 80018aa:	e7dc      	b.n	8001866 <__gedf2+0x4a>
 80018ac:	429a      	cmp	r2, r3
 80018ae:	dc0a      	bgt.n	80018c6 <__gedf2+0xaa>
 80018b0:	dbe8      	blt.n	8001884 <__gedf2+0x68>
 80018b2:	454f      	cmp	r7, r9
 80018b4:	d8d7      	bhi.n	8001866 <__gedf2+0x4a>
 80018b6:	d00e      	beq.n	80018d6 <__gedf2+0xba>
 80018b8:	2000      	movs	r0, #0
 80018ba:	454f      	cmp	r7, r9
 80018bc:	d2d7      	bcs.n	800186e <__gedf2+0x52>
 80018be:	2900      	cmp	r1, #0
 80018c0:	d0e2      	beq.n	8001888 <__gedf2+0x6c>
 80018c2:	0008      	movs	r0, r1
 80018c4:	e7d3      	b.n	800186e <__gedf2+0x52>
 80018c6:	4243      	negs	r3, r0
 80018c8:	4158      	adcs	r0, r3
 80018ca:	0040      	lsls	r0, r0, #1
 80018cc:	3801      	subs	r0, #1
 80018ce:	e7ce      	b.n	800186e <__gedf2+0x52>
 80018d0:	2002      	movs	r0, #2
 80018d2:	4240      	negs	r0, r0
 80018d4:	e7cb      	b.n	800186e <__gedf2+0x52>
 80018d6:	45c4      	cmp	ip, r8
 80018d8:	d8c5      	bhi.n	8001866 <__gedf2+0x4a>
 80018da:	2000      	movs	r0, #0
 80018dc:	45c4      	cmp	ip, r8
 80018de:	d2c6      	bcs.n	800186e <__gedf2+0x52>
 80018e0:	e7ed      	b.n	80018be <__gedf2+0xa2>
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	000007ff 	.word	0x000007ff

080018e8 <__ledf2>:
 80018e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ea:	4647      	mov	r7, r8
 80018ec:	46ce      	mov	lr, r9
 80018ee:	0004      	movs	r4, r0
 80018f0:	0018      	movs	r0, r3
 80018f2:	0016      	movs	r6, r2
 80018f4:	031b      	lsls	r3, r3, #12
 80018f6:	0b1b      	lsrs	r3, r3, #12
 80018f8:	4d2c      	ldr	r5, [pc, #176]	; (80019ac <__ledf2+0xc4>)
 80018fa:	004a      	lsls	r2, r1, #1
 80018fc:	4699      	mov	r9, r3
 80018fe:	b580      	push	{r7, lr}
 8001900:	0043      	lsls	r3, r0, #1
 8001902:	030f      	lsls	r7, r1, #12
 8001904:	46a4      	mov	ip, r4
 8001906:	46b0      	mov	r8, r6
 8001908:	0b3f      	lsrs	r7, r7, #12
 800190a:	0d52      	lsrs	r2, r2, #21
 800190c:	0fc9      	lsrs	r1, r1, #31
 800190e:	0d5b      	lsrs	r3, r3, #21
 8001910:	0fc0      	lsrs	r0, r0, #31
 8001912:	42aa      	cmp	r2, r5
 8001914:	d00d      	beq.n	8001932 <__ledf2+0x4a>
 8001916:	42ab      	cmp	r3, r5
 8001918:	d010      	beq.n	800193c <__ledf2+0x54>
 800191a:	2a00      	cmp	r2, #0
 800191c:	d127      	bne.n	800196e <__ledf2+0x86>
 800191e:	433c      	orrs	r4, r7
 8001920:	2b00      	cmp	r3, #0
 8001922:	d111      	bne.n	8001948 <__ledf2+0x60>
 8001924:	464d      	mov	r5, r9
 8001926:	432e      	orrs	r6, r5
 8001928:	d10e      	bne.n	8001948 <__ledf2+0x60>
 800192a:	2000      	movs	r0, #0
 800192c:	2c00      	cmp	r4, #0
 800192e:	d015      	beq.n	800195c <__ledf2+0x74>
 8001930:	e00e      	b.n	8001950 <__ledf2+0x68>
 8001932:	003d      	movs	r5, r7
 8001934:	4325      	orrs	r5, r4
 8001936:	d110      	bne.n	800195a <__ledf2+0x72>
 8001938:	4293      	cmp	r3, r2
 800193a:	d118      	bne.n	800196e <__ledf2+0x86>
 800193c:	464d      	mov	r5, r9
 800193e:	432e      	orrs	r6, r5
 8001940:	d10b      	bne.n	800195a <__ledf2+0x72>
 8001942:	2a00      	cmp	r2, #0
 8001944:	d102      	bne.n	800194c <__ledf2+0x64>
 8001946:	433c      	orrs	r4, r7
 8001948:	2c00      	cmp	r4, #0
 800194a:	d00b      	beq.n	8001964 <__ledf2+0x7c>
 800194c:	4281      	cmp	r1, r0
 800194e:	d014      	beq.n	800197a <__ledf2+0x92>
 8001950:	2002      	movs	r0, #2
 8001952:	3901      	subs	r1, #1
 8001954:	4008      	ands	r0, r1
 8001956:	3801      	subs	r0, #1
 8001958:	e000      	b.n	800195c <__ledf2+0x74>
 800195a:	2002      	movs	r0, #2
 800195c:	bcc0      	pop	{r6, r7}
 800195e:	46b9      	mov	r9, r7
 8001960:	46b0      	mov	r8, r6
 8001962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001964:	2800      	cmp	r0, #0
 8001966:	d1f9      	bne.n	800195c <__ledf2+0x74>
 8001968:	2001      	movs	r0, #1
 800196a:	4240      	negs	r0, r0
 800196c:	e7f6      	b.n	800195c <__ledf2+0x74>
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1ec      	bne.n	800194c <__ledf2+0x64>
 8001972:	464c      	mov	r4, r9
 8001974:	4326      	orrs	r6, r4
 8001976:	d1e9      	bne.n	800194c <__ledf2+0x64>
 8001978:	e7ea      	b.n	8001950 <__ledf2+0x68>
 800197a:	429a      	cmp	r2, r3
 800197c:	dd04      	ble.n	8001988 <__ledf2+0xa0>
 800197e:	4243      	negs	r3, r0
 8001980:	4158      	adcs	r0, r3
 8001982:	0040      	lsls	r0, r0, #1
 8001984:	3801      	subs	r0, #1
 8001986:	e7e9      	b.n	800195c <__ledf2+0x74>
 8001988:	429a      	cmp	r2, r3
 800198a:	dbeb      	blt.n	8001964 <__ledf2+0x7c>
 800198c:	454f      	cmp	r7, r9
 800198e:	d8df      	bhi.n	8001950 <__ledf2+0x68>
 8001990:	d006      	beq.n	80019a0 <__ledf2+0xb8>
 8001992:	2000      	movs	r0, #0
 8001994:	454f      	cmp	r7, r9
 8001996:	d2e1      	bcs.n	800195c <__ledf2+0x74>
 8001998:	2900      	cmp	r1, #0
 800199a:	d0e5      	beq.n	8001968 <__ledf2+0x80>
 800199c:	0008      	movs	r0, r1
 800199e:	e7dd      	b.n	800195c <__ledf2+0x74>
 80019a0:	45c4      	cmp	ip, r8
 80019a2:	d8d5      	bhi.n	8001950 <__ledf2+0x68>
 80019a4:	2000      	movs	r0, #0
 80019a6:	45c4      	cmp	ip, r8
 80019a8:	d2d8      	bcs.n	800195c <__ledf2+0x74>
 80019aa:	e7f5      	b.n	8001998 <__ledf2+0xb0>
 80019ac:	000007ff 	.word	0x000007ff

080019b0 <__aeabi_dmul>:
 80019b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019b2:	4657      	mov	r7, sl
 80019b4:	464e      	mov	r6, r9
 80019b6:	4645      	mov	r5, r8
 80019b8:	46de      	mov	lr, fp
 80019ba:	b5e0      	push	{r5, r6, r7, lr}
 80019bc:	4698      	mov	r8, r3
 80019be:	030c      	lsls	r4, r1, #12
 80019c0:	004b      	lsls	r3, r1, #1
 80019c2:	0006      	movs	r6, r0
 80019c4:	4692      	mov	sl, r2
 80019c6:	b087      	sub	sp, #28
 80019c8:	0b24      	lsrs	r4, r4, #12
 80019ca:	0d5b      	lsrs	r3, r3, #21
 80019cc:	0fcf      	lsrs	r7, r1, #31
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d100      	bne.n	80019d4 <__aeabi_dmul+0x24>
 80019d2:	e15c      	b.n	8001c8e <__aeabi_dmul+0x2de>
 80019d4:	4ad9      	ldr	r2, [pc, #868]	; (8001d3c <__aeabi_dmul+0x38c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d100      	bne.n	80019dc <__aeabi_dmul+0x2c>
 80019da:	e175      	b.n	8001cc8 <__aeabi_dmul+0x318>
 80019dc:	0f42      	lsrs	r2, r0, #29
 80019de:	00e4      	lsls	r4, r4, #3
 80019e0:	4314      	orrs	r4, r2
 80019e2:	2280      	movs	r2, #128	; 0x80
 80019e4:	0412      	lsls	r2, r2, #16
 80019e6:	4314      	orrs	r4, r2
 80019e8:	4ad5      	ldr	r2, [pc, #852]	; (8001d40 <__aeabi_dmul+0x390>)
 80019ea:	00c5      	lsls	r5, r0, #3
 80019ec:	4694      	mov	ip, r2
 80019ee:	4463      	add	r3, ip
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	2300      	movs	r3, #0
 80019f4:	4699      	mov	r9, r3
 80019f6:	469b      	mov	fp, r3
 80019f8:	4643      	mov	r3, r8
 80019fa:	4642      	mov	r2, r8
 80019fc:	031e      	lsls	r6, r3, #12
 80019fe:	0fd2      	lsrs	r2, r2, #31
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	4650      	mov	r0, sl
 8001a04:	4690      	mov	r8, r2
 8001a06:	0b36      	lsrs	r6, r6, #12
 8001a08:	0d5b      	lsrs	r3, r3, #21
 8001a0a:	d100      	bne.n	8001a0e <__aeabi_dmul+0x5e>
 8001a0c:	e120      	b.n	8001c50 <__aeabi_dmul+0x2a0>
 8001a0e:	4acb      	ldr	r2, [pc, #812]	; (8001d3c <__aeabi_dmul+0x38c>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d100      	bne.n	8001a16 <__aeabi_dmul+0x66>
 8001a14:	e162      	b.n	8001cdc <__aeabi_dmul+0x32c>
 8001a16:	49ca      	ldr	r1, [pc, #808]	; (8001d40 <__aeabi_dmul+0x390>)
 8001a18:	0f42      	lsrs	r2, r0, #29
 8001a1a:	468c      	mov	ip, r1
 8001a1c:	9900      	ldr	r1, [sp, #0]
 8001a1e:	4463      	add	r3, ip
 8001a20:	00f6      	lsls	r6, r6, #3
 8001a22:	468c      	mov	ip, r1
 8001a24:	4316      	orrs	r6, r2
 8001a26:	2280      	movs	r2, #128	; 0x80
 8001a28:	449c      	add	ip, r3
 8001a2a:	0412      	lsls	r2, r2, #16
 8001a2c:	4663      	mov	r3, ip
 8001a2e:	4316      	orrs	r6, r2
 8001a30:	00c2      	lsls	r2, r0, #3
 8001a32:	2000      	movs	r0, #0
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	9900      	ldr	r1, [sp, #0]
 8001a38:	4643      	mov	r3, r8
 8001a3a:	3101      	adds	r1, #1
 8001a3c:	468c      	mov	ip, r1
 8001a3e:	4649      	mov	r1, r9
 8001a40:	407b      	eors	r3, r7
 8001a42:	9301      	str	r3, [sp, #4]
 8001a44:	290f      	cmp	r1, #15
 8001a46:	d826      	bhi.n	8001a96 <__aeabi_dmul+0xe6>
 8001a48:	4bbe      	ldr	r3, [pc, #760]	; (8001d44 <__aeabi_dmul+0x394>)
 8001a4a:	0089      	lsls	r1, r1, #2
 8001a4c:	5859      	ldr	r1, [r3, r1]
 8001a4e:	468f      	mov	pc, r1
 8001a50:	4643      	mov	r3, r8
 8001a52:	9301      	str	r3, [sp, #4]
 8001a54:	0034      	movs	r4, r6
 8001a56:	0015      	movs	r5, r2
 8001a58:	4683      	mov	fp, r0
 8001a5a:	465b      	mov	r3, fp
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d016      	beq.n	8001a8e <__aeabi_dmul+0xde>
 8001a60:	2b03      	cmp	r3, #3
 8001a62:	d100      	bne.n	8001a66 <__aeabi_dmul+0xb6>
 8001a64:	e203      	b.n	8001e6e <__aeabi_dmul+0x4be>
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d000      	beq.n	8001a6c <__aeabi_dmul+0xbc>
 8001a6a:	e0cd      	b.n	8001c08 <__aeabi_dmul+0x258>
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2400      	movs	r4, #0
 8001a70:	2500      	movs	r5, #0
 8001a72:	9b01      	ldr	r3, [sp, #4]
 8001a74:	0512      	lsls	r2, r2, #20
 8001a76:	4322      	orrs	r2, r4
 8001a78:	07db      	lsls	r3, r3, #31
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	0028      	movs	r0, r5
 8001a7e:	0011      	movs	r1, r2
 8001a80:	b007      	add	sp, #28
 8001a82:	bcf0      	pop	{r4, r5, r6, r7}
 8001a84:	46bb      	mov	fp, r7
 8001a86:	46b2      	mov	sl, r6
 8001a88:	46a9      	mov	r9, r5
 8001a8a:	46a0      	mov	r8, r4
 8001a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a8e:	2400      	movs	r4, #0
 8001a90:	2500      	movs	r5, #0
 8001a92:	4aaa      	ldr	r2, [pc, #680]	; (8001d3c <__aeabi_dmul+0x38c>)
 8001a94:	e7ed      	b.n	8001a72 <__aeabi_dmul+0xc2>
 8001a96:	0c28      	lsrs	r0, r5, #16
 8001a98:	042d      	lsls	r5, r5, #16
 8001a9a:	0c2d      	lsrs	r5, r5, #16
 8001a9c:	002b      	movs	r3, r5
 8001a9e:	0c11      	lsrs	r1, r2, #16
 8001aa0:	0412      	lsls	r2, r2, #16
 8001aa2:	0c12      	lsrs	r2, r2, #16
 8001aa4:	4353      	muls	r3, r2
 8001aa6:	4698      	mov	r8, r3
 8001aa8:	0013      	movs	r3, r2
 8001aaa:	002f      	movs	r7, r5
 8001aac:	4343      	muls	r3, r0
 8001aae:	4699      	mov	r9, r3
 8001ab0:	434f      	muls	r7, r1
 8001ab2:	444f      	add	r7, r9
 8001ab4:	46bb      	mov	fp, r7
 8001ab6:	4647      	mov	r7, r8
 8001ab8:	000b      	movs	r3, r1
 8001aba:	0c3f      	lsrs	r7, r7, #16
 8001abc:	46ba      	mov	sl, r7
 8001abe:	4343      	muls	r3, r0
 8001ac0:	44da      	add	sl, fp
 8001ac2:	9302      	str	r3, [sp, #8]
 8001ac4:	45d1      	cmp	r9, sl
 8001ac6:	d904      	bls.n	8001ad2 <__aeabi_dmul+0x122>
 8001ac8:	2780      	movs	r7, #128	; 0x80
 8001aca:	027f      	lsls	r7, r7, #9
 8001acc:	46b9      	mov	r9, r7
 8001ace:	444b      	add	r3, r9
 8001ad0:	9302      	str	r3, [sp, #8]
 8001ad2:	4653      	mov	r3, sl
 8001ad4:	0c1b      	lsrs	r3, r3, #16
 8001ad6:	469b      	mov	fp, r3
 8001ad8:	4653      	mov	r3, sl
 8001ada:	041f      	lsls	r7, r3, #16
 8001adc:	4643      	mov	r3, r8
 8001ade:	041b      	lsls	r3, r3, #16
 8001ae0:	0c1b      	lsrs	r3, r3, #16
 8001ae2:	4698      	mov	r8, r3
 8001ae4:	003b      	movs	r3, r7
 8001ae6:	4443      	add	r3, r8
 8001ae8:	9304      	str	r3, [sp, #16]
 8001aea:	0c33      	lsrs	r3, r6, #16
 8001aec:	0436      	lsls	r6, r6, #16
 8001aee:	0c36      	lsrs	r6, r6, #16
 8001af0:	4698      	mov	r8, r3
 8001af2:	0033      	movs	r3, r6
 8001af4:	4343      	muls	r3, r0
 8001af6:	4699      	mov	r9, r3
 8001af8:	4643      	mov	r3, r8
 8001afa:	4343      	muls	r3, r0
 8001afc:	002f      	movs	r7, r5
 8001afe:	469a      	mov	sl, r3
 8001b00:	4643      	mov	r3, r8
 8001b02:	4377      	muls	r7, r6
 8001b04:	435d      	muls	r5, r3
 8001b06:	0c38      	lsrs	r0, r7, #16
 8001b08:	444d      	add	r5, r9
 8001b0a:	1945      	adds	r5, r0, r5
 8001b0c:	45a9      	cmp	r9, r5
 8001b0e:	d903      	bls.n	8001b18 <__aeabi_dmul+0x168>
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	025b      	lsls	r3, r3, #9
 8001b14:	4699      	mov	r9, r3
 8001b16:	44ca      	add	sl, r9
 8001b18:	043f      	lsls	r7, r7, #16
 8001b1a:	0c28      	lsrs	r0, r5, #16
 8001b1c:	0c3f      	lsrs	r7, r7, #16
 8001b1e:	042d      	lsls	r5, r5, #16
 8001b20:	19ed      	adds	r5, r5, r7
 8001b22:	0c27      	lsrs	r7, r4, #16
 8001b24:	0424      	lsls	r4, r4, #16
 8001b26:	0c24      	lsrs	r4, r4, #16
 8001b28:	0003      	movs	r3, r0
 8001b2a:	0020      	movs	r0, r4
 8001b2c:	4350      	muls	r0, r2
 8001b2e:	437a      	muls	r2, r7
 8001b30:	4691      	mov	r9, r2
 8001b32:	003a      	movs	r2, r7
 8001b34:	4453      	add	r3, sl
 8001b36:	9305      	str	r3, [sp, #20]
 8001b38:	0c03      	lsrs	r3, r0, #16
 8001b3a:	469a      	mov	sl, r3
 8001b3c:	434a      	muls	r2, r1
 8001b3e:	4361      	muls	r1, r4
 8001b40:	4449      	add	r1, r9
 8001b42:	4451      	add	r1, sl
 8001b44:	44ab      	add	fp, r5
 8001b46:	4589      	cmp	r9, r1
 8001b48:	d903      	bls.n	8001b52 <__aeabi_dmul+0x1a2>
 8001b4a:	2380      	movs	r3, #128	; 0x80
 8001b4c:	025b      	lsls	r3, r3, #9
 8001b4e:	4699      	mov	r9, r3
 8001b50:	444a      	add	r2, r9
 8001b52:	0400      	lsls	r0, r0, #16
 8001b54:	0c0b      	lsrs	r3, r1, #16
 8001b56:	0c00      	lsrs	r0, r0, #16
 8001b58:	0409      	lsls	r1, r1, #16
 8001b5a:	1809      	adds	r1, r1, r0
 8001b5c:	0020      	movs	r0, r4
 8001b5e:	4699      	mov	r9, r3
 8001b60:	4643      	mov	r3, r8
 8001b62:	4370      	muls	r0, r6
 8001b64:	435c      	muls	r4, r3
 8001b66:	437e      	muls	r6, r7
 8001b68:	435f      	muls	r7, r3
 8001b6a:	0c03      	lsrs	r3, r0, #16
 8001b6c:	4698      	mov	r8, r3
 8001b6e:	19a4      	adds	r4, r4, r6
 8001b70:	4444      	add	r4, r8
 8001b72:	444a      	add	r2, r9
 8001b74:	9703      	str	r7, [sp, #12]
 8001b76:	42a6      	cmp	r6, r4
 8001b78:	d904      	bls.n	8001b84 <__aeabi_dmul+0x1d4>
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	025b      	lsls	r3, r3, #9
 8001b7e:	4698      	mov	r8, r3
 8001b80:	4447      	add	r7, r8
 8001b82:	9703      	str	r7, [sp, #12]
 8001b84:	0423      	lsls	r3, r4, #16
 8001b86:	9e02      	ldr	r6, [sp, #8]
 8001b88:	469a      	mov	sl, r3
 8001b8a:	9b05      	ldr	r3, [sp, #20]
 8001b8c:	445e      	add	r6, fp
 8001b8e:	4698      	mov	r8, r3
 8001b90:	42ae      	cmp	r6, r5
 8001b92:	41ad      	sbcs	r5, r5
 8001b94:	1876      	adds	r6, r6, r1
 8001b96:	428e      	cmp	r6, r1
 8001b98:	4189      	sbcs	r1, r1
 8001b9a:	0400      	lsls	r0, r0, #16
 8001b9c:	0c00      	lsrs	r0, r0, #16
 8001b9e:	4450      	add	r0, sl
 8001ba0:	4440      	add	r0, r8
 8001ba2:	426d      	negs	r5, r5
 8001ba4:	1947      	adds	r7, r0, r5
 8001ba6:	46b8      	mov	r8, r7
 8001ba8:	4693      	mov	fp, r2
 8001baa:	4249      	negs	r1, r1
 8001bac:	4689      	mov	r9, r1
 8001bae:	44c3      	add	fp, r8
 8001bb0:	44d9      	add	r9, fp
 8001bb2:	4298      	cmp	r0, r3
 8001bb4:	4180      	sbcs	r0, r0
 8001bb6:	45a8      	cmp	r8, r5
 8001bb8:	41ad      	sbcs	r5, r5
 8001bba:	4593      	cmp	fp, r2
 8001bbc:	4192      	sbcs	r2, r2
 8001bbe:	4589      	cmp	r9, r1
 8001bc0:	4189      	sbcs	r1, r1
 8001bc2:	426d      	negs	r5, r5
 8001bc4:	4240      	negs	r0, r0
 8001bc6:	4328      	orrs	r0, r5
 8001bc8:	0c24      	lsrs	r4, r4, #16
 8001bca:	4252      	negs	r2, r2
 8001bcc:	4249      	negs	r1, r1
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	9b03      	ldr	r3, [sp, #12]
 8001bd2:	1900      	adds	r0, r0, r4
 8001bd4:	1880      	adds	r0, r0, r2
 8001bd6:	18c7      	adds	r7, r0, r3
 8001bd8:	464b      	mov	r3, r9
 8001bda:	0ddc      	lsrs	r4, r3, #23
 8001bdc:	9b04      	ldr	r3, [sp, #16]
 8001bde:	0275      	lsls	r5, r6, #9
 8001be0:	431d      	orrs	r5, r3
 8001be2:	1e6a      	subs	r2, r5, #1
 8001be4:	4195      	sbcs	r5, r2
 8001be6:	464b      	mov	r3, r9
 8001be8:	0df6      	lsrs	r6, r6, #23
 8001bea:	027f      	lsls	r7, r7, #9
 8001bec:	4335      	orrs	r5, r6
 8001bee:	025a      	lsls	r2, r3, #9
 8001bf0:	433c      	orrs	r4, r7
 8001bf2:	4315      	orrs	r5, r2
 8001bf4:	01fb      	lsls	r3, r7, #7
 8001bf6:	d400      	bmi.n	8001bfa <__aeabi_dmul+0x24a>
 8001bf8:	e11c      	b.n	8001e34 <__aeabi_dmul+0x484>
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	086a      	lsrs	r2, r5, #1
 8001bfe:	400d      	ands	r5, r1
 8001c00:	4315      	orrs	r5, r2
 8001c02:	07e2      	lsls	r2, r4, #31
 8001c04:	4315      	orrs	r5, r2
 8001c06:	0864      	lsrs	r4, r4, #1
 8001c08:	494f      	ldr	r1, [pc, #316]	; (8001d48 <__aeabi_dmul+0x398>)
 8001c0a:	4461      	add	r1, ip
 8001c0c:	2900      	cmp	r1, #0
 8001c0e:	dc00      	bgt.n	8001c12 <__aeabi_dmul+0x262>
 8001c10:	e0b0      	b.n	8001d74 <__aeabi_dmul+0x3c4>
 8001c12:	076b      	lsls	r3, r5, #29
 8001c14:	d009      	beq.n	8001c2a <__aeabi_dmul+0x27a>
 8001c16:	220f      	movs	r2, #15
 8001c18:	402a      	ands	r2, r5
 8001c1a:	2a04      	cmp	r2, #4
 8001c1c:	d005      	beq.n	8001c2a <__aeabi_dmul+0x27a>
 8001c1e:	1d2a      	adds	r2, r5, #4
 8001c20:	42aa      	cmp	r2, r5
 8001c22:	41ad      	sbcs	r5, r5
 8001c24:	426d      	negs	r5, r5
 8001c26:	1964      	adds	r4, r4, r5
 8001c28:	0015      	movs	r5, r2
 8001c2a:	01e3      	lsls	r3, r4, #7
 8001c2c:	d504      	bpl.n	8001c38 <__aeabi_dmul+0x288>
 8001c2e:	2180      	movs	r1, #128	; 0x80
 8001c30:	4a46      	ldr	r2, [pc, #280]	; (8001d4c <__aeabi_dmul+0x39c>)
 8001c32:	00c9      	lsls	r1, r1, #3
 8001c34:	4014      	ands	r4, r2
 8001c36:	4461      	add	r1, ip
 8001c38:	4a45      	ldr	r2, [pc, #276]	; (8001d50 <__aeabi_dmul+0x3a0>)
 8001c3a:	4291      	cmp	r1, r2
 8001c3c:	dd00      	ble.n	8001c40 <__aeabi_dmul+0x290>
 8001c3e:	e726      	b.n	8001a8e <__aeabi_dmul+0xde>
 8001c40:	0762      	lsls	r2, r4, #29
 8001c42:	08ed      	lsrs	r5, r5, #3
 8001c44:	0264      	lsls	r4, r4, #9
 8001c46:	0549      	lsls	r1, r1, #21
 8001c48:	4315      	orrs	r5, r2
 8001c4a:	0b24      	lsrs	r4, r4, #12
 8001c4c:	0d4a      	lsrs	r2, r1, #21
 8001c4e:	e710      	b.n	8001a72 <__aeabi_dmul+0xc2>
 8001c50:	4652      	mov	r2, sl
 8001c52:	4332      	orrs	r2, r6
 8001c54:	d100      	bne.n	8001c58 <__aeabi_dmul+0x2a8>
 8001c56:	e07f      	b.n	8001d58 <__aeabi_dmul+0x3a8>
 8001c58:	2e00      	cmp	r6, #0
 8001c5a:	d100      	bne.n	8001c5e <__aeabi_dmul+0x2ae>
 8001c5c:	e0dc      	b.n	8001e18 <__aeabi_dmul+0x468>
 8001c5e:	0030      	movs	r0, r6
 8001c60:	f000 fe1e 	bl	80028a0 <__clzsi2>
 8001c64:	0002      	movs	r2, r0
 8001c66:	3a0b      	subs	r2, #11
 8001c68:	231d      	movs	r3, #29
 8001c6a:	0001      	movs	r1, r0
 8001c6c:	1a9b      	subs	r3, r3, r2
 8001c6e:	4652      	mov	r2, sl
 8001c70:	3908      	subs	r1, #8
 8001c72:	40da      	lsrs	r2, r3
 8001c74:	408e      	lsls	r6, r1
 8001c76:	4316      	orrs	r6, r2
 8001c78:	4652      	mov	r2, sl
 8001c7a:	408a      	lsls	r2, r1
 8001c7c:	9b00      	ldr	r3, [sp, #0]
 8001c7e:	4935      	ldr	r1, [pc, #212]	; (8001d54 <__aeabi_dmul+0x3a4>)
 8001c80:	1a18      	subs	r0, r3, r0
 8001c82:	0003      	movs	r3, r0
 8001c84:	468c      	mov	ip, r1
 8001c86:	4463      	add	r3, ip
 8001c88:	2000      	movs	r0, #0
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	e6d3      	b.n	8001a36 <__aeabi_dmul+0x86>
 8001c8e:	0025      	movs	r5, r4
 8001c90:	4305      	orrs	r5, r0
 8001c92:	d04a      	beq.n	8001d2a <__aeabi_dmul+0x37a>
 8001c94:	2c00      	cmp	r4, #0
 8001c96:	d100      	bne.n	8001c9a <__aeabi_dmul+0x2ea>
 8001c98:	e0b0      	b.n	8001dfc <__aeabi_dmul+0x44c>
 8001c9a:	0020      	movs	r0, r4
 8001c9c:	f000 fe00 	bl	80028a0 <__clzsi2>
 8001ca0:	0001      	movs	r1, r0
 8001ca2:	0002      	movs	r2, r0
 8001ca4:	390b      	subs	r1, #11
 8001ca6:	231d      	movs	r3, #29
 8001ca8:	0010      	movs	r0, r2
 8001caa:	1a5b      	subs	r3, r3, r1
 8001cac:	0031      	movs	r1, r6
 8001cae:	0035      	movs	r5, r6
 8001cb0:	3808      	subs	r0, #8
 8001cb2:	4084      	lsls	r4, r0
 8001cb4:	40d9      	lsrs	r1, r3
 8001cb6:	4085      	lsls	r5, r0
 8001cb8:	430c      	orrs	r4, r1
 8001cba:	4826      	ldr	r0, [pc, #152]	; (8001d54 <__aeabi_dmul+0x3a4>)
 8001cbc:	1a83      	subs	r3, r0, r2
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	4699      	mov	r9, r3
 8001cc4:	469b      	mov	fp, r3
 8001cc6:	e697      	b.n	80019f8 <__aeabi_dmul+0x48>
 8001cc8:	0005      	movs	r5, r0
 8001cca:	4325      	orrs	r5, r4
 8001ccc:	d126      	bne.n	8001d1c <__aeabi_dmul+0x36c>
 8001cce:	2208      	movs	r2, #8
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	2400      	movs	r4, #0
 8001cd6:	4691      	mov	r9, r2
 8001cd8:	469b      	mov	fp, r3
 8001cda:	e68d      	b.n	80019f8 <__aeabi_dmul+0x48>
 8001cdc:	4652      	mov	r2, sl
 8001cde:	9b00      	ldr	r3, [sp, #0]
 8001ce0:	4332      	orrs	r2, r6
 8001ce2:	d110      	bne.n	8001d06 <__aeabi_dmul+0x356>
 8001ce4:	4915      	ldr	r1, [pc, #84]	; (8001d3c <__aeabi_dmul+0x38c>)
 8001ce6:	2600      	movs	r6, #0
 8001ce8:	468c      	mov	ip, r1
 8001cea:	4463      	add	r3, ip
 8001cec:	4649      	mov	r1, r9
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	4319      	orrs	r1, r3
 8001cf4:	4689      	mov	r9, r1
 8001cf6:	2002      	movs	r0, #2
 8001cf8:	e69d      	b.n	8001a36 <__aeabi_dmul+0x86>
 8001cfa:	465b      	mov	r3, fp
 8001cfc:	9701      	str	r7, [sp, #4]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d000      	beq.n	8001d04 <__aeabi_dmul+0x354>
 8001d02:	e6ad      	b.n	8001a60 <__aeabi_dmul+0xb0>
 8001d04:	e6c3      	b.n	8001a8e <__aeabi_dmul+0xde>
 8001d06:	4a0d      	ldr	r2, [pc, #52]	; (8001d3c <__aeabi_dmul+0x38c>)
 8001d08:	2003      	movs	r0, #3
 8001d0a:	4694      	mov	ip, r2
 8001d0c:	4463      	add	r3, ip
 8001d0e:	464a      	mov	r2, r9
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	2303      	movs	r3, #3
 8001d14:	431a      	orrs	r2, r3
 8001d16:	4691      	mov	r9, r2
 8001d18:	4652      	mov	r2, sl
 8001d1a:	e68c      	b.n	8001a36 <__aeabi_dmul+0x86>
 8001d1c:	220c      	movs	r2, #12
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	2303      	movs	r3, #3
 8001d22:	0005      	movs	r5, r0
 8001d24:	4691      	mov	r9, r2
 8001d26:	469b      	mov	fp, r3
 8001d28:	e666      	b.n	80019f8 <__aeabi_dmul+0x48>
 8001d2a:	2304      	movs	r3, #4
 8001d2c:	4699      	mov	r9, r3
 8001d2e:	2300      	movs	r3, #0
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	3301      	adds	r3, #1
 8001d34:	2400      	movs	r4, #0
 8001d36:	469b      	mov	fp, r3
 8001d38:	e65e      	b.n	80019f8 <__aeabi_dmul+0x48>
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	000007ff 	.word	0x000007ff
 8001d40:	fffffc01 	.word	0xfffffc01
 8001d44:	0800c388 	.word	0x0800c388
 8001d48:	000003ff 	.word	0x000003ff
 8001d4c:	feffffff 	.word	0xfeffffff
 8001d50:	000007fe 	.word	0x000007fe
 8001d54:	fffffc0d 	.word	0xfffffc0d
 8001d58:	4649      	mov	r1, r9
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	4319      	orrs	r1, r3
 8001d5e:	4689      	mov	r9, r1
 8001d60:	2600      	movs	r6, #0
 8001d62:	2001      	movs	r0, #1
 8001d64:	e667      	b.n	8001a36 <__aeabi_dmul+0x86>
 8001d66:	2300      	movs	r3, #0
 8001d68:	2480      	movs	r4, #128	; 0x80
 8001d6a:	2500      	movs	r5, #0
 8001d6c:	4a43      	ldr	r2, [pc, #268]	; (8001e7c <__aeabi_dmul+0x4cc>)
 8001d6e:	9301      	str	r3, [sp, #4]
 8001d70:	0324      	lsls	r4, r4, #12
 8001d72:	e67e      	b.n	8001a72 <__aeabi_dmul+0xc2>
 8001d74:	2001      	movs	r0, #1
 8001d76:	1a40      	subs	r0, r0, r1
 8001d78:	2838      	cmp	r0, #56	; 0x38
 8001d7a:	dd00      	ble.n	8001d7e <__aeabi_dmul+0x3ce>
 8001d7c:	e676      	b.n	8001a6c <__aeabi_dmul+0xbc>
 8001d7e:	281f      	cmp	r0, #31
 8001d80:	dd5b      	ble.n	8001e3a <__aeabi_dmul+0x48a>
 8001d82:	221f      	movs	r2, #31
 8001d84:	0023      	movs	r3, r4
 8001d86:	4252      	negs	r2, r2
 8001d88:	1a51      	subs	r1, r2, r1
 8001d8a:	40cb      	lsrs	r3, r1
 8001d8c:	0019      	movs	r1, r3
 8001d8e:	2820      	cmp	r0, #32
 8001d90:	d003      	beq.n	8001d9a <__aeabi_dmul+0x3ea>
 8001d92:	4a3b      	ldr	r2, [pc, #236]	; (8001e80 <__aeabi_dmul+0x4d0>)
 8001d94:	4462      	add	r2, ip
 8001d96:	4094      	lsls	r4, r2
 8001d98:	4325      	orrs	r5, r4
 8001d9a:	1e6a      	subs	r2, r5, #1
 8001d9c:	4195      	sbcs	r5, r2
 8001d9e:	002a      	movs	r2, r5
 8001da0:	430a      	orrs	r2, r1
 8001da2:	2107      	movs	r1, #7
 8001da4:	000d      	movs	r5, r1
 8001da6:	2400      	movs	r4, #0
 8001da8:	4015      	ands	r5, r2
 8001daa:	4211      	tst	r1, r2
 8001dac:	d05b      	beq.n	8001e66 <__aeabi_dmul+0x4b6>
 8001dae:	210f      	movs	r1, #15
 8001db0:	2400      	movs	r4, #0
 8001db2:	4011      	ands	r1, r2
 8001db4:	2904      	cmp	r1, #4
 8001db6:	d053      	beq.n	8001e60 <__aeabi_dmul+0x4b0>
 8001db8:	1d11      	adds	r1, r2, #4
 8001dba:	4291      	cmp	r1, r2
 8001dbc:	4192      	sbcs	r2, r2
 8001dbe:	4252      	negs	r2, r2
 8001dc0:	18a4      	adds	r4, r4, r2
 8001dc2:	000a      	movs	r2, r1
 8001dc4:	0223      	lsls	r3, r4, #8
 8001dc6:	d54b      	bpl.n	8001e60 <__aeabi_dmul+0x4b0>
 8001dc8:	2201      	movs	r2, #1
 8001dca:	2400      	movs	r4, #0
 8001dcc:	2500      	movs	r5, #0
 8001dce:	e650      	b.n	8001a72 <__aeabi_dmul+0xc2>
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	031b      	lsls	r3, r3, #12
 8001dd4:	421c      	tst	r4, r3
 8001dd6:	d009      	beq.n	8001dec <__aeabi_dmul+0x43c>
 8001dd8:	421e      	tst	r6, r3
 8001dda:	d107      	bne.n	8001dec <__aeabi_dmul+0x43c>
 8001ddc:	4333      	orrs	r3, r6
 8001dde:	031c      	lsls	r4, r3, #12
 8001de0:	4643      	mov	r3, r8
 8001de2:	0015      	movs	r5, r2
 8001de4:	0b24      	lsrs	r4, r4, #12
 8001de6:	4a25      	ldr	r2, [pc, #148]	; (8001e7c <__aeabi_dmul+0x4cc>)
 8001de8:	9301      	str	r3, [sp, #4]
 8001dea:	e642      	b.n	8001a72 <__aeabi_dmul+0xc2>
 8001dec:	2280      	movs	r2, #128	; 0x80
 8001dee:	0312      	lsls	r2, r2, #12
 8001df0:	4314      	orrs	r4, r2
 8001df2:	0324      	lsls	r4, r4, #12
 8001df4:	4a21      	ldr	r2, [pc, #132]	; (8001e7c <__aeabi_dmul+0x4cc>)
 8001df6:	0b24      	lsrs	r4, r4, #12
 8001df8:	9701      	str	r7, [sp, #4]
 8001dfa:	e63a      	b.n	8001a72 <__aeabi_dmul+0xc2>
 8001dfc:	f000 fd50 	bl	80028a0 <__clzsi2>
 8001e00:	0001      	movs	r1, r0
 8001e02:	0002      	movs	r2, r0
 8001e04:	3115      	adds	r1, #21
 8001e06:	3220      	adds	r2, #32
 8001e08:	291c      	cmp	r1, #28
 8001e0a:	dc00      	bgt.n	8001e0e <__aeabi_dmul+0x45e>
 8001e0c:	e74b      	b.n	8001ca6 <__aeabi_dmul+0x2f6>
 8001e0e:	0034      	movs	r4, r6
 8001e10:	3808      	subs	r0, #8
 8001e12:	2500      	movs	r5, #0
 8001e14:	4084      	lsls	r4, r0
 8001e16:	e750      	b.n	8001cba <__aeabi_dmul+0x30a>
 8001e18:	f000 fd42 	bl	80028a0 <__clzsi2>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	001a      	movs	r2, r3
 8001e20:	3215      	adds	r2, #21
 8001e22:	3020      	adds	r0, #32
 8001e24:	2a1c      	cmp	r2, #28
 8001e26:	dc00      	bgt.n	8001e2a <__aeabi_dmul+0x47a>
 8001e28:	e71e      	b.n	8001c68 <__aeabi_dmul+0x2b8>
 8001e2a:	4656      	mov	r6, sl
 8001e2c:	3b08      	subs	r3, #8
 8001e2e:	2200      	movs	r2, #0
 8001e30:	409e      	lsls	r6, r3
 8001e32:	e723      	b.n	8001c7c <__aeabi_dmul+0x2cc>
 8001e34:	9b00      	ldr	r3, [sp, #0]
 8001e36:	469c      	mov	ip, r3
 8001e38:	e6e6      	b.n	8001c08 <__aeabi_dmul+0x258>
 8001e3a:	4912      	ldr	r1, [pc, #72]	; (8001e84 <__aeabi_dmul+0x4d4>)
 8001e3c:	0022      	movs	r2, r4
 8001e3e:	4461      	add	r1, ip
 8001e40:	002e      	movs	r6, r5
 8001e42:	408d      	lsls	r5, r1
 8001e44:	408a      	lsls	r2, r1
 8001e46:	40c6      	lsrs	r6, r0
 8001e48:	1e69      	subs	r1, r5, #1
 8001e4a:	418d      	sbcs	r5, r1
 8001e4c:	4332      	orrs	r2, r6
 8001e4e:	432a      	orrs	r2, r5
 8001e50:	40c4      	lsrs	r4, r0
 8001e52:	0753      	lsls	r3, r2, #29
 8001e54:	d0b6      	beq.n	8001dc4 <__aeabi_dmul+0x414>
 8001e56:	210f      	movs	r1, #15
 8001e58:	4011      	ands	r1, r2
 8001e5a:	2904      	cmp	r1, #4
 8001e5c:	d1ac      	bne.n	8001db8 <__aeabi_dmul+0x408>
 8001e5e:	e7b1      	b.n	8001dc4 <__aeabi_dmul+0x414>
 8001e60:	0765      	lsls	r5, r4, #29
 8001e62:	0264      	lsls	r4, r4, #9
 8001e64:	0b24      	lsrs	r4, r4, #12
 8001e66:	08d2      	lsrs	r2, r2, #3
 8001e68:	4315      	orrs	r5, r2
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	e601      	b.n	8001a72 <__aeabi_dmul+0xc2>
 8001e6e:	2280      	movs	r2, #128	; 0x80
 8001e70:	0312      	lsls	r2, r2, #12
 8001e72:	4314      	orrs	r4, r2
 8001e74:	0324      	lsls	r4, r4, #12
 8001e76:	4a01      	ldr	r2, [pc, #4]	; (8001e7c <__aeabi_dmul+0x4cc>)
 8001e78:	0b24      	lsrs	r4, r4, #12
 8001e7a:	e5fa      	b.n	8001a72 <__aeabi_dmul+0xc2>
 8001e7c:	000007ff 	.word	0x000007ff
 8001e80:	0000043e 	.word	0x0000043e
 8001e84:	0000041e 	.word	0x0000041e

08001e88 <__aeabi_dsub>:
 8001e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e8a:	4657      	mov	r7, sl
 8001e8c:	464e      	mov	r6, r9
 8001e8e:	4645      	mov	r5, r8
 8001e90:	46de      	mov	lr, fp
 8001e92:	b5e0      	push	{r5, r6, r7, lr}
 8001e94:	001e      	movs	r6, r3
 8001e96:	0017      	movs	r7, r2
 8001e98:	004a      	lsls	r2, r1, #1
 8001e9a:	030b      	lsls	r3, r1, #12
 8001e9c:	0d52      	lsrs	r2, r2, #21
 8001e9e:	0a5b      	lsrs	r3, r3, #9
 8001ea0:	4690      	mov	r8, r2
 8001ea2:	0f42      	lsrs	r2, r0, #29
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	0fcd      	lsrs	r5, r1, #31
 8001ea8:	4ccd      	ldr	r4, [pc, #820]	; (80021e0 <__aeabi_dsub+0x358>)
 8001eaa:	0331      	lsls	r1, r6, #12
 8001eac:	00c3      	lsls	r3, r0, #3
 8001eae:	4694      	mov	ip, r2
 8001eb0:	0070      	lsls	r0, r6, #1
 8001eb2:	0f7a      	lsrs	r2, r7, #29
 8001eb4:	0a49      	lsrs	r1, r1, #9
 8001eb6:	00ff      	lsls	r7, r7, #3
 8001eb8:	469a      	mov	sl, r3
 8001eba:	46b9      	mov	r9, r7
 8001ebc:	0d40      	lsrs	r0, r0, #21
 8001ebe:	0ff6      	lsrs	r6, r6, #31
 8001ec0:	4311      	orrs	r1, r2
 8001ec2:	42a0      	cmp	r0, r4
 8001ec4:	d100      	bne.n	8001ec8 <__aeabi_dsub+0x40>
 8001ec6:	e0b1      	b.n	800202c <__aeabi_dsub+0x1a4>
 8001ec8:	2201      	movs	r2, #1
 8001eca:	4056      	eors	r6, r2
 8001ecc:	46b3      	mov	fp, r6
 8001ece:	42b5      	cmp	r5, r6
 8001ed0:	d100      	bne.n	8001ed4 <__aeabi_dsub+0x4c>
 8001ed2:	e088      	b.n	8001fe6 <__aeabi_dsub+0x15e>
 8001ed4:	4642      	mov	r2, r8
 8001ed6:	1a12      	subs	r2, r2, r0
 8001ed8:	2a00      	cmp	r2, #0
 8001eda:	dc00      	bgt.n	8001ede <__aeabi_dsub+0x56>
 8001edc:	e0ae      	b.n	800203c <__aeabi_dsub+0x1b4>
 8001ede:	2800      	cmp	r0, #0
 8001ee0:	d100      	bne.n	8001ee4 <__aeabi_dsub+0x5c>
 8001ee2:	e0c1      	b.n	8002068 <__aeabi_dsub+0x1e0>
 8001ee4:	48be      	ldr	r0, [pc, #760]	; (80021e0 <__aeabi_dsub+0x358>)
 8001ee6:	4580      	cmp	r8, r0
 8001ee8:	d100      	bne.n	8001eec <__aeabi_dsub+0x64>
 8001eea:	e151      	b.n	8002190 <__aeabi_dsub+0x308>
 8001eec:	2080      	movs	r0, #128	; 0x80
 8001eee:	0400      	lsls	r0, r0, #16
 8001ef0:	4301      	orrs	r1, r0
 8001ef2:	2a38      	cmp	r2, #56	; 0x38
 8001ef4:	dd00      	ble.n	8001ef8 <__aeabi_dsub+0x70>
 8001ef6:	e17b      	b.n	80021f0 <__aeabi_dsub+0x368>
 8001ef8:	2a1f      	cmp	r2, #31
 8001efa:	dd00      	ble.n	8001efe <__aeabi_dsub+0x76>
 8001efc:	e1ee      	b.n	80022dc <__aeabi_dsub+0x454>
 8001efe:	2020      	movs	r0, #32
 8001f00:	003e      	movs	r6, r7
 8001f02:	1a80      	subs	r0, r0, r2
 8001f04:	000c      	movs	r4, r1
 8001f06:	40d6      	lsrs	r6, r2
 8001f08:	40d1      	lsrs	r1, r2
 8001f0a:	4087      	lsls	r7, r0
 8001f0c:	4662      	mov	r2, ip
 8001f0e:	4084      	lsls	r4, r0
 8001f10:	1a52      	subs	r2, r2, r1
 8001f12:	1e78      	subs	r0, r7, #1
 8001f14:	4187      	sbcs	r7, r0
 8001f16:	4694      	mov	ip, r2
 8001f18:	4334      	orrs	r4, r6
 8001f1a:	4327      	orrs	r7, r4
 8001f1c:	1bdc      	subs	r4, r3, r7
 8001f1e:	42a3      	cmp	r3, r4
 8001f20:	419b      	sbcs	r3, r3
 8001f22:	4662      	mov	r2, ip
 8001f24:	425b      	negs	r3, r3
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	4699      	mov	r9, r3
 8001f2a:	464b      	mov	r3, r9
 8001f2c:	021b      	lsls	r3, r3, #8
 8001f2e:	d400      	bmi.n	8001f32 <__aeabi_dsub+0xaa>
 8001f30:	e118      	b.n	8002164 <__aeabi_dsub+0x2dc>
 8001f32:	464b      	mov	r3, r9
 8001f34:	0258      	lsls	r0, r3, #9
 8001f36:	0a43      	lsrs	r3, r0, #9
 8001f38:	4699      	mov	r9, r3
 8001f3a:	464b      	mov	r3, r9
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d100      	bne.n	8001f42 <__aeabi_dsub+0xba>
 8001f40:	e137      	b.n	80021b2 <__aeabi_dsub+0x32a>
 8001f42:	4648      	mov	r0, r9
 8001f44:	f000 fcac 	bl	80028a0 <__clzsi2>
 8001f48:	0001      	movs	r1, r0
 8001f4a:	3908      	subs	r1, #8
 8001f4c:	2320      	movs	r3, #32
 8001f4e:	0022      	movs	r2, r4
 8001f50:	4648      	mov	r0, r9
 8001f52:	1a5b      	subs	r3, r3, r1
 8001f54:	40da      	lsrs	r2, r3
 8001f56:	4088      	lsls	r0, r1
 8001f58:	408c      	lsls	r4, r1
 8001f5a:	4643      	mov	r3, r8
 8001f5c:	4310      	orrs	r0, r2
 8001f5e:	4588      	cmp	r8, r1
 8001f60:	dd00      	ble.n	8001f64 <__aeabi_dsub+0xdc>
 8001f62:	e136      	b.n	80021d2 <__aeabi_dsub+0x34a>
 8001f64:	1ac9      	subs	r1, r1, r3
 8001f66:	1c4b      	adds	r3, r1, #1
 8001f68:	2b1f      	cmp	r3, #31
 8001f6a:	dd00      	ble.n	8001f6e <__aeabi_dsub+0xe6>
 8001f6c:	e0ea      	b.n	8002144 <__aeabi_dsub+0x2bc>
 8001f6e:	2220      	movs	r2, #32
 8001f70:	0026      	movs	r6, r4
 8001f72:	1ad2      	subs	r2, r2, r3
 8001f74:	0001      	movs	r1, r0
 8001f76:	4094      	lsls	r4, r2
 8001f78:	40de      	lsrs	r6, r3
 8001f7a:	40d8      	lsrs	r0, r3
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	4091      	lsls	r1, r2
 8001f80:	1e62      	subs	r2, r4, #1
 8001f82:	4194      	sbcs	r4, r2
 8001f84:	4681      	mov	r9, r0
 8001f86:	4698      	mov	r8, r3
 8001f88:	4331      	orrs	r1, r6
 8001f8a:	430c      	orrs	r4, r1
 8001f8c:	0763      	lsls	r3, r4, #29
 8001f8e:	d009      	beq.n	8001fa4 <__aeabi_dsub+0x11c>
 8001f90:	230f      	movs	r3, #15
 8001f92:	4023      	ands	r3, r4
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d005      	beq.n	8001fa4 <__aeabi_dsub+0x11c>
 8001f98:	1d23      	adds	r3, r4, #4
 8001f9a:	42a3      	cmp	r3, r4
 8001f9c:	41a4      	sbcs	r4, r4
 8001f9e:	4264      	negs	r4, r4
 8001fa0:	44a1      	add	r9, r4
 8001fa2:	001c      	movs	r4, r3
 8001fa4:	464b      	mov	r3, r9
 8001fa6:	021b      	lsls	r3, r3, #8
 8001fa8:	d400      	bmi.n	8001fac <__aeabi_dsub+0x124>
 8001faa:	e0de      	b.n	800216a <__aeabi_dsub+0x2e2>
 8001fac:	4641      	mov	r1, r8
 8001fae:	4b8c      	ldr	r3, [pc, #560]	; (80021e0 <__aeabi_dsub+0x358>)
 8001fb0:	3101      	adds	r1, #1
 8001fb2:	4299      	cmp	r1, r3
 8001fb4:	d100      	bne.n	8001fb8 <__aeabi_dsub+0x130>
 8001fb6:	e0e7      	b.n	8002188 <__aeabi_dsub+0x300>
 8001fb8:	464b      	mov	r3, r9
 8001fba:	488a      	ldr	r0, [pc, #552]	; (80021e4 <__aeabi_dsub+0x35c>)
 8001fbc:	08e4      	lsrs	r4, r4, #3
 8001fbe:	4003      	ands	r3, r0
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	0549      	lsls	r1, r1, #21
 8001fc4:	075b      	lsls	r3, r3, #29
 8001fc6:	0240      	lsls	r0, r0, #9
 8001fc8:	4323      	orrs	r3, r4
 8001fca:	0d4a      	lsrs	r2, r1, #21
 8001fcc:	0b04      	lsrs	r4, r0, #12
 8001fce:	0512      	lsls	r2, r2, #20
 8001fd0:	07ed      	lsls	r5, r5, #31
 8001fd2:	4322      	orrs	r2, r4
 8001fd4:	432a      	orrs	r2, r5
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	0011      	movs	r1, r2
 8001fda:	bcf0      	pop	{r4, r5, r6, r7}
 8001fdc:	46bb      	mov	fp, r7
 8001fde:	46b2      	mov	sl, r6
 8001fe0:	46a9      	mov	r9, r5
 8001fe2:	46a0      	mov	r8, r4
 8001fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fe6:	4642      	mov	r2, r8
 8001fe8:	1a12      	subs	r2, r2, r0
 8001fea:	2a00      	cmp	r2, #0
 8001fec:	dd52      	ble.n	8002094 <__aeabi_dsub+0x20c>
 8001fee:	2800      	cmp	r0, #0
 8001ff0:	d100      	bne.n	8001ff4 <__aeabi_dsub+0x16c>
 8001ff2:	e09c      	b.n	800212e <__aeabi_dsub+0x2a6>
 8001ff4:	45a0      	cmp	r8, r4
 8001ff6:	d100      	bne.n	8001ffa <__aeabi_dsub+0x172>
 8001ff8:	e0ca      	b.n	8002190 <__aeabi_dsub+0x308>
 8001ffa:	2080      	movs	r0, #128	; 0x80
 8001ffc:	0400      	lsls	r0, r0, #16
 8001ffe:	4301      	orrs	r1, r0
 8002000:	2a38      	cmp	r2, #56	; 0x38
 8002002:	dd00      	ble.n	8002006 <__aeabi_dsub+0x17e>
 8002004:	e149      	b.n	800229a <__aeabi_dsub+0x412>
 8002006:	2a1f      	cmp	r2, #31
 8002008:	dc00      	bgt.n	800200c <__aeabi_dsub+0x184>
 800200a:	e197      	b.n	800233c <__aeabi_dsub+0x4b4>
 800200c:	0010      	movs	r0, r2
 800200e:	000e      	movs	r6, r1
 8002010:	3820      	subs	r0, #32
 8002012:	40c6      	lsrs	r6, r0
 8002014:	2a20      	cmp	r2, #32
 8002016:	d004      	beq.n	8002022 <__aeabi_dsub+0x19a>
 8002018:	2040      	movs	r0, #64	; 0x40
 800201a:	1a82      	subs	r2, r0, r2
 800201c:	4091      	lsls	r1, r2
 800201e:	430f      	orrs	r7, r1
 8002020:	46b9      	mov	r9, r7
 8002022:	464c      	mov	r4, r9
 8002024:	1e62      	subs	r2, r4, #1
 8002026:	4194      	sbcs	r4, r2
 8002028:	4334      	orrs	r4, r6
 800202a:	e13a      	b.n	80022a2 <__aeabi_dsub+0x41a>
 800202c:	000a      	movs	r2, r1
 800202e:	433a      	orrs	r2, r7
 8002030:	d028      	beq.n	8002084 <__aeabi_dsub+0x1fc>
 8002032:	46b3      	mov	fp, r6
 8002034:	42b5      	cmp	r5, r6
 8002036:	d02b      	beq.n	8002090 <__aeabi_dsub+0x208>
 8002038:	4a6b      	ldr	r2, [pc, #428]	; (80021e8 <__aeabi_dsub+0x360>)
 800203a:	4442      	add	r2, r8
 800203c:	2a00      	cmp	r2, #0
 800203e:	d05d      	beq.n	80020fc <__aeabi_dsub+0x274>
 8002040:	4642      	mov	r2, r8
 8002042:	4644      	mov	r4, r8
 8002044:	1a82      	subs	r2, r0, r2
 8002046:	2c00      	cmp	r4, #0
 8002048:	d000      	beq.n	800204c <__aeabi_dsub+0x1c4>
 800204a:	e0f5      	b.n	8002238 <__aeabi_dsub+0x3b0>
 800204c:	4665      	mov	r5, ip
 800204e:	431d      	orrs	r5, r3
 8002050:	d100      	bne.n	8002054 <__aeabi_dsub+0x1cc>
 8002052:	e19c      	b.n	800238e <__aeabi_dsub+0x506>
 8002054:	1e55      	subs	r5, r2, #1
 8002056:	2a01      	cmp	r2, #1
 8002058:	d100      	bne.n	800205c <__aeabi_dsub+0x1d4>
 800205a:	e1fb      	b.n	8002454 <__aeabi_dsub+0x5cc>
 800205c:	4c60      	ldr	r4, [pc, #384]	; (80021e0 <__aeabi_dsub+0x358>)
 800205e:	42a2      	cmp	r2, r4
 8002060:	d100      	bne.n	8002064 <__aeabi_dsub+0x1dc>
 8002062:	e1bd      	b.n	80023e0 <__aeabi_dsub+0x558>
 8002064:	002a      	movs	r2, r5
 8002066:	e0f0      	b.n	800224a <__aeabi_dsub+0x3c2>
 8002068:	0008      	movs	r0, r1
 800206a:	4338      	orrs	r0, r7
 800206c:	d100      	bne.n	8002070 <__aeabi_dsub+0x1e8>
 800206e:	e0c3      	b.n	80021f8 <__aeabi_dsub+0x370>
 8002070:	1e50      	subs	r0, r2, #1
 8002072:	2a01      	cmp	r2, #1
 8002074:	d100      	bne.n	8002078 <__aeabi_dsub+0x1f0>
 8002076:	e1a8      	b.n	80023ca <__aeabi_dsub+0x542>
 8002078:	4c59      	ldr	r4, [pc, #356]	; (80021e0 <__aeabi_dsub+0x358>)
 800207a:	42a2      	cmp	r2, r4
 800207c:	d100      	bne.n	8002080 <__aeabi_dsub+0x1f8>
 800207e:	e087      	b.n	8002190 <__aeabi_dsub+0x308>
 8002080:	0002      	movs	r2, r0
 8002082:	e736      	b.n	8001ef2 <__aeabi_dsub+0x6a>
 8002084:	2201      	movs	r2, #1
 8002086:	4056      	eors	r6, r2
 8002088:	46b3      	mov	fp, r6
 800208a:	42b5      	cmp	r5, r6
 800208c:	d000      	beq.n	8002090 <__aeabi_dsub+0x208>
 800208e:	e721      	b.n	8001ed4 <__aeabi_dsub+0x4c>
 8002090:	4a55      	ldr	r2, [pc, #340]	; (80021e8 <__aeabi_dsub+0x360>)
 8002092:	4442      	add	r2, r8
 8002094:	2a00      	cmp	r2, #0
 8002096:	d100      	bne.n	800209a <__aeabi_dsub+0x212>
 8002098:	e0b5      	b.n	8002206 <__aeabi_dsub+0x37e>
 800209a:	4642      	mov	r2, r8
 800209c:	4644      	mov	r4, r8
 800209e:	1a82      	subs	r2, r0, r2
 80020a0:	2c00      	cmp	r4, #0
 80020a2:	d100      	bne.n	80020a6 <__aeabi_dsub+0x21e>
 80020a4:	e138      	b.n	8002318 <__aeabi_dsub+0x490>
 80020a6:	4e4e      	ldr	r6, [pc, #312]	; (80021e0 <__aeabi_dsub+0x358>)
 80020a8:	42b0      	cmp	r0, r6
 80020aa:	d100      	bne.n	80020ae <__aeabi_dsub+0x226>
 80020ac:	e1de      	b.n	800246c <__aeabi_dsub+0x5e4>
 80020ae:	2680      	movs	r6, #128	; 0x80
 80020b0:	4664      	mov	r4, ip
 80020b2:	0436      	lsls	r6, r6, #16
 80020b4:	4334      	orrs	r4, r6
 80020b6:	46a4      	mov	ip, r4
 80020b8:	2a38      	cmp	r2, #56	; 0x38
 80020ba:	dd00      	ble.n	80020be <__aeabi_dsub+0x236>
 80020bc:	e196      	b.n	80023ec <__aeabi_dsub+0x564>
 80020be:	2a1f      	cmp	r2, #31
 80020c0:	dd00      	ble.n	80020c4 <__aeabi_dsub+0x23c>
 80020c2:	e224      	b.n	800250e <__aeabi_dsub+0x686>
 80020c4:	2620      	movs	r6, #32
 80020c6:	1ab4      	subs	r4, r6, r2
 80020c8:	46a2      	mov	sl, r4
 80020ca:	4664      	mov	r4, ip
 80020cc:	4656      	mov	r6, sl
 80020ce:	40b4      	lsls	r4, r6
 80020d0:	46a1      	mov	r9, r4
 80020d2:	001c      	movs	r4, r3
 80020d4:	464e      	mov	r6, r9
 80020d6:	40d4      	lsrs	r4, r2
 80020d8:	4326      	orrs	r6, r4
 80020da:	0034      	movs	r4, r6
 80020dc:	4656      	mov	r6, sl
 80020de:	40b3      	lsls	r3, r6
 80020e0:	1e5e      	subs	r6, r3, #1
 80020e2:	41b3      	sbcs	r3, r6
 80020e4:	431c      	orrs	r4, r3
 80020e6:	4663      	mov	r3, ip
 80020e8:	40d3      	lsrs	r3, r2
 80020ea:	18c9      	adds	r1, r1, r3
 80020ec:	19e4      	adds	r4, r4, r7
 80020ee:	42bc      	cmp	r4, r7
 80020f0:	41bf      	sbcs	r7, r7
 80020f2:	427f      	negs	r7, r7
 80020f4:	46b9      	mov	r9, r7
 80020f6:	4680      	mov	r8, r0
 80020f8:	4489      	add	r9, r1
 80020fa:	e0d8      	b.n	80022ae <__aeabi_dsub+0x426>
 80020fc:	4640      	mov	r0, r8
 80020fe:	4c3b      	ldr	r4, [pc, #236]	; (80021ec <__aeabi_dsub+0x364>)
 8002100:	3001      	adds	r0, #1
 8002102:	4220      	tst	r0, r4
 8002104:	d000      	beq.n	8002108 <__aeabi_dsub+0x280>
 8002106:	e0b4      	b.n	8002272 <__aeabi_dsub+0x3ea>
 8002108:	4640      	mov	r0, r8
 800210a:	2800      	cmp	r0, #0
 800210c:	d000      	beq.n	8002110 <__aeabi_dsub+0x288>
 800210e:	e144      	b.n	800239a <__aeabi_dsub+0x512>
 8002110:	4660      	mov	r0, ip
 8002112:	4318      	orrs	r0, r3
 8002114:	d100      	bne.n	8002118 <__aeabi_dsub+0x290>
 8002116:	e190      	b.n	800243a <__aeabi_dsub+0x5b2>
 8002118:	0008      	movs	r0, r1
 800211a:	4338      	orrs	r0, r7
 800211c:	d000      	beq.n	8002120 <__aeabi_dsub+0x298>
 800211e:	e1aa      	b.n	8002476 <__aeabi_dsub+0x5ee>
 8002120:	4661      	mov	r1, ip
 8002122:	08db      	lsrs	r3, r3, #3
 8002124:	0749      	lsls	r1, r1, #29
 8002126:	430b      	orrs	r3, r1
 8002128:	4661      	mov	r1, ip
 800212a:	08cc      	lsrs	r4, r1, #3
 800212c:	e027      	b.n	800217e <__aeabi_dsub+0x2f6>
 800212e:	0008      	movs	r0, r1
 8002130:	4338      	orrs	r0, r7
 8002132:	d061      	beq.n	80021f8 <__aeabi_dsub+0x370>
 8002134:	1e50      	subs	r0, r2, #1
 8002136:	2a01      	cmp	r2, #1
 8002138:	d100      	bne.n	800213c <__aeabi_dsub+0x2b4>
 800213a:	e139      	b.n	80023b0 <__aeabi_dsub+0x528>
 800213c:	42a2      	cmp	r2, r4
 800213e:	d027      	beq.n	8002190 <__aeabi_dsub+0x308>
 8002140:	0002      	movs	r2, r0
 8002142:	e75d      	b.n	8002000 <__aeabi_dsub+0x178>
 8002144:	0002      	movs	r2, r0
 8002146:	391f      	subs	r1, #31
 8002148:	40ca      	lsrs	r2, r1
 800214a:	0011      	movs	r1, r2
 800214c:	2b20      	cmp	r3, #32
 800214e:	d003      	beq.n	8002158 <__aeabi_dsub+0x2d0>
 8002150:	2240      	movs	r2, #64	; 0x40
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	4098      	lsls	r0, r3
 8002156:	4304      	orrs	r4, r0
 8002158:	1e63      	subs	r3, r4, #1
 800215a:	419c      	sbcs	r4, r3
 800215c:	2300      	movs	r3, #0
 800215e:	4699      	mov	r9, r3
 8002160:	4698      	mov	r8, r3
 8002162:	430c      	orrs	r4, r1
 8002164:	0763      	lsls	r3, r4, #29
 8002166:	d000      	beq.n	800216a <__aeabi_dsub+0x2e2>
 8002168:	e712      	b.n	8001f90 <__aeabi_dsub+0x108>
 800216a:	464b      	mov	r3, r9
 800216c:	464a      	mov	r2, r9
 800216e:	08e4      	lsrs	r4, r4, #3
 8002170:	075b      	lsls	r3, r3, #29
 8002172:	4323      	orrs	r3, r4
 8002174:	08d4      	lsrs	r4, r2, #3
 8002176:	4642      	mov	r2, r8
 8002178:	4919      	ldr	r1, [pc, #100]	; (80021e0 <__aeabi_dsub+0x358>)
 800217a:	428a      	cmp	r2, r1
 800217c:	d00e      	beq.n	800219c <__aeabi_dsub+0x314>
 800217e:	0324      	lsls	r4, r4, #12
 8002180:	0552      	lsls	r2, r2, #21
 8002182:	0b24      	lsrs	r4, r4, #12
 8002184:	0d52      	lsrs	r2, r2, #21
 8002186:	e722      	b.n	8001fce <__aeabi_dsub+0x146>
 8002188:	000a      	movs	r2, r1
 800218a:	2400      	movs	r4, #0
 800218c:	2300      	movs	r3, #0
 800218e:	e71e      	b.n	8001fce <__aeabi_dsub+0x146>
 8002190:	08db      	lsrs	r3, r3, #3
 8002192:	4662      	mov	r2, ip
 8002194:	0752      	lsls	r2, r2, #29
 8002196:	4313      	orrs	r3, r2
 8002198:	4662      	mov	r2, ip
 800219a:	08d4      	lsrs	r4, r2, #3
 800219c:	001a      	movs	r2, r3
 800219e:	4322      	orrs	r2, r4
 80021a0:	d100      	bne.n	80021a4 <__aeabi_dsub+0x31c>
 80021a2:	e1fc      	b.n	800259e <__aeabi_dsub+0x716>
 80021a4:	2280      	movs	r2, #128	; 0x80
 80021a6:	0312      	lsls	r2, r2, #12
 80021a8:	4314      	orrs	r4, r2
 80021aa:	0324      	lsls	r4, r4, #12
 80021ac:	4a0c      	ldr	r2, [pc, #48]	; (80021e0 <__aeabi_dsub+0x358>)
 80021ae:	0b24      	lsrs	r4, r4, #12
 80021b0:	e70d      	b.n	8001fce <__aeabi_dsub+0x146>
 80021b2:	0020      	movs	r0, r4
 80021b4:	f000 fb74 	bl	80028a0 <__clzsi2>
 80021b8:	0001      	movs	r1, r0
 80021ba:	3118      	adds	r1, #24
 80021bc:	291f      	cmp	r1, #31
 80021be:	dc00      	bgt.n	80021c2 <__aeabi_dsub+0x33a>
 80021c0:	e6c4      	b.n	8001f4c <__aeabi_dsub+0xc4>
 80021c2:	3808      	subs	r0, #8
 80021c4:	4084      	lsls	r4, r0
 80021c6:	4643      	mov	r3, r8
 80021c8:	0020      	movs	r0, r4
 80021ca:	2400      	movs	r4, #0
 80021cc:	4588      	cmp	r8, r1
 80021ce:	dc00      	bgt.n	80021d2 <__aeabi_dsub+0x34a>
 80021d0:	e6c8      	b.n	8001f64 <__aeabi_dsub+0xdc>
 80021d2:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <__aeabi_dsub+0x35c>)
 80021d4:	1a5b      	subs	r3, r3, r1
 80021d6:	4010      	ands	r0, r2
 80021d8:	4698      	mov	r8, r3
 80021da:	4681      	mov	r9, r0
 80021dc:	e6d6      	b.n	8001f8c <__aeabi_dsub+0x104>
 80021de:	46c0      	nop			; (mov r8, r8)
 80021e0:	000007ff 	.word	0x000007ff
 80021e4:	ff7fffff 	.word	0xff7fffff
 80021e8:	fffff801 	.word	0xfffff801
 80021ec:	000007fe 	.word	0x000007fe
 80021f0:	430f      	orrs	r7, r1
 80021f2:	1e7a      	subs	r2, r7, #1
 80021f4:	4197      	sbcs	r7, r2
 80021f6:	e691      	b.n	8001f1c <__aeabi_dsub+0x94>
 80021f8:	4661      	mov	r1, ip
 80021fa:	08db      	lsrs	r3, r3, #3
 80021fc:	0749      	lsls	r1, r1, #29
 80021fe:	430b      	orrs	r3, r1
 8002200:	4661      	mov	r1, ip
 8002202:	08cc      	lsrs	r4, r1, #3
 8002204:	e7b8      	b.n	8002178 <__aeabi_dsub+0x2f0>
 8002206:	4640      	mov	r0, r8
 8002208:	4cd3      	ldr	r4, [pc, #844]	; (8002558 <__aeabi_dsub+0x6d0>)
 800220a:	3001      	adds	r0, #1
 800220c:	4220      	tst	r0, r4
 800220e:	d000      	beq.n	8002212 <__aeabi_dsub+0x38a>
 8002210:	e0a2      	b.n	8002358 <__aeabi_dsub+0x4d0>
 8002212:	4640      	mov	r0, r8
 8002214:	2800      	cmp	r0, #0
 8002216:	d000      	beq.n	800221a <__aeabi_dsub+0x392>
 8002218:	e101      	b.n	800241e <__aeabi_dsub+0x596>
 800221a:	4660      	mov	r0, ip
 800221c:	4318      	orrs	r0, r3
 800221e:	d100      	bne.n	8002222 <__aeabi_dsub+0x39a>
 8002220:	e15e      	b.n	80024e0 <__aeabi_dsub+0x658>
 8002222:	0008      	movs	r0, r1
 8002224:	4338      	orrs	r0, r7
 8002226:	d000      	beq.n	800222a <__aeabi_dsub+0x3a2>
 8002228:	e15f      	b.n	80024ea <__aeabi_dsub+0x662>
 800222a:	4661      	mov	r1, ip
 800222c:	08db      	lsrs	r3, r3, #3
 800222e:	0749      	lsls	r1, r1, #29
 8002230:	430b      	orrs	r3, r1
 8002232:	4661      	mov	r1, ip
 8002234:	08cc      	lsrs	r4, r1, #3
 8002236:	e7a2      	b.n	800217e <__aeabi_dsub+0x2f6>
 8002238:	4dc8      	ldr	r5, [pc, #800]	; (800255c <__aeabi_dsub+0x6d4>)
 800223a:	42a8      	cmp	r0, r5
 800223c:	d100      	bne.n	8002240 <__aeabi_dsub+0x3b8>
 800223e:	e0cf      	b.n	80023e0 <__aeabi_dsub+0x558>
 8002240:	2580      	movs	r5, #128	; 0x80
 8002242:	4664      	mov	r4, ip
 8002244:	042d      	lsls	r5, r5, #16
 8002246:	432c      	orrs	r4, r5
 8002248:	46a4      	mov	ip, r4
 800224a:	2a38      	cmp	r2, #56	; 0x38
 800224c:	dc56      	bgt.n	80022fc <__aeabi_dsub+0x474>
 800224e:	2a1f      	cmp	r2, #31
 8002250:	dd00      	ble.n	8002254 <__aeabi_dsub+0x3cc>
 8002252:	e0d1      	b.n	80023f8 <__aeabi_dsub+0x570>
 8002254:	2520      	movs	r5, #32
 8002256:	001e      	movs	r6, r3
 8002258:	1aad      	subs	r5, r5, r2
 800225a:	4664      	mov	r4, ip
 800225c:	40ab      	lsls	r3, r5
 800225e:	40ac      	lsls	r4, r5
 8002260:	40d6      	lsrs	r6, r2
 8002262:	1e5d      	subs	r5, r3, #1
 8002264:	41ab      	sbcs	r3, r5
 8002266:	4334      	orrs	r4, r6
 8002268:	4323      	orrs	r3, r4
 800226a:	4664      	mov	r4, ip
 800226c:	40d4      	lsrs	r4, r2
 800226e:	1b09      	subs	r1, r1, r4
 8002270:	e049      	b.n	8002306 <__aeabi_dsub+0x47e>
 8002272:	4660      	mov	r0, ip
 8002274:	1bdc      	subs	r4, r3, r7
 8002276:	1a46      	subs	r6, r0, r1
 8002278:	42a3      	cmp	r3, r4
 800227a:	4180      	sbcs	r0, r0
 800227c:	4240      	negs	r0, r0
 800227e:	4681      	mov	r9, r0
 8002280:	0030      	movs	r0, r6
 8002282:	464e      	mov	r6, r9
 8002284:	1b80      	subs	r0, r0, r6
 8002286:	4681      	mov	r9, r0
 8002288:	0200      	lsls	r0, r0, #8
 800228a:	d476      	bmi.n	800237a <__aeabi_dsub+0x4f2>
 800228c:	464b      	mov	r3, r9
 800228e:	4323      	orrs	r3, r4
 8002290:	d000      	beq.n	8002294 <__aeabi_dsub+0x40c>
 8002292:	e652      	b.n	8001f3a <__aeabi_dsub+0xb2>
 8002294:	2400      	movs	r4, #0
 8002296:	2500      	movs	r5, #0
 8002298:	e771      	b.n	800217e <__aeabi_dsub+0x2f6>
 800229a:	4339      	orrs	r1, r7
 800229c:	000c      	movs	r4, r1
 800229e:	1e62      	subs	r2, r4, #1
 80022a0:	4194      	sbcs	r4, r2
 80022a2:	18e4      	adds	r4, r4, r3
 80022a4:	429c      	cmp	r4, r3
 80022a6:	419b      	sbcs	r3, r3
 80022a8:	425b      	negs	r3, r3
 80022aa:	4463      	add	r3, ip
 80022ac:	4699      	mov	r9, r3
 80022ae:	464b      	mov	r3, r9
 80022b0:	021b      	lsls	r3, r3, #8
 80022b2:	d400      	bmi.n	80022b6 <__aeabi_dsub+0x42e>
 80022b4:	e756      	b.n	8002164 <__aeabi_dsub+0x2dc>
 80022b6:	2301      	movs	r3, #1
 80022b8:	469c      	mov	ip, r3
 80022ba:	4ba8      	ldr	r3, [pc, #672]	; (800255c <__aeabi_dsub+0x6d4>)
 80022bc:	44e0      	add	r8, ip
 80022be:	4598      	cmp	r8, r3
 80022c0:	d038      	beq.n	8002334 <__aeabi_dsub+0x4ac>
 80022c2:	464b      	mov	r3, r9
 80022c4:	48a6      	ldr	r0, [pc, #664]	; (8002560 <__aeabi_dsub+0x6d8>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	4003      	ands	r3, r0
 80022ca:	0018      	movs	r0, r3
 80022cc:	0863      	lsrs	r3, r4, #1
 80022ce:	4014      	ands	r4, r2
 80022d0:	431c      	orrs	r4, r3
 80022d2:	07c3      	lsls	r3, r0, #31
 80022d4:	431c      	orrs	r4, r3
 80022d6:	0843      	lsrs	r3, r0, #1
 80022d8:	4699      	mov	r9, r3
 80022da:	e657      	b.n	8001f8c <__aeabi_dsub+0x104>
 80022dc:	0010      	movs	r0, r2
 80022de:	000e      	movs	r6, r1
 80022e0:	3820      	subs	r0, #32
 80022e2:	40c6      	lsrs	r6, r0
 80022e4:	2a20      	cmp	r2, #32
 80022e6:	d004      	beq.n	80022f2 <__aeabi_dsub+0x46a>
 80022e8:	2040      	movs	r0, #64	; 0x40
 80022ea:	1a82      	subs	r2, r0, r2
 80022ec:	4091      	lsls	r1, r2
 80022ee:	430f      	orrs	r7, r1
 80022f0:	46b9      	mov	r9, r7
 80022f2:	464f      	mov	r7, r9
 80022f4:	1e7a      	subs	r2, r7, #1
 80022f6:	4197      	sbcs	r7, r2
 80022f8:	4337      	orrs	r7, r6
 80022fa:	e60f      	b.n	8001f1c <__aeabi_dsub+0x94>
 80022fc:	4662      	mov	r2, ip
 80022fe:	431a      	orrs	r2, r3
 8002300:	0013      	movs	r3, r2
 8002302:	1e5a      	subs	r2, r3, #1
 8002304:	4193      	sbcs	r3, r2
 8002306:	1afc      	subs	r4, r7, r3
 8002308:	42a7      	cmp	r7, r4
 800230a:	41bf      	sbcs	r7, r7
 800230c:	427f      	negs	r7, r7
 800230e:	1bcb      	subs	r3, r1, r7
 8002310:	4699      	mov	r9, r3
 8002312:	465d      	mov	r5, fp
 8002314:	4680      	mov	r8, r0
 8002316:	e608      	b.n	8001f2a <__aeabi_dsub+0xa2>
 8002318:	4666      	mov	r6, ip
 800231a:	431e      	orrs	r6, r3
 800231c:	d100      	bne.n	8002320 <__aeabi_dsub+0x498>
 800231e:	e0be      	b.n	800249e <__aeabi_dsub+0x616>
 8002320:	1e56      	subs	r6, r2, #1
 8002322:	2a01      	cmp	r2, #1
 8002324:	d100      	bne.n	8002328 <__aeabi_dsub+0x4a0>
 8002326:	e109      	b.n	800253c <__aeabi_dsub+0x6b4>
 8002328:	4c8c      	ldr	r4, [pc, #560]	; (800255c <__aeabi_dsub+0x6d4>)
 800232a:	42a2      	cmp	r2, r4
 800232c:	d100      	bne.n	8002330 <__aeabi_dsub+0x4a8>
 800232e:	e119      	b.n	8002564 <__aeabi_dsub+0x6dc>
 8002330:	0032      	movs	r2, r6
 8002332:	e6c1      	b.n	80020b8 <__aeabi_dsub+0x230>
 8002334:	4642      	mov	r2, r8
 8002336:	2400      	movs	r4, #0
 8002338:	2300      	movs	r3, #0
 800233a:	e648      	b.n	8001fce <__aeabi_dsub+0x146>
 800233c:	2020      	movs	r0, #32
 800233e:	000c      	movs	r4, r1
 8002340:	1a80      	subs	r0, r0, r2
 8002342:	003e      	movs	r6, r7
 8002344:	4087      	lsls	r7, r0
 8002346:	4084      	lsls	r4, r0
 8002348:	40d6      	lsrs	r6, r2
 800234a:	1e78      	subs	r0, r7, #1
 800234c:	4187      	sbcs	r7, r0
 800234e:	40d1      	lsrs	r1, r2
 8002350:	4334      	orrs	r4, r6
 8002352:	433c      	orrs	r4, r7
 8002354:	448c      	add	ip, r1
 8002356:	e7a4      	b.n	80022a2 <__aeabi_dsub+0x41a>
 8002358:	4a80      	ldr	r2, [pc, #512]	; (800255c <__aeabi_dsub+0x6d4>)
 800235a:	4290      	cmp	r0, r2
 800235c:	d100      	bne.n	8002360 <__aeabi_dsub+0x4d8>
 800235e:	e0e9      	b.n	8002534 <__aeabi_dsub+0x6ac>
 8002360:	19df      	adds	r7, r3, r7
 8002362:	429f      	cmp	r7, r3
 8002364:	419b      	sbcs	r3, r3
 8002366:	4461      	add	r1, ip
 8002368:	425b      	negs	r3, r3
 800236a:	18c9      	adds	r1, r1, r3
 800236c:	07cc      	lsls	r4, r1, #31
 800236e:	087f      	lsrs	r7, r7, #1
 8002370:	084b      	lsrs	r3, r1, #1
 8002372:	4699      	mov	r9, r3
 8002374:	4680      	mov	r8, r0
 8002376:	433c      	orrs	r4, r7
 8002378:	e6f4      	b.n	8002164 <__aeabi_dsub+0x2dc>
 800237a:	1afc      	subs	r4, r7, r3
 800237c:	42a7      	cmp	r7, r4
 800237e:	41bf      	sbcs	r7, r7
 8002380:	4663      	mov	r3, ip
 8002382:	427f      	negs	r7, r7
 8002384:	1ac9      	subs	r1, r1, r3
 8002386:	1bcb      	subs	r3, r1, r7
 8002388:	4699      	mov	r9, r3
 800238a:	465d      	mov	r5, fp
 800238c:	e5d5      	b.n	8001f3a <__aeabi_dsub+0xb2>
 800238e:	08ff      	lsrs	r7, r7, #3
 8002390:	074b      	lsls	r3, r1, #29
 8002392:	465d      	mov	r5, fp
 8002394:	433b      	orrs	r3, r7
 8002396:	08cc      	lsrs	r4, r1, #3
 8002398:	e6ee      	b.n	8002178 <__aeabi_dsub+0x2f0>
 800239a:	4662      	mov	r2, ip
 800239c:	431a      	orrs	r2, r3
 800239e:	d000      	beq.n	80023a2 <__aeabi_dsub+0x51a>
 80023a0:	e082      	b.n	80024a8 <__aeabi_dsub+0x620>
 80023a2:	000b      	movs	r3, r1
 80023a4:	433b      	orrs	r3, r7
 80023a6:	d11b      	bne.n	80023e0 <__aeabi_dsub+0x558>
 80023a8:	2480      	movs	r4, #128	; 0x80
 80023aa:	2500      	movs	r5, #0
 80023ac:	0324      	lsls	r4, r4, #12
 80023ae:	e6f9      	b.n	80021a4 <__aeabi_dsub+0x31c>
 80023b0:	19dc      	adds	r4, r3, r7
 80023b2:	429c      	cmp	r4, r3
 80023b4:	419b      	sbcs	r3, r3
 80023b6:	4461      	add	r1, ip
 80023b8:	4689      	mov	r9, r1
 80023ba:	425b      	negs	r3, r3
 80023bc:	4499      	add	r9, r3
 80023be:	464b      	mov	r3, r9
 80023c0:	021b      	lsls	r3, r3, #8
 80023c2:	d444      	bmi.n	800244e <__aeabi_dsub+0x5c6>
 80023c4:	2301      	movs	r3, #1
 80023c6:	4698      	mov	r8, r3
 80023c8:	e6cc      	b.n	8002164 <__aeabi_dsub+0x2dc>
 80023ca:	1bdc      	subs	r4, r3, r7
 80023cc:	4662      	mov	r2, ip
 80023ce:	42a3      	cmp	r3, r4
 80023d0:	419b      	sbcs	r3, r3
 80023d2:	1a51      	subs	r1, r2, r1
 80023d4:	425b      	negs	r3, r3
 80023d6:	1acb      	subs	r3, r1, r3
 80023d8:	4699      	mov	r9, r3
 80023da:	2301      	movs	r3, #1
 80023dc:	4698      	mov	r8, r3
 80023de:	e5a4      	b.n	8001f2a <__aeabi_dsub+0xa2>
 80023e0:	08ff      	lsrs	r7, r7, #3
 80023e2:	074b      	lsls	r3, r1, #29
 80023e4:	465d      	mov	r5, fp
 80023e6:	433b      	orrs	r3, r7
 80023e8:	08cc      	lsrs	r4, r1, #3
 80023ea:	e6d7      	b.n	800219c <__aeabi_dsub+0x314>
 80023ec:	4662      	mov	r2, ip
 80023ee:	431a      	orrs	r2, r3
 80023f0:	0014      	movs	r4, r2
 80023f2:	1e63      	subs	r3, r4, #1
 80023f4:	419c      	sbcs	r4, r3
 80023f6:	e679      	b.n	80020ec <__aeabi_dsub+0x264>
 80023f8:	0015      	movs	r5, r2
 80023fa:	4664      	mov	r4, ip
 80023fc:	3d20      	subs	r5, #32
 80023fe:	40ec      	lsrs	r4, r5
 8002400:	46a0      	mov	r8, r4
 8002402:	2a20      	cmp	r2, #32
 8002404:	d005      	beq.n	8002412 <__aeabi_dsub+0x58a>
 8002406:	2540      	movs	r5, #64	; 0x40
 8002408:	4664      	mov	r4, ip
 800240a:	1aaa      	subs	r2, r5, r2
 800240c:	4094      	lsls	r4, r2
 800240e:	4323      	orrs	r3, r4
 8002410:	469a      	mov	sl, r3
 8002412:	4654      	mov	r4, sl
 8002414:	1e63      	subs	r3, r4, #1
 8002416:	419c      	sbcs	r4, r3
 8002418:	4643      	mov	r3, r8
 800241a:	4323      	orrs	r3, r4
 800241c:	e773      	b.n	8002306 <__aeabi_dsub+0x47e>
 800241e:	4662      	mov	r2, ip
 8002420:	431a      	orrs	r2, r3
 8002422:	d023      	beq.n	800246c <__aeabi_dsub+0x5e4>
 8002424:	000a      	movs	r2, r1
 8002426:	433a      	orrs	r2, r7
 8002428:	d000      	beq.n	800242c <__aeabi_dsub+0x5a4>
 800242a:	e0a0      	b.n	800256e <__aeabi_dsub+0x6e6>
 800242c:	4662      	mov	r2, ip
 800242e:	08db      	lsrs	r3, r3, #3
 8002430:	0752      	lsls	r2, r2, #29
 8002432:	4313      	orrs	r3, r2
 8002434:	4662      	mov	r2, ip
 8002436:	08d4      	lsrs	r4, r2, #3
 8002438:	e6b0      	b.n	800219c <__aeabi_dsub+0x314>
 800243a:	000b      	movs	r3, r1
 800243c:	433b      	orrs	r3, r7
 800243e:	d100      	bne.n	8002442 <__aeabi_dsub+0x5ba>
 8002440:	e728      	b.n	8002294 <__aeabi_dsub+0x40c>
 8002442:	08ff      	lsrs	r7, r7, #3
 8002444:	074b      	lsls	r3, r1, #29
 8002446:	465d      	mov	r5, fp
 8002448:	433b      	orrs	r3, r7
 800244a:	08cc      	lsrs	r4, r1, #3
 800244c:	e697      	b.n	800217e <__aeabi_dsub+0x2f6>
 800244e:	2302      	movs	r3, #2
 8002450:	4698      	mov	r8, r3
 8002452:	e736      	b.n	80022c2 <__aeabi_dsub+0x43a>
 8002454:	1afc      	subs	r4, r7, r3
 8002456:	42a7      	cmp	r7, r4
 8002458:	41bf      	sbcs	r7, r7
 800245a:	4663      	mov	r3, ip
 800245c:	427f      	negs	r7, r7
 800245e:	1ac9      	subs	r1, r1, r3
 8002460:	1bcb      	subs	r3, r1, r7
 8002462:	4699      	mov	r9, r3
 8002464:	2301      	movs	r3, #1
 8002466:	465d      	mov	r5, fp
 8002468:	4698      	mov	r8, r3
 800246a:	e55e      	b.n	8001f2a <__aeabi_dsub+0xa2>
 800246c:	074b      	lsls	r3, r1, #29
 800246e:	08ff      	lsrs	r7, r7, #3
 8002470:	433b      	orrs	r3, r7
 8002472:	08cc      	lsrs	r4, r1, #3
 8002474:	e692      	b.n	800219c <__aeabi_dsub+0x314>
 8002476:	1bdc      	subs	r4, r3, r7
 8002478:	4660      	mov	r0, ip
 800247a:	42a3      	cmp	r3, r4
 800247c:	41b6      	sbcs	r6, r6
 800247e:	1a40      	subs	r0, r0, r1
 8002480:	4276      	negs	r6, r6
 8002482:	1b80      	subs	r0, r0, r6
 8002484:	4681      	mov	r9, r0
 8002486:	0200      	lsls	r0, r0, #8
 8002488:	d560      	bpl.n	800254c <__aeabi_dsub+0x6c4>
 800248a:	1afc      	subs	r4, r7, r3
 800248c:	42a7      	cmp	r7, r4
 800248e:	41bf      	sbcs	r7, r7
 8002490:	4663      	mov	r3, ip
 8002492:	427f      	negs	r7, r7
 8002494:	1ac9      	subs	r1, r1, r3
 8002496:	1bcb      	subs	r3, r1, r7
 8002498:	4699      	mov	r9, r3
 800249a:	465d      	mov	r5, fp
 800249c:	e576      	b.n	8001f8c <__aeabi_dsub+0x104>
 800249e:	08ff      	lsrs	r7, r7, #3
 80024a0:	074b      	lsls	r3, r1, #29
 80024a2:	433b      	orrs	r3, r7
 80024a4:	08cc      	lsrs	r4, r1, #3
 80024a6:	e667      	b.n	8002178 <__aeabi_dsub+0x2f0>
 80024a8:	000a      	movs	r2, r1
 80024aa:	08db      	lsrs	r3, r3, #3
 80024ac:	433a      	orrs	r2, r7
 80024ae:	d100      	bne.n	80024b2 <__aeabi_dsub+0x62a>
 80024b0:	e66f      	b.n	8002192 <__aeabi_dsub+0x30a>
 80024b2:	4662      	mov	r2, ip
 80024b4:	0752      	lsls	r2, r2, #29
 80024b6:	4313      	orrs	r3, r2
 80024b8:	4662      	mov	r2, ip
 80024ba:	08d4      	lsrs	r4, r2, #3
 80024bc:	2280      	movs	r2, #128	; 0x80
 80024be:	0312      	lsls	r2, r2, #12
 80024c0:	4214      	tst	r4, r2
 80024c2:	d007      	beq.n	80024d4 <__aeabi_dsub+0x64c>
 80024c4:	08c8      	lsrs	r0, r1, #3
 80024c6:	4210      	tst	r0, r2
 80024c8:	d104      	bne.n	80024d4 <__aeabi_dsub+0x64c>
 80024ca:	465d      	mov	r5, fp
 80024cc:	0004      	movs	r4, r0
 80024ce:	08fb      	lsrs	r3, r7, #3
 80024d0:	0749      	lsls	r1, r1, #29
 80024d2:	430b      	orrs	r3, r1
 80024d4:	0f5a      	lsrs	r2, r3, #29
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	08db      	lsrs	r3, r3, #3
 80024da:	0752      	lsls	r2, r2, #29
 80024dc:	4313      	orrs	r3, r2
 80024de:	e65d      	b.n	800219c <__aeabi_dsub+0x314>
 80024e0:	074b      	lsls	r3, r1, #29
 80024e2:	08ff      	lsrs	r7, r7, #3
 80024e4:	433b      	orrs	r3, r7
 80024e6:	08cc      	lsrs	r4, r1, #3
 80024e8:	e649      	b.n	800217e <__aeabi_dsub+0x2f6>
 80024ea:	19dc      	adds	r4, r3, r7
 80024ec:	429c      	cmp	r4, r3
 80024ee:	419b      	sbcs	r3, r3
 80024f0:	4461      	add	r1, ip
 80024f2:	4689      	mov	r9, r1
 80024f4:	425b      	negs	r3, r3
 80024f6:	4499      	add	r9, r3
 80024f8:	464b      	mov	r3, r9
 80024fa:	021b      	lsls	r3, r3, #8
 80024fc:	d400      	bmi.n	8002500 <__aeabi_dsub+0x678>
 80024fe:	e631      	b.n	8002164 <__aeabi_dsub+0x2dc>
 8002500:	464a      	mov	r2, r9
 8002502:	4b17      	ldr	r3, [pc, #92]	; (8002560 <__aeabi_dsub+0x6d8>)
 8002504:	401a      	ands	r2, r3
 8002506:	2301      	movs	r3, #1
 8002508:	4691      	mov	r9, r2
 800250a:	4698      	mov	r8, r3
 800250c:	e62a      	b.n	8002164 <__aeabi_dsub+0x2dc>
 800250e:	0016      	movs	r6, r2
 8002510:	4664      	mov	r4, ip
 8002512:	3e20      	subs	r6, #32
 8002514:	40f4      	lsrs	r4, r6
 8002516:	46a0      	mov	r8, r4
 8002518:	2a20      	cmp	r2, #32
 800251a:	d005      	beq.n	8002528 <__aeabi_dsub+0x6a0>
 800251c:	2640      	movs	r6, #64	; 0x40
 800251e:	4664      	mov	r4, ip
 8002520:	1ab2      	subs	r2, r6, r2
 8002522:	4094      	lsls	r4, r2
 8002524:	4323      	orrs	r3, r4
 8002526:	469a      	mov	sl, r3
 8002528:	4654      	mov	r4, sl
 800252a:	1e63      	subs	r3, r4, #1
 800252c:	419c      	sbcs	r4, r3
 800252e:	4643      	mov	r3, r8
 8002530:	431c      	orrs	r4, r3
 8002532:	e5db      	b.n	80020ec <__aeabi_dsub+0x264>
 8002534:	0002      	movs	r2, r0
 8002536:	2400      	movs	r4, #0
 8002538:	2300      	movs	r3, #0
 800253a:	e548      	b.n	8001fce <__aeabi_dsub+0x146>
 800253c:	19dc      	adds	r4, r3, r7
 800253e:	42bc      	cmp	r4, r7
 8002540:	41bf      	sbcs	r7, r7
 8002542:	4461      	add	r1, ip
 8002544:	4689      	mov	r9, r1
 8002546:	427f      	negs	r7, r7
 8002548:	44b9      	add	r9, r7
 800254a:	e738      	b.n	80023be <__aeabi_dsub+0x536>
 800254c:	464b      	mov	r3, r9
 800254e:	4323      	orrs	r3, r4
 8002550:	d100      	bne.n	8002554 <__aeabi_dsub+0x6cc>
 8002552:	e69f      	b.n	8002294 <__aeabi_dsub+0x40c>
 8002554:	e606      	b.n	8002164 <__aeabi_dsub+0x2dc>
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	000007fe 	.word	0x000007fe
 800255c:	000007ff 	.word	0x000007ff
 8002560:	ff7fffff 	.word	0xff7fffff
 8002564:	08ff      	lsrs	r7, r7, #3
 8002566:	074b      	lsls	r3, r1, #29
 8002568:	433b      	orrs	r3, r7
 800256a:	08cc      	lsrs	r4, r1, #3
 800256c:	e616      	b.n	800219c <__aeabi_dsub+0x314>
 800256e:	4662      	mov	r2, ip
 8002570:	08db      	lsrs	r3, r3, #3
 8002572:	0752      	lsls	r2, r2, #29
 8002574:	4313      	orrs	r3, r2
 8002576:	4662      	mov	r2, ip
 8002578:	08d4      	lsrs	r4, r2, #3
 800257a:	2280      	movs	r2, #128	; 0x80
 800257c:	0312      	lsls	r2, r2, #12
 800257e:	4214      	tst	r4, r2
 8002580:	d007      	beq.n	8002592 <__aeabi_dsub+0x70a>
 8002582:	08c8      	lsrs	r0, r1, #3
 8002584:	4210      	tst	r0, r2
 8002586:	d104      	bne.n	8002592 <__aeabi_dsub+0x70a>
 8002588:	465d      	mov	r5, fp
 800258a:	0004      	movs	r4, r0
 800258c:	08fb      	lsrs	r3, r7, #3
 800258e:	0749      	lsls	r1, r1, #29
 8002590:	430b      	orrs	r3, r1
 8002592:	0f5a      	lsrs	r2, r3, #29
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	0752      	lsls	r2, r2, #29
 8002598:	08db      	lsrs	r3, r3, #3
 800259a:	4313      	orrs	r3, r2
 800259c:	e5fe      	b.n	800219c <__aeabi_dsub+0x314>
 800259e:	2300      	movs	r3, #0
 80025a0:	4a01      	ldr	r2, [pc, #4]	; (80025a8 <__aeabi_dsub+0x720>)
 80025a2:	001c      	movs	r4, r3
 80025a4:	e513      	b.n	8001fce <__aeabi_dsub+0x146>
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	000007ff 	.word	0x000007ff

080025ac <__aeabi_dcmpun>:
 80025ac:	b570      	push	{r4, r5, r6, lr}
 80025ae:	0005      	movs	r5, r0
 80025b0:	480c      	ldr	r0, [pc, #48]	; (80025e4 <__aeabi_dcmpun+0x38>)
 80025b2:	031c      	lsls	r4, r3, #12
 80025b4:	0016      	movs	r6, r2
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	030a      	lsls	r2, r1, #12
 80025ba:	0049      	lsls	r1, r1, #1
 80025bc:	0b12      	lsrs	r2, r2, #12
 80025be:	0d49      	lsrs	r1, r1, #21
 80025c0:	0b24      	lsrs	r4, r4, #12
 80025c2:	0d5b      	lsrs	r3, r3, #21
 80025c4:	4281      	cmp	r1, r0
 80025c6:	d008      	beq.n	80025da <__aeabi_dcmpun+0x2e>
 80025c8:	4a06      	ldr	r2, [pc, #24]	; (80025e4 <__aeabi_dcmpun+0x38>)
 80025ca:	2000      	movs	r0, #0
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d103      	bne.n	80025d8 <__aeabi_dcmpun+0x2c>
 80025d0:	0020      	movs	r0, r4
 80025d2:	4330      	orrs	r0, r6
 80025d4:	1e43      	subs	r3, r0, #1
 80025d6:	4198      	sbcs	r0, r3
 80025d8:	bd70      	pop	{r4, r5, r6, pc}
 80025da:	2001      	movs	r0, #1
 80025dc:	432a      	orrs	r2, r5
 80025de:	d1fb      	bne.n	80025d8 <__aeabi_dcmpun+0x2c>
 80025e0:	e7f2      	b.n	80025c8 <__aeabi_dcmpun+0x1c>
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	000007ff 	.word	0x000007ff

080025e8 <__aeabi_d2iz>:
 80025e8:	000a      	movs	r2, r1
 80025ea:	b530      	push	{r4, r5, lr}
 80025ec:	4c13      	ldr	r4, [pc, #76]	; (800263c <__aeabi_d2iz+0x54>)
 80025ee:	0053      	lsls	r3, r2, #1
 80025f0:	0309      	lsls	r1, r1, #12
 80025f2:	0005      	movs	r5, r0
 80025f4:	0b09      	lsrs	r1, r1, #12
 80025f6:	2000      	movs	r0, #0
 80025f8:	0d5b      	lsrs	r3, r3, #21
 80025fa:	0fd2      	lsrs	r2, r2, #31
 80025fc:	42a3      	cmp	r3, r4
 80025fe:	dd04      	ble.n	800260a <__aeabi_d2iz+0x22>
 8002600:	480f      	ldr	r0, [pc, #60]	; (8002640 <__aeabi_d2iz+0x58>)
 8002602:	4283      	cmp	r3, r0
 8002604:	dd02      	ble.n	800260c <__aeabi_d2iz+0x24>
 8002606:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <__aeabi_d2iz+0x5c>)
 8002608:	18d0      	adds	r0, r2, r3
 800260a:	bd30      	pop	{r4, r5, pc}
 800260c:	2080      	movs	r0, #128	; 0x80
 800260e:	0340      	lsls	r0, r0, #13
 8002610:	4301      	orrs	r1, r0
 8002612:	480d      	ldr	r0, [pc, #52]	; (8002648 <__aeabi_d2iz+0x60>)
 8002614:	1ac0      	subs	r0, r0, r3
 8002616:	281f      	cmp	r0, #31
 8002618:	dd08      	ble.n	800262c <__aeabi_d2iz+0x44>
 800261a:	480c      	ldr	r0, [pc, #48]	; (800264c <__aeabi_d2iz+0x64>)
 800261c:	1ac3      	subs	r3, r0, r3
 800261e:	40d9      	lsrs	r1, r3
 8002620:	000b      	movs	r3, r1
 8002622:	4258      	negs	r0, r3
 8002624:	2a00      	cmp	r2, #0
 8002626:	d1f0      	bne.n	800260a <__aeabi_d2iz+0x22>
 8002628:	0018      	movs	r0, r3
 800262a:	e7ee      	b.n	800260a <__aeabi_d2iz+0x22>
 800262c:	4c08      	ldr	r4, [pc, #32]	; (8002650 <__aeabi_d2iz+0x68>)
 800262e:	40c5      	lsrs	r5, r0
 8002630:	46a4      	mov	ip, r4
 8002632:	4463      	add	r3, ip
 8002634:	4099      	lsls	r1, r3
 8002636:	000b      	movs	r3, r1
 8002638:	432b      	orrs	r3, r5
 800263a:	e7f2      	b.n	8002622 <__aeabi_d2iz+0x3a>
 800263c:	000003fe 	.word	0x000003fe
 8002640:	0000041d 	.word	0x0000041d
 8002644:	7fffffff 	.word	0x7fffffff
 8002648:	00000433 	.word	0x00000433
 800264c:	00000413 	.word	0x00000413
 8002650:	fffffbed 	.word	0xfffffbed

08002654 <__aeabi_i2d>:
 8002654:	b570      	push	{r4, r5, r6, lr}
 8002656:	2800      	cmp	r0, #0
 8002658:	d016      	beq.n	8002688 <__aeabi_i2d+0x34>
 800265a:	17c3      	asrs	r3, r0, #31
 800265c:	18c5      	adds	r5, r0, r3
 800265e:	405d      	eors	r5, r3
 8002660:	0fc4      	lsrs	r4, r0, #31
 8002662:	0028      	movs	r0, r5
 8002664:	f000 f91c 	bl	80028a0 <__clzsi2>
 8002668:	4a11      	ldr	r2, [pc, #68]	; (80026b0 <__aeabi_i2d+0x5c>)
 800266a:	1a12      	subs	r2, r2, r0
 800266c:	280a      	cmp	r0, #10
 800266e:	dc16      	bgt.n	800269e <__aeabi_i2d+0x4a>
 8002670:	0003      	movs	r3, r0
 8002672:	002e      	movs	r6, r5
 8002674:	3315      	adds	r3, #21
 8002676:	409e      	lsls	r6, r3
 8002678:	230b      	movs	r3, #11
 800267a:	1a18      	subs	r0, r3, r0
 800267c:	40c5      	lsrs	r5, r0
 800267e:	0552      	lsls	r2, r2, #21
 8002680:	032d      	lsls	r5, r5, #12
 8002682:	0b2d      	lsrs	r5, r5, #12
 8002684:	0d53      	lsrs	r3, r2, #21
 8002686:	e003      	b.n	8002690 <__aeabi_i2d+0x3c>
 8002688:	2400      	movs	r4, #0
 800268a:	2300      	movs	r3, #0
 800268c:	2500      	movs	r5, #0
 800268e:	2600      	movs	r6, #0
 8002690:	051b      	lsls	r3, r3, #20
 8002692:	432b      	orrs	r3, r5
 8002694:	07e4      	lsls	r4, r4, #31
 8002696:	4323      	orrs	r3, r4
 8002698:	0030      	movs	r0, r6
 800269a:	0019      	movs	r1, r3
 800269c:	bd70      	pop	{r4, r5, r6, pc}
 800269e:	380b      	subs	r0, #11
 80026a0:	4085      	lsls	r5, r0
 80026a2:	0552      	lsls	r2, r2, #21
 80026a4:	032d      	lsls	r5, r5, #12
 80026a6:	2600      	movs	r6, #0
 80026a8:	0b2d      	lsrs	r5, r5, #12
 80026aa:	0d53      	lsrs	r3, r2, #21
 80026ac:	e7f0      	b.n	8002690 <__aeabi_i2d+0x3c>
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	0000041e 	.word	0x0000041e

080026b4 <__aeabi_ui2d>:
 80026b4:	b510      	push	{r4, lr}
 80026b6:	1e04      	subs	r4, r0, #0
 80026b8:	d010      	beq.n	80026dc <__aeabi_ui2d+0x28>
 80026ba:	f000 f8f1 	bl	80028a0 <__clzsi2>
 80026be:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <__aeabi_ui2d+0x48>)
 80026c0:	1a1b      	subs	r3, r3, r0
 80026c2:	280a      	cmp	r0, #10
 80026c4:	dc11      	bgt.n	80026ea <__aeabi_ui2d+0x36>
 80026c6:	220b      	movs	r2, #11
 80026c8:	0021      	movs	r1, r4
 80026ca:	1a12      	subs	r2, r2, r0
 80026cc:	40d1      	lsrs	r1, r2
 80026ce:	3015      	adds	r0, #21
 80026d0:	030a      	lsls	r2, r1, #12
 80026d2:	055b      	lsls	r3, r3, #21
 80026d4:	4084      	lsls	r4, r0
 80026d6:	0b12      	lsrs	r2, r2, #12
 80026d8:	0d5b      	lsrs	r3, r3, #21
 80026da:	e001      	b.n	80026e0 <__aeabi_ui2d+0x2c>
 80026dc:	2300      	movs	r3, #0
 80026de:	2200      	movs	r2, #0
 80026e0:	051b      	lsls	r3, r3, #20
 80026e2:	4313      	orrs	r3, r2
 80026e4:	0020      	movs	r0, r4
 80026e6:	0019      	movs	r1, r3
 80026e8:	bd10      	pop	{r4, pc}
 80026ea:	0022      	movs	r2, r4
 80026ec:	380b      	subs	r0, #11
 80026ee:	4082      	lsls	r2, r0
 80026f0:	055b      	lsls	r3, r3, #21
 80026f2:	0312      	lsls	r2, r2, #12
 80026f4:	2400      	movs	r4, #0
 80026f6:	0b12      	lsrs	r2, r2, #12
 80026f8:	0d5b      	lsrs	r3, r3, #21
 80026fa:	e7f1      	b.n	80026e0 <__aeabi_ui2d+0x2c>
 80026fc:	0000041e 	.word	0x0000041e

08002700 <__aeabi_f2d>:
 8002700:	b570      	push	{r4, r5, r6, lr}
 8002702:	0043      	lsls	r3, r0, #1
 8002704:	0246      	lsls	r6, r0, #9
 8002706:	0fc4      	lsrs	r4, r0, #31
 8002708:	20fe      	movs	r0, #254	; 0xfe
 800270a:	0e1b      	lsrs	r3, r3, #24
 800270c:	1c59      	adds	r1, r3, #1
 800270e:	0a75      	lsrs	r5, r6, #9
 8002710:	4208      	tst	r0, r1
 8002712:	d00c      	beq.n	800272e <__aeabi_f2d+0x2e>
 8002714:	22e0      	movs	r2, #224	; 0xe0
 8002716:	0092      	lsls	r2, r2, #2
 8002718:	4694      	mov	ip, r2
 800271a:	076d      	lsls	r5, r5, #29
 800271c:	0b36      	lsrs	r6, r6, #12
 800271e:	4463      	add	r3, ip
 8002720:	051b      	lsls	r3, r3, #20
 8002722:	4333      	orrs	r3, r6
 8002724:	07e4      	lsls	r4, r4, #31
 8002726:	4323      	orrs	r3, r4
 8002728:	0028      	movs	r0, r5
 800272a:	0019      	movs	r1, r3
 800272c:	bd70      	pop	{r4, r5, r6, pc}
 800272e:	2b00      	cmp	r3, #0
 8002730:	d114      	bne.n	800275c <__aeabi_f2d+0x5c>
 8002732:	2d00      	cmp	r5, #0
 8002734:	d01b      	beq.n	800276e <__aeabi_f2d+0x6e>
 8002736:	0028      	movs	r0, r5
 8002738:	f000 f8b2 	bl	80028a0 <__clzsi2>
 800273c:	280a      	cmp	r0, #10
 800273e:	dc1c      	bgt.n	800277a <__aeabi_f2d+0x7a>
 8002740:	230b      	movs	r3, #11
 8002742:	002e      	movs	r6, r5
 8002744:	1a1b      	subs	r3, r3, r0
 8002746:	40de      	lsrs	r6, r3
 8002748:	0003      	movs	r3, r0
 800274a:	3315      	adds	r3, #21
 800274c:	409d      	lsls	r5, r3
 800274e:	4a0e      	ldr	r2, [pc, #56]	; (8002788 <__aeabi_f2d+0x88>)
 8002750:	0336      	lsls	r6, r6, #12
 8002752:	1a12      	subs	r2, r2, r0
 8002754:	0552      	lsls	r2, r2, #21
 8002756:	0b36      	lsrs	r6, r6, #12
 8002758:	0d53      	lsrs	r3, r2, #21
 800275a:	e7e1      	b.n	8002720 <__aeabi_f2d+0x20>
 800275c:	2d00      	cmp	r5, #0
 800275e:	d009      	beq.n	8002774 <__aeabi_f2d+0x74>
 8002760:	2280      	movs	r2, #128	; 0x80
 8002762:	0b36      	lsrs	r6, r6, #12
 8002764:	0312      	lsls	r2, r2, #12
 8002766:	4b09      	ldr	r3, [pc, #36]	; (800278c <__aeabi_f2d+0x8c>)
 8002768:	076d      	lsls	r5, r5, #29
 800276a:	4316      	orrs	r6, r2
 800276c:	e7d8      	b.n	8002720 <__aeabi_f2d+0x20>
 800276e:	2300      	movs	r3, #0
 8002770:	2600      	movs	r6, #0
 8002772:	e7d5      	b.n	8002720 <__aeabi_f2d+0x20>
 8002774:	2600      	movs	r6, #0
 8002776:	4b05      	ldr	r3, [pc, #20]	; (800278c <__aeabi_f2d+0x8c>)
 8002778:	e7d2      	b.n	8002720 <__aeabi_f2d+0x20>
 800277a:	0003      	movs	r3, r0
 800277c:	3b0b      	subs	r3, #11
 800277e:	409d      	lsls	r5, r3
 8002780:	002e      	movs	r6, r5
 8002782:	2500      	movs	r5, #0
 8002784:	e7e3      	b.n	800274e <__aeabi_f2d+0x4e>
 8002786:	46c0      	nop			; (mov r8, r8)
 8002788:	00000389 	.word	0x00000389
 800278c:	000007ff 	.word	0x000007ff

08002790 <__aeabi_d2f>:
 8002790:	0002      	movs	r2, r0
 8002792:	004b      	lsls	r3, r1, #1
 8002794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002796:	0d5b      	lsrs	r3, r3, #21
 8002798:	030c      	lsls	r4, r1, #12
 800279a:	4e3d      	ldr	r6, [pc, #244]	; (8002890 <__aeabi_d2f+0x100>)
 800279c:	0a64      	lsrs	r4, r4, #9
 800279e:	0f40      	lsrs	r0, r0, #29
 80027a0:	1c5f      	adds	r7, r3, #1
 80027a2:	0fc9      	lsrs	r1, r1, #31
 80027a4:	4304      	orrs	r4, r0
 80027a6:	00d5      	lsls	r5, r2, #3
 80027a8:	4237      	tst	r7, r6
 80027aa:	d00a      	beq.n	80027c2 <__aeabi_d2f+0x32>
 80027ac:	4839      	ldr	r0, [pc, #228]	; (8002894 <__aeabi_d2f+0x104>)
 80027ae:	181e      	adds	r6, r3, r0
 80027b0:	2efe      	cmp	r6, #254	; 0xfe
 80027b2:	dd16      	ble.n	80027e2 <__aeabi_d2f+0x52>
 80027b4:	20ff      	movs	r0, #255	; 0xff
 80027b6:	2400      	movs	r4, #0
 80027b8:	05c0      	lsls	r0, r0, #23
 80027ba:	4320      	orrs	r0, r4
 80027bc:	07c9      	lsls	r1, r1, #31
 80027be:	4308      	orrs	r0, r1
 80027c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <__aeabi_d2f+0x44>
 80027c6:	432c      	orrs	r4, r5
 80027c8:	d026      	beq.n	8002818 <__aeabi_d2f+0x88>
 80027ca:	2205      	movs	r2, #5
 80027cc:	0192      	lsls	r2, r2, #6
 80027ce:	0a54      	lsrs	r4, r2, #9
 80027d0:	b2d8      	uxtb	r0, r3
 80027d2:	e7f1      	b.n	80027b8 <__aeabi_d2f+0x28>
 80027d4:	4325      	orrs	r5, r4
 80027d6:	d0ed      	beq.n	80027b4 <__aeabi_d2f+0x24>
 80027d8:	2080      	movs	r0, #128	; 0x80
 80027da:	03c0      	lsls	r0, r0, #15
 80027dc:	4304      	orrs	r4, r0
 80027de:	20ff      	movs	r0, #255	; 0xff
 80027e0:	e7ea      	b.n	80027b8 <__aeabi_d2f+0x28>
 80027e2:	2e00      	cmp	r6, #0
 80027e4:	dd1b      	ble.n	800281e <__aeabi_d2f+0x8e>
 80027e6:	0192      	lsls	r2, r2, #6
 80027e8:	1e53      	subs	r3, r2, #1
 80027ea:	419a      	sbcs	r2, r3
 80027ec:	00e4      	lsls	r4, r4, #3
 80027ee:	0f6d      	lsrs	r5, r5, #29
 80027f0:	4322      	orrs	r2, r4
 80027f2:	432a      	orrs	r2, r5
 80027f4:	0753      	lsls	r3, r2, #29
 80027f6:	d048      	beq.n	800288a <__aeabi_d2f+0xfa>
 80027f8:	230f      	movs	r3, #15
 80027fa:	4013      	ands	r3, r2
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	d000      	beq.n	8002802 <__aeabi_d2f+0x72>
 8002800:	3204      	adds	r2, #4
 8002802:	2380      	movs	r3, #128	; 0x80
 8002804:	04db      	lsls	r3, r3, #19
 8002806:	4013      	ands	r3, r2
 8002808:	d03f      	beq.n	800288a <__aeabi_d2f+0xfa>
 800280a:	1c70      	adds	r0, r6, #1
 800280c:	2efe      	cmp	r6, #254	; 0xfe
 800280e:	d0d1      	beq.n	80027b4 <__aeabi_d2f+0x24>
 8002810:	0192      	lsls	r2, r2, #6
 8002812:	0a54      	lsrs	r4, r2, #9
 8002814:	b2c0      	uxtb	r0, r0
 8002816:	e7cf      	b.n	80027b8 <__aeabi_d2f+0x28>
 8002818:	2000      	movs	r0, #0
 800281a:	2400      	movs	r4, #0
 800281c:	e7cc      	b.n	80027b8 <__aeabi_d2f+0x28>
 800281e:	0032      	movs	r2, r6
 8002820:	3217      	adds	r2, #23
 8002822:	db22      	blt.n	800286a <__aeabi_d2f+0xda>
 8002824:	2080      	movs	r0, #128	; 0x80
 8002826:	0400      	lsls	r0, r0, #16
 8002828:	4320      	orrs	r0, r4
 800282a:	241e      	movs	r4, #30
 800282c:	1ba4      	subs	r4, r4, r6
 800282e:	2c1f      	cmp	r4, #31
 8002830:	dd1d      	ble.n	800286e <__aeabi_d2f+0xde>
 8002832:	2202      	movs	r2, #2
 8002834:	4252      	negs	r2, r2
 8002836:	1b96      	subs	r6, r2, r6
 8002838:	0002      	movs	r2, r0
 800283a:	40f2      	lsrs	r2, r6
 800283c:	0016      	movs	r6, r2
 800283e:	2c20      	cmp	r4, #32
 8002840:	d004      	beq.n	800284c <__aeabi_d2f+0xbc>
 8002842:	4a15      	ldr	r2, [pc, #84]	; (8002898 <__aeabi_d2f+0x108>)
 8002844:	4694      	mov	ip, r2
 8002846:	4463      	add	r3, ip
 8002848:	4098      	lsls	r0, r3
 800284a:	4305      	orrs	r5, r0
 800284c:	002a      	movs	r2, r5
 800284e:	1e53      	subs	r3, r2, #1
 8002850:	419a      	sbcs	r2, r3
 8002852:	4332      	orrs	r2, r6
 8002854:	2600      	movs	r6, #0
 8002856:	0753      	lsls	r3, r2, #29
 8002858:	d1ce      	bne.n	80027f8 <__aeabi_d2f+0x68>
 800285a:	2480      	movs	r4, #128	; 0x80
 800285c:	0013      	movs	r3, r2
 800285e:	04e4      	lsls	r4, r4, #19
 8002860:	2001      	movs	r0, #1
 8002862:	4023      	ands	r3, r4
 8002864:	4222      	tst	r2, r4
 8002866:	d1d3      	bne.n	8002810 <__aeabi_d2f+0x80>
 8002868:	e7b0      	b.n	80027cc <__aeabi_d2f+0x3c>
 800286a:	2300      	movs	r3, #0
 800286c:	e7ad      	b.n	80027ca <__aeabi_d2f+0x3a>
 800286e:	4a0b      	ldr	r2, [pc, #44]	; (800289c <__aeabi_d2f+0x10c>)
 8002870:	4694      	mov	ip, r2
 8002872:	002a      	movs	r2, r5
 8002874:	40e2      	lsrs	r2, r4
 8002876:	0014      	movs	r4, r2
 8002878:	002a      	movs	r2, r5
 800287a:	4463      	add	r3, ip
 800287c:	409a      	lsls	r2, r3
 800287e:	4098      	lsls	r0, r3
 8002880:	1e55      	subs	r5, r2, #1
 8002882:	41aa      	sbcs	r2, r5
 8002884:	4302      	orrs	r2, r0
 8002886:	4322      	orrs	r2, r4
 8002888:	e7e4      	b.n	8002854 <__aeabi_d2f+0xc4>
 800288a:	0033      	movs	r3, r6
 800288c:	e79e      	b.n	80027cc <__aeabi_d2f+0x3c>
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	000007fe 	.word	0x000007fe
 8002894:	fffffc80 	.word	0xfffffc80
 8002898:	fffffca2 	.word	0xfffffca2
 800289c:	fffffc82 	.word	0xfffffc82

080028a0 <__clzsi2>:
 80028a0:	211c      	movs	r1, #28
 80028a2:	2301      	movs	r3, #1
 80028a4:	041b      	lsls	r3, r3, #16
 80028a6:	4298      	cmp	r0, r3
 80028a8:	d301      	bcc.n	80028ae <__clzsi2+0xe>
 80028aa:	0c00      	lsrs	r0, r0, #16
 80028ac:	3910      	subs	r1, #16
 80028ae:	0a1b      	lsrs	r3, r3, #8
 80028b0:	4298      	cmp	r0, r3
 80028b2:	d301      	bcc.n	80028b8 <__clzsi2+0x18>
 80028b4:	0a00      	lsrs	r0, r0, #8
 80028b6:	3908      	subs	r1, #8
 80028b8:	091b      	lsrs	r3, r3, #4
 80028ba:	4298      	cmp	r0, r3
 80028bc:	d301      	bcc.n	80028c2 <__clzsi2+0x22>
 80028be:	0900      	lsrs	r0, r0, #4
 80028c0:	3904      	subs	r1, #4
 80028c2:	a202      	add	r2, pc, #8	; (adr r2, 80028cc <__clzsi2+0x2c>)
 80028c4:	5c10      	ldrb	r0, [r2, r0]
 80028c6:	1840      	adds	r0, r0, r1
 80028c8:	4770      	bx	lr
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	02020304 	.word	0x02020304
 80028d0:	01010101 	.word	0x01010101
	...

080028dc <map>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// This function is used to map the adc values within the specified boundaries
uint16_t map(uint16_t inputValue, uint16_t inputMin, uint16_t inputMax, uint16_t outputMin, uint16_t outputMax)
{
 80028dc:	b5b0      	push	{r4, r5, r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	0005      	movs	r5, r0
 80028e4:	000c      	movs	r4, r1
 80028e6:	0010      	movs	r0, r2
 80028e8:	0019      	movs	r1, r3
 80028ea:	1dbb      	adds	r3, r7, #6
 80028ec:	1c2a      	adds	r2, r5, #0
 80028ee:	801a      	strh	r2, [r3, #0]
 80028f0:	1d3b      	adds	r3, r7, #4
 80028f2:	1c22      	adds	r2, r4, #0
 80028f4:	801a      	strh	r2, [r3, #0]
 80028f6:	1cbb      	adds	r3, r7, #2
 80028f8:	1c02      	adds	r2, r0, #0
 80028fa:	801a      	strh	r2, [r3, #0]
 80028fc:	003b      	movs	r3, r7
 80028fe:	1c0a      	adds	r2, r1, #0
 8002900:	801a      	strh	r2, [r3, #0]
  return (magnitude * (inputValue - inputMin) * (outputMax - outputMin + 1) / (inputMax - inputMin) + outputMin);
 8002902:	4b13      	ldr	r3, [pc, #76]	; (8002950 <map+0x74>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	b2db      	uxtb	r3, r3
 8002908:	0019      	movs	r1, r3
 800290a:	1dbb      	adds	r3, r7, #6
 800290c:	881a      	ldrh	r2, [r3, #0]
 800290e:	1d3b      	adds	r3, r7, #4
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	434b      	muls	r3, r1
 8002916:	001a      	movs	r2, r3
 8002918:	2318      	movs	r3, #24
 800291a:	18fb      	adds	r3, r7, r3
 800291c:	8819      	ldrh	r1, [r3, #0]
 800291e:	003b      	movs	r3, r7
 8002920:	881b      	ldrh	r3, [r3, #0]
 8002922:	1acb      	subs	r3, r1, r3
 8002924:	3301      	adds	r3, #1
 8002926:	4353      	muls	r3, r2
 8002928:	0018      	movs	r0, r3
 800292a:	1cbb      	adds	r3, r7, #2
 800292c:	881a      	ldrh	r2, [r3, #0]
 800292e:	1d3b      	adds	r3, r7, #4
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	0019      	movs	r1, r3
 8002936:	f7fd fc8d 	bl	8000254 <__divsi3>
 800293a:	0003      	movs	r3, r0
 800293c:	b29a      	uxth	r2, r3
 800293e:	003b      	movs	r3, r7
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	18d3      	adds	r3, r2, r3
 8002944:	b29b      	uxth	r3, r3
}
 8002946:	0018      	movs	r0, r3
 8002948:	46bd      	mov	sp, r7
 800294a:	b002      	add	sp, #8
 800294c:	bdb0      	pop	{r4, r5, r7, pc}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	20000000 	.word	0x20000000

08002954 <isRxEmpty>:

// Return 1 if rx_buffer is empty
int isRxEmpty() {
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
	for (int i = 0; i < sizeof(rx_buffer); i++) {
 800295a:	2300      	movs	r3, #0
 800295c:	607b      	str	r3, [r7, #4]
 800295e:	e00a      	b.n	8002976 <isRxEmpty+0x22>
	    if (rx_buffer[i] != 0) {
 8002960:	4a09      	ldr	r2, [pc, #36]	; (8002988 <isRxEmpty+0x34>)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	18d3      	adds	r3, r2, r3
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <isRxEmpty+0x1c>
	        return 0;
 800296c:	2300      	movs	r3, #0
 800296e:	e006      	b.n	800297e <isRxEmpty+0x2a>
	for (int i = 0; i < sizeof(rx_buffer); i++) {
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3301      	adds	r3, #1
 8002974:	607b      	str	r3, [r7, #4]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b31      	cmp	r3, #49	; 0x31
 800297a:	d9f1      	bls.n	8002960 <isRxEmpty+0xc>
	    }
	}
	return 1;
 800297c:	2301      	movs	r3, #1
}
 800297e:	0018      	movs	r0, r3
 8002980:	46bd      	mov	sp, r7
 8002982:	b002      	add	sp, #8
 8002984:	bd80      	pop	{r7, pc}
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	20000370 	.word	0x20000370

0800298c <resetRx>:

// If timerCounter is done, it means we didnt receive any signal for 7byte time long
// (9600 baudrate, 1/9600 bit/s = 104µs) then we reset the rx_buffer
void resetRx(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
	rx_index = 0;
 8002992:	4b17      	ldr	r3, [pc, #92]	; (80029f0 <resetRx+0x64>)
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
	timeoutCounter = 0;
 8002998:	4b16      	ldr	r3, [pc, #88]	; (80029f4 <resetRx+0x68>)
 800299a:	2200      	movs	r2, #0
 800299c:	701a      	strb	r2, [r3, #0]

	if(isRxEmpty() == 0) {
 800299e:	f7ff ffd9 	bl	8002954 <isRxEmpty>
 80029a2:	1e03      	subs	r3, r0, #0
 80029a4:	d111      	bne.n	80029ca <resetRx+0x3e>
		for(int i = 0; i<MAX_BUFFER_SIZE; i++) {
 80029a6:	2300      	movs	r3, #0
 80029a8:	607b      	str	r3, [r7, #4]
 80029aa:	e00b      	b.n	80029c4 <resetRx+0x38>
			message[i] = rx_buffer[i];
 80029ac:	4a12      	ldr	r2, [pc, #72]	; (80029f8 <resetRx+0x6c>)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	18d3      	adds	r3, r2, r3
 80029b2:	7819      	ldrb	r1, [r3, #0]
 80029b4:	4a11      	ldr	r2, [pc, #68]	; (80029fc <resetRx+0x70>)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	18d3      	adds	r3, r2, r3
 80029ba:	1c0a      	adds	r2, r1, #0
 80029bc:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i<MAX_BUFFER_SIZE; i++) {
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3301      	adds	r3, #1
 80029c2:	607b      	str	r3, [r7, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b31      	cmp	r3, #49	; 0x31
 80029c8:	ddf0      	ble.n	80029ac <resetRx+0x20>
		}
	}

	for(int i = 0; i<MAX_BUFFER_SIZE; i++)
 80029ca:	2300      	movs	r3, #0
 80029cc:	603b      	str	r3, [r7, #0]
 80029ce:	e007      	b.n	80029e0 <resetRx+0x54>
		rx_buffer[i] = 0;
 80029d0:	4a09      	ldr	r2, [pc, #36]	; (80029f8 <resetRx+0x6c>)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	18d3      	adds	r3, r2, r3
 80029d6:	2200      	movs	r2, #0
 80029d8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<MAX_BUFFER_SIZE; i++)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	3301      	adds	r3, #1
 80029de:	603b      	str	r3, [r7, #0]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	2b31      	cmp	r3, #49	; 0x31
 80029e4:	ddf4      	ble.n	80029d0 <resetRx+0x44>
}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	46c0      	nop			; (mov r8, r8)
 80029ea:	46bd      	mov	sp, r7
 80029ec:	b002      	add	sp, #8
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	2000040a 	.word	0x2000040a
 80029f4:	2000040d 	.word	0x2000040d
 80029f8:	20000370 	.word	0x20000370
 80029fc:	200003d8 	.word	0x200003d8

08002a00 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]

  if ( huart->Instance == USART1 )
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a15      	ldr	r2, [pc, #84]	; (8002a64 <HAL_UART_RxCpltCallback+0x64>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d123      	bne.n	8002a5a <HAL_UART_RxCpltCallback+0x5a>
   {
	 timeoutCounter = 0;
 8002a12:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <HAL_UART_RxCpltCallback+0x68>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	701a      	strb	r2, [r3, #0]
	 HAL_TIM_Base_Start_IT(&htim6);
 8002a18:	4b14      	ldr	r3, [pc, #80]	; (8002a6c <HAL_UART_RxCpltCallback+0x6c>)
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f002 fd36 	bl	800548c <HAL_TIM_Base_Start_IT>


	 HAL_UART_Receive_IT( &huart1, uart1RxBuffer, 1 );
 8002a20:	4913      	ldr	r1, [pc, #76]	; (8002a70 <HAL_UART_RxCpltCallback+0x70>)
 8002a22:	4b14      	ldr	r3, [pc, #80]	; (8002a74 <HAL_UART_RxCpltCallback+0x74>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	0018      	movs	r0, r3
 8002a28:	f003 f89a 	bl	8005b60 <HAL_UART_Receive_IT>
	 rx_buffer[rx_index] = uart1RxBuffer[ 0 ];
 8002a2c:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <HAL_UART_RxCpltCallback+0x78>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	001a      	movs	r2, r3
 8002a32:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <HAL_UART_RxCpltCallback+0x70>)
 8002a34:	7819      	ldrb	r1, [r3, #0]
 8002a36:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <HAL_UART_RxCpltCallback+0x7c>)
 8002a38:	5499      	strb	r1, [r3, r2]

	 // Coppies the rx to the message buffer so that when rx_buffer is deleted its contents are kept
	 message[rx_index] = rx_buffer[rx_index];
 8002a3a:	4b0f      	ldr	r3, [pc, #60]	; (8002a78 <HAL_UART_RxCpltCallback+0x78>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	0019      	movs	r1, r3
 8002a40:	4b0d      	ldr	r3, [pc, #52]	; (8002a78 <HAL_UART_RxCpltCallback+0x78>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	001a      	movs	r2, r3
 8002a46:	4b0d      	ldr	r3, [pc, #52]	; (8002a7c <HAL_UART_RxCpltCallback+0x7c>)
 8002a48:	5c59      	ldrb	r1, [r3, r1]
 8002a4a:	4b0d      	ldr	r3, [pc, #52]	; (8002a80 <HAL_UART_RxCpltCallback+0x80>)
 8002a4c:	5499      	strb	r1, [r3, r2]
	 rx_index++;
 8002a4e:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <HAL_UART_RxCpltCallback+0x78>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	3301      	adds	r3, #1
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	4b08      	ldr	r3, [pc, #32]	; (8002a78 <HAL_UART_RxCpltCallback+0x78>)
 8002a58:	701a      	strb	r2, [r3, #0]
   }
}
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	b002      	add	sp, #8
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	40013800 	.word	0x40013800
 8002a68:	2000040d 	.word	0x2000040d
 8002a6c:	20000288 	.word	0x20000288
 8002a70:	2000040c 	.word	0x2000040c
 8002a74:	200002d0 	.word	0x200002d0
 8002a78:	2000040a 	.word	0x2000040a
 8002a7c:	20000370 	.word	0x20000370
 8002a80:	200003d8 	.word	0x200003d8

08002a84 <HAL_TIM_PeriodElapsedCallback>:

// Timer interrupt callback for received data timeout
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6) {
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a0c      	ldr	r2, [pc, #48]	; (8002ac4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d112      	bne.n	8002abc <HAL_TIM_PeriodElapsedCallback+0x38>

		if(timeoutCounter <= 60 && rx_index < MAX_BUFFER_SIZE)
 8002a96:	4b0c      	ldr	r3, [pc, #48]	; (8002ac8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b3c      	cmp	r3, #60	; 0x3c
 8002a9e:	d80b      	bhi.n	8002ab8 <HAL_TIM_PeriodElapsedCallback+0x34>
 8002aa0:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b31      	cmp	r3, #49	; 0x31
 8002aa6:	d807      	bhi.n	8002ab8 <HAL_TIM_PeriodElapsedCallback+0x34>
			timeoutCounter++;
 8002aa8:	4b07      	ldr	r3, [pc, #28]	; (8002ac8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	3301      	adds	r3, #1
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002ab4:	701a      	strb	r2, [r3, #0]
		else
			resetRx();
	}
}
 8002ab6:	e001      	b.n	8002abc <HAL_TIM_PeriodElapsedCallback+0x38>
			resetRx();
 8002ab8:	f7ff ff68 	bl	800298c <resetRx>
}
 8002abc:	46c0      	nop			; (mov r8, r8)
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	b002      	add	sp, #8
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40001000 	.word	0x40001000
 8002ac8:	2000040d 	.word	0x2000040d
 8002acc:	2000040a 	.word	0x2000040a

08002ad0 <ADC_DMA_AVERAGE>:

uint16_t ADC_DMA_AVERAGE(int channel)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
	uint32_t adc_sum;
	int i;

	adc_sum = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60fb      	str	r3, [r7, #12]
	if(channel < NUMBER_ADC_CHANNEL )
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	dc14      	bgt.n	8002b0c <ADC_DMA_AVERAGE+0x3c>
	{
		for(i=0; i<NUMBER_ADC_CHANNEL_AVERAGE_PER_CHANNEL; i++)
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60bb      	str	r3, [r7, #8]
 8002ae6:	e00d      	b.n	8002b04 <ADC_DMA_AVERAGE+0x34>
			adc_sum += ADC_DMA_BUFF[channel+i*NUMBER_ADC_CHANNEL];
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	005a      	lsls	r2, r3, #1
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	18d2      	adds	r2, r2, r3
 8002af0:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <ADC_DMA_AVERAGE+0x58>)
 8002af2:	0052      	lsls	r2, r2, #1
 8002af4:	5ad3      	ldrh	r3, [r2, r3]
 8002af6:	001a      	movs	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	189b      	adds	r3, r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]
		for(i=0; i<NUMBER_ADC_CHANNEL_AVERAGE_PER_CHANNEL; i++)
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	3301      	adds	r3, #1
 8002b02:	60bb      	str	r3, [r7, #8]
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	ddee      	ble.n	8002ae8 <ADC_DMA_AVERAGE+0x18>
 8002b0a:	e001      	b.n	8002b10 <ADC_DMA_AVERAGE+0x40>
	}
	else
		return 1;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e006      	b.n	8002b1e <ADC_DMA_AVERAGE+0x4e>

	return adc_sum/NUMBER_ADC_CHANNEL_AVERAGE_PER_CHANNEL;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2105      	movs	r1, #5
 8002b14:	0018      	movs	r0, r3
 8002b16:	f7fd fb13 	bl	8000140 <__udivsi3>
 8002b1a:	0003      	movs	r3, r0
 8002b1c:	b29b      	uxth	r3, r3
}
 8002b1e:	0018      	movs	r0, r3
 8002b20:	46bd      	mov	sp, r7
 8002b22:	b004      	add	sp, #16
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	20000358 	.word	0x20000358

08002b2c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	6078      	str	r0, [r7, #4]
	adcValue1 = ADC_DMA_AVERAGE(0);
 8002b34:	2000      	movs	r0, #0
 8002b36:	f7ff ffcb 	bl	8002ad0 <ADC_DMA_AVERAGE>
 8002b3a:	0003      	movs	r3, r0
 8002b3c:	001a      	movs	r2, r3
 8002b3e:	4b13      	ldr	r3, [pc, #76]	; (8002b8c <HAL_ADC_ConvCpltCallback+0x60>)
 8002b40:	801a      	strh	r2, [r3, #0]
	adcValue2 = ADC_DMA_AVERAGE(1);
 8002b42:	2001      	movs	r0, #1
 8002b44:	f7ff ffc4 	bl	8002ad0 <ADC_DMA_AVERAGE>
 8002b48:	0003      	movs	r3, r0
 8002b4a:	001a      	movs	r2, r3
 8002b4c:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <HAL_ADC_ConvCpltCallback+0x64>)
 8002b4e:	801a      	strh	r2, [r3, #0]
	y1Data = map(adcValue1, ADC_MIN_VALUE, ADC_MAX_VALUE, 0, 100);
 8002b50:	4b0e      	ldr	r3, [pc, #56]	; (8002b8c <HAL_ADC_ConvCpltCallback+0x60>)
 8002b52:	8818      	ldrh	r0, [r3, #0]
 8002b54:	4a0f      	ldr	r2, [pc, #60]	; (8002b94 <HAL_ADC_ConvCpltCallback+0x68>)
 8002b56:	2364      	movs	r3, #100	; 0x64
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	f7ff febd 	bl	80028dc <map>
 8002b62:	0003      	movs	r3, r0
 8002b64:	001a      	movs	r2, r3
 8002b66:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <HAL_ADC_ConvCpltCallback+0x6c>)
 8002b68:	801a      	strh	r2, [r3, #0]
	y2Data = map(adcValue2, ADC_MIN_VALUE, ADC_MAX_VALUE, 0, 100);
 8002b6a:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <HAL_ADC_ConvCpltCallback+0x64>)
 8002b6c:	8818      	ldrh	r0, [r3, #0]
 8002b6e:	4a09      	ldr	r2, [pc, #36]	; (8002b94 <HAL_ADC_ConvCpltCallback+0x68>)
 8002b70:	2364      	movs	r3, #100	; 0x64
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	2300      	movs	r3, #0
 8002b76:	2100      	movs	r1, #0
 8002b78:	f7ff feb0 	bl	80028dc <map>
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	001a      	movs	r2, r3
 8002b80:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <HAL_ADC_ConvCpltCallback+0x70>)
 8002b82:	801a      	strh	r2, [r3, #0]
}
 8002b84:	46c0      	nop			; (mov r8, r8)
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b002      	add	sp, #8
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	2000036c 	.word	0x2000036c
 8002b90:	2000036e 	.word	0x2000036e
 8002b94:	00000fff 	.word	0x00000fff
 8002b98:	20000414 	.word	0x20000414
 8002b9c:	20000416 	.word	0x20000416

08002ba0 <Read_Message>:

// The message is formatted as "timeConstant, magnitude"
// For example: 3, 5  --> Output: time steps become 0.3, and magnitude becomes 5 times larger
void Read_Message()
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
	sscanf((char*)message, "%f, %hu", &frequency, &magnitude);
 8002ba4:	4b04      	ldr	r3, [pc, #16]	; (8002bb8 <Read_Message+0x18>)
 8002ba6:	4a05      	ldr	r2, [pc, #20]	; (8002bbc <Read_Message+0x1c>)
 8002ba8:	4905      	ldr	r1, [pc, #20]	; (8002bc0 <Read_Message+0x20>)
 8002baa:	4806      	ldr	r0, [pc, #24]	; (8002bc4 <Read_Message+0x24>)
 8002bac:	f005 f876 	bl	8007c9c <siscanf>
}
 8002bb0:	46c0      	nop			; (mov r8, r8)
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	20000000 	.word	0x20000000
 8002bbc:	20000004 	.word	0x20000004
 8002bc0:	0800c2a8 	.word	0x0800c2a8
 8002bc4:	200003d8 	.word	0x200003d8

08002bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bc8:	b590      	push	{r4, r7, lr}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bce:	f000 fc77 	bl	80034c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bd2:	f000 f865 	bl	8002ca0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bd6:	f000 f9c5 	bl	8002f64 <MX_GPIO_Init>
  MX_DMA_Init();
 8002bda:	f000 f9a5 	bl	8002f28 <MX_DMA_Init>
  MX_TIM6_Init();
 8002bde:	f000 f92f 	bl	8002e40 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8002be2:	f000 f969 	bl	8002eb8 <MX_USART1_UART_Init>
  MX_ADC_Init();
 8002be6:	f000 f8c3 	bl	8002d70 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT( &huart1, uart1RxBuffer, 1 );
 8002bea:	4923      	ldr	r1, [pc, #140]	; (8002c78 <main+0xb0>)
 8002bec:	4b23      	ldr	r3, [pc, #140]	; (8002c7c <main+0xb4>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f002 ffb5 	bl	8005b60 <HAL_UART_Receive_IT>
  HAL_ADC_Start_DMA(&hadc, (uint32_t *)ADC_DMA_BUFF, NUMBER_ADC_CHANNEL * NUMBER_ADC_CHANNEL_AVERAGE_PER_CHANNEL);
 8002bf6:	4922      	ldr	r1, [pc, #136]	; (8002c80 <main+0xb8>)
 8002bf8:	4b22      	ldr	r3, [pc, #136]	; (8002c84 <main+0xbc>)
 8002bfa:	220a      	movs	r2, #10
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f000 fe27 	bl	8003850 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Read_Message();
 8002c02:	f7ff ffcd 	bl	8002ba0 <Read_Message>
	  xData += (1 / frequency);
 8002c06:	4b20      	ldr	r3, [pc, #128]	; (8002c88 <main+0xc0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	1c19      	adds	r1, r3, #0
 8002c0c:	20fe      	movs	r0, #254	; 0xfe
 8002c0e:	0580      	lsls	r0, r0, #22
 8002c10:	f7fd fe58 	bl	80008c4 <__aeabi_fdiv>
 8002c14:	1c03      	adds	r3, r0, #0
 8002c16:	1c1a      	adds	r2, r3, #0
 8002c18:	4b1c      	ldr	r3, [pc, #112]	; (8002c8c <main+0xc4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	1c19      	adds	r1, r3, #0
 8002c1e:	1c10      	adds	r0, r2, #0
 8002c20:	f7fd fcb2 	bl	8000588 <__aeabi_fadd>
 8002c24:	1c03      	adds	r3, r0, #0
 8002c26:	1c1a      	adds	r2, r3, #0
 8002c28:	4b18      	ldr	r3, [pc, #96]	; (8002c8c <main+0xc4>)
 8002c2a:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, (uint8_t*)&tx_buffer, sprintf(tx_buffer, "%.2f, %d\n", xData, y1Data), HAL_MAX_DELAY);
 8002c2c:	4b17      	ldr	r3, [pc, #92]	; (8002c8c <main+0xc4>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	1c18      	adds	r0, r3, #0
 8002c32:	f7ff fd65 	bl	8002700 <__aeabi_f2d>
 8002c36:	0002      	movs	r2, r0
 8002c38:	000b      	movs	r3, r1
 8002c3a:	4915      	ldr	r1, [pc, #84]	; (8002c90 <main+0xc8>)
 8002c3c:	8809      	ldrh	r1, [r1, #0]
 8002c3e:	000c      	movs	r4, r1
 8002c40:	4914      	ldr	r1, [pc, #80]	; (8002c94 <main+0xcc>)
 8002c42:	4815      	ldr	r0, [pc, #84]	; (8002c98 <main+0xd0>)
 8002c44:	9400      	str	r4, [sp, #0]
 8002c46:	f005 f809 	bl	8007c5c <siprintf>
 8002c4a:	0003      	movs	r3, r0
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	2301      	movs	r3, #1
 8002c50:	425b      	negs	r3, r3
 8002c52:	4911      	ldr	r1, [pc, #68]	; (8002c98 <main+0xd0>)
 8002c54:	4809      	ldr	r0, [pc, #36]	; (8002c7c <main+0xb4>)
 8002c56:	f002 fee3 	bl	8005a20 <HAL_UART_Transmit>
	  HAL_Delay((int) (1000/frequency));
 8002c5a:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <main+0xc0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	1c19      	adds	r1, r3, #0
 8002c60:	480e      	ldr	r0, [pc, #56]	; (8002c9c <main+0xd4>)
 8002c62:	f7fd fe2f 	bl	80008c4 <__aeabi_fdiv>
 8002c66:	1c03      	adds	r3, r0, #0
 8002c68:	1c18      	adds	r0, r3, #0
 8002c6a:	f7fd ff43 	bl	8000af4 <__aeabi_f2iz>
 8002c6e:	0003      	movs	r3, r0
 8002c70:	0018      	movs	r0, r3
 8002c72:	f000 fc89 	bl	8003588 <HAL_Delay>
	  Read_Message();
 8002c76:	e7c4      	b.n	8002c02 <main+0x3a>
 8002c78:	2000040c 	.word	0x2000040c
 8002c7c:	200002d0 	.word	0x200002d0
 8002c80:	20000358 	.word	0x20000358
 8002c84:	20000204 	.word	0x20000204
 8002c88:	20000004 	.word	0x20000004
 8002c8c:	20000410 	.word	0x20000410
 8002c90:	20000414 	.word	0x20000414
 8002c94:	0800c2b0 	.word	0x0800c2b0
 8002c98:	200003a4 	.word	0x200003a4
 8002c9c:	447a0000 	.word	0x447a0000

08002ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ca0:	b590      	push	{r4, r7, lr}
 8002ca2:	b099      	sub	sp, #100	; 0x64
 8002ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ca6:	242c      	movs	r4, #44	; 0x2c
 8002ca8:	193b      	adds	r3, r7, r4
 8002caa:	0018      	movs	r0, r3
 8002cac:	2334      	movs	r3, #52	; 0x34
 8002cae:	001a      	movs	r2, r3
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	f004 f951 	bl	8006f58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cb6:	231c      	movs	r3, #28
 8002cb8:	18fb      	adds	r3, r7, r3
 8002cba:	0018      	movs	r0, r3
 8002cbc:	2310      	movs	r3, #16
 8002cbe:	001a      	movs	r2, r3
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	f004 f949 	bl	8006f58 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cc6:	003b      	movs	r3, r7
 8002cc8:	0018      	movs	r0, r3
 8002cca:	231c      	movs	r3, #28
 8002ccc:	001a      	movs	r2, r3
 8002cce:	2100      	movs	r1, #0
 8002cd0:	f004 f942 	bl	8006f58 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002cd4:	0021      	movs	r1, r4
 8002cd6:	187b      	adds	r3, r7, r1
 8002cd8:	2212      	movs	r2, #18
 8002cda:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cdc:	187b      	adds	r3, r7, r1
 8002cde:	2201      	movs	r2, #1
 8002ce0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002ce2:	187b      	adds	r3, r7, r1
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ce8:	187b      	adds	r3, r7, r1
 8002cea:	2210      	movs	r2, #16
 8002cec:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002cee:	187b      	adds	r3, r7, r1
 8002cf0:	2210      	movs	r2, #16
 8002cf2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cf4:	187b      	adds	r3, r7, r1
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002cfa:	187b      	adds	r3, r7, r1
 8002cfc:	2280      	movs	r2, #128	; 0x80
 8002cfe:	0212      	lsls	r2, r2, #8
 8002d00:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002d02:	187b      	adds	r3, r7, r1
 8002d04:	2280      	movs	r2, #128	; 0x80
 8002d06:	0352      	lsls	r2, r2, #13
 8002d08:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002d0a:	187b      	adds	r3, r7, r1
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d10:	187b      	adds	r3, r7, r1
 8002d12:	0018      	movs	r0, r3
 8002d14:	f001 fd7a 	bl	800480c <HAL_RCC_OscConfig>
 8002d18:	1e03      	subs	r3, r0, #0
 8002d1a:	d001      	beq.n	8002d20 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002d1c:	f000 f97a 	bl	8003014 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d20:	211c      	movs	r1, #28
 8002d22:	187b      	adds	r3, r7, r1
 8002d24:	2207      	movs	r2, #7
 8002d26:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d28:	187b      	adds	r3, r7, r1
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d2e:	187b      	adds	r3, r7, r1
 8002d30:	2200      	movs	r2, #0
 8002d32:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d34:	187b      	adds	r3, r7, r1
 8002d36:	2200      	movs	r2, #0
 8002d38:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002d3a:	187b      	adds	r3, r7, r1
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f002 f8ea 	bl	8004f18 <HAL_RCC_ClockConfig>
 8002d44:	1e03      	subs	r3, r0, #0
 8002d46:	d001      	beq.n	8002d4c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002d48:	f000 f964 	bl	8003014 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d4c:	003b      	movs	r3, r7
 8002d4e:	2201      	movs	r2, #1
 8002d50:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002d52:	003b      	movs	r3, r7
 8002d54:	2200      	movs	r2, #0
 8002d56:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d58:	003b      	movs	r3, r7
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f002 fa48 	bl	80051f0 <HAL_RCCEx_PeriphCLKConfig>
 8002d60:	1e03      	subs	r3, r0, #0
 8002d62:	d001      	beq.n	8002d68 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002d64:	f000 f956 	bl	8003014 <Error_Handler>
  }
}
 8002d68:	46c0      	nop			; (mov r8, r8)
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b019      	add	sp, #100	; 0x64
 8002d6e:	bd90      	pop	{r4, r7, pc}

08002d70 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002d76:	1d3b      	adds	r3, r7, #4
 8002d78:	0018      	movs	r0, r3
 8002d7a:	230c      	movs	r3, #12
 8002d7c:	001a      	movs	r2, r3
 8002d7e:	2100      	movs	r1, #0
 8002d80:	f004 f8ea 	bl	8006f58 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002d84:	4b2c      	ldr	r3, [pc, #176]	; (8002e38 <MX_ADC_Init+0xc8>)
 8002d86:	4a2d      	ldr	r2, [pc, #180]	; (8002e3c <MX_ADC_Init+0xcc>)
 8002d88:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002d8a:	4b2b      	ldr	r3, [pc, #172]	; (8002e38 <MX_ADC_Init+0xc8>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002d90:	4b29      	ldr	r3, [pc, #164]	; (8002e38 <MX_ADC_Init+0xc8>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d96:	4b28      	ldr	r3, [pc, #160]	; (8002e38 <MX_ADC_Init+0xc8>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002d9c:	4b26      	ldr	r3, [pc, #152]	; (8002e38 <MX_ADC_Init+0xc8>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002da2:	4b25      	ldr	r3, [pc, #148]	; (8002e38 <MX_ADC_Init+0xc8>)
 8002da4:	2204      	movs	r2, #4
 8002da6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002da8:	4b23      	ldr	r3, [pc, #140]	; (8002e38 <MX_ADC_Init+0xc8>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002dae:	4b22      	ldr	r3, [pc, #136]	; (8002e38 <MX_ADC_Init+0xc8>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002db4:	4b20      	ldr	r3, [pc, #128]	; (8002e38 <MX_ADC_Init+0xc8>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002dba:	4b1f      	ldr	r3, [pc, #124]	; (8002e38 <MX_ADC_Init+0xc8>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002dc0:	4b1d      	ldr	r3, [pc, #116]	; (8002e38 <MX_ADC_Init+0xc8>)
 8002dc2:	22c2      	movs	r2, #194	; 0xc2
 8002dc4:	32ff      	adds	r2, #255	; 0xff
 8002dc6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002dc8:	4b1b      	ldr	r3, [pc, #108]	; (8002e38 <MX_ADC_Init+0xc8>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8002dce:	4b1a      	ldr	r3, [pc, #104]	; (8002e38 <MX_ADC_Init+0xc8>)
 8002dd0:	2224      	movs	r2, #36	; 0x24
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002dd6:	4b18      	ldr	r3, [pc, #96]	; (8002e38 <MX_ADC_Init+0xc8>)
 8002dd8:	2201      	movs	r2, #1
 8002dda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002ddc:	4b16      	ldr	r3, [pc, #88]	; (8002e38 <MX_ADC_Init+0xc8>)
 8002dde:	0018      	movs	r0, r3
 8002de0:	f000 fbf6 	bl	80035d0 <HAL_ADC_Init>
 8002de4:	1e03      	subs	r3, r0, #0
 8002de6:	d001      	beq.n	8002dec <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002de8:	f000 f914 	bl	8003014 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002dec:	1d3b      	adds	r3, r7, #4
 8002dee:	2204      	movs	r2, #4
 8002df0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002df2:	1d3b      	adds	r3, r7, #4
 8002df4:	2280      	movs	r2, #128	; 0x80
 8002df6:	0152      	lsls	r2, r2, #5
 8002df8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002dfa:	1d3b      	adds	r3, r7, #4
 8002dfc:	2207      	movs	r2, #7
 8002dfe:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002e00:	1d3a      	adds	r2, r7, #4
 8002e02:	4b0d      	ldr	r3, [pc, #52]	; (8002e38 <MX_ADC_Init+0xc8>)
 8002e04:	0011      	movs	r1, r2
 8002e06:	0018      	movs	r0, r3
 8002e08:	f000 fe60 	bl	8003acc <HAL_ADC_ConfigChannel>
 8002e0c:	1e03      	subs	r3, r0, #0
 8002e0e:	d001      	beq.n	8002e14 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8002e10:	f000 f900 	bl	8003014 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002e14:	1d3b      	adds	r3, r7, #4
 8002e16:	2205      	movs	r2, #5
 8002e18:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002e1a:	1d3a      	adds	r2, r7, #4
 8002e1c:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <MX_ADC_Init+0xc8>)
 8002e1e:	0011      	movs	r1, r2
 8002e20:	0018      	movs	r0, r3
 8002e22:	f000 fe53 	bl	8003acc <HAL_ADC_ConfigChannel>
 8002e26:	1e03      	subs	r3, r0, #0
 8002e28:	d001      	beq.n	8002e2e <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8002e2a:	f000 f8f3 	bl	8003014 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	46bd      	mov	sp, r7
 8002e32:	b004      	add	sp, #16
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	20000204 	.word	0x20000204
 8002e3c:	40012400 	.word	0x40012400

08002e40 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e46:	003b      	movs	r3, r7
 8002e48:	0018      	movs	r0, r3
 8002e4a:	2308      	movs	r3, #8
 8002e4c:	001a      	movs	r2, r3
 8002e4e:	2100      	movs	r1, #0
 8002e50:	f004 f882 	bl	8006f58 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002e54:	4b15      	ldr	r3, [pc, #84]	; (8002eac <MX_TIM6_Init+0x6c>)
 8002e56:	4a16      	ldr	r2, [pc, #88]	; (8002eb0 <MX_TIM6_Init+0x70>)
 8002e58:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002e5a:	4b14      	ldr	r3, [pc, #80]	; (8002eac <MX_TIM6_Init+0x6c>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e60:	4b12      	ldr	r3, [pc, #72]	; (8002eac <MX_TIM6_Init+0x6c>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 47000;
 8002e66:	4b11      	ldr	r3, [pc, #68]	; (8002eac <MX_TIM6_Init+0x6c>)
 8002e68:	4a12      	ldr	r2, [pc, #72]	; (8002eb4 <MX_TIM6_Init+0x74>)
 8002e6a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e6c:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <MX_TIM6_Init+0x6c>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002e72:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <MX_TIM6_Init+0x6c>)
 8002e74:	0018      	movs	r0, r3
 8002e76:	f002 fab9 	bl	80053ec <HAL_TIM_Base_Init>
 8002e7a:	1e03      	subs	r3, r0, #0
 8002e7c:	d001      	beq.n	8002e82 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002e7e:	f000 f8c9 	bl	8003014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e82:	003b      	movs	r3, r7
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e88:	003b      	movs	r3, r7
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002e8e:	003a      	movs	r2, r7
 8002e90:	4b06      	ldr	r3, [pc, #24]	; (8002eac <MX_TIM6_Init+0x6c>)
 8002e92:	0011      	movs	r1, r2
 8002e94:	0018      	movs	r0, r3
 8002e96:	f002 fd01 	bl	800589c <HAL_TIMEx_MasterConfigSynchronization>
 8002e9a:	1e03      	subs	r3, r0, #0
 8002e9c:	d001      	beq.n	8002ea2 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002e9e:	f000 f8b9 	bl	8003014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	b002      	add	sp, #8
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	20000288 	.word	0x20000288
 8002eb0:	40001000 	.word	0x40001000
 8002eb4:	0000b798 	.word	0x0000b798

08002eb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ebc:	4b18      	ldr	r3, [pc, #96]	; (8002f20 <MX_USART1_UART_Init+0x68>)
 8002ebe:	4a19      	ldr	r2, [pc, #100]	; (8002f24 <MX_USART1_UART_Init+0x6c>)
 8002ec0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8002ec2:	4b17      	ldr	r3, [pc, #92]	; (8002f20 <MX_USART1_UART_Init+0x68>)
 8002ec4:	2296      	movs	r2, #150	; 0x96
 8002ec6:	0212      	lsls	r2, r2, #8
 8002ec8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002eca:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <MX_USART1_UART_Init+0x68>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ed0:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <MX_USART1_UART_Init+0x68>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ed6:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <MX_USART1_UART_Init+0x68>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002edc:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <MX_USART1_UART_Init+0x68>)
 8002ede:	220c      	movs	r2, #12
 8002ee0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ee2:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <MX_USART1_UART_Init+0x68>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ee8:	4b0d      	ldr	r3, [pc, #52]	; (8002f20 <MX_USART1_UART_Init+0x68>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002eee:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <MX_USART1_UART_Init+0x68>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ef4:	4b0a      	ldr	r3, [pc, #40]	; (8002f20 <MX_USART1_UART_Init+0x68>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002efa:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <MX_USART1_UART_Init+0x68>)
 8002efc:	0018      	movs	r0, r3
 8002efe:	f002 fd3b 	bl	8005978 <HAL_UART_Init>
 8002f02:	1e03      	subs	r3, r0, #0
 8002f04:	d001      	beq.n	8002f0a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002f06:	f000 f885 	bl	8003014 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	2103      	movs	r1, #3
 8002f0e:	201b      	movs	r0, #27
 8002f10:	f001 f89e 	bl	8004050 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f14:	201b      	movs	r0, #27
 8002f16:	f001 f8b0 	bl	800407a <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART1_Init 2 */

}
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	200002d0 	.word	0x200002d0
 8002f24:	40013800 	.word	0x40013800

08002f28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f2e:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <MX_DMA_Init+0x38>)
 8002f30:	695a      	ldr	r2, [r3, #20]
 8002f32:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <MX_DMA_Init+0x38>)
 8002f34:	2101      	movs	r1, #1
 8002f36:	430a      	orrs	r2, r1
 8002f38:	615a      	str	r2, [r3, #20]
 8002f3a:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <MX_DMA_Init+0x38>)
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	4013      	ands	r3, r2
 8002f42:	607b      	str	r3, [r7, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002f46:	2200      	movs	r2, #0
 8002f48:	2100      	movs	r1, #0
 8002f4a:	2009      	movs	r0, #9
 8002f4c:	f001 f880 	bl	8004050 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002f50:	2009      	movs	r0, #9
 8002f52:	f001 f892 	bl	800407a <HAL_NVIC_EnableIRQ>

}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	b002      	add	sp, #8
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	40021000 	.word	0x40021000

08002f64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f64:	b590      	push	{r4, r7, lr}
 8002f66:	b089      	sub	sp, #36	; 0x24
 8002f68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f6a:	240c      	movs	r4, #12
 8002f6c:	193b      	adds	r3, r7, r4
 8002f6e:	0018      	movs	r0, r3
 8002f70:	2314      	movs	r3, #20
 8002f72:	001a      	movs	r2, r3
 8002f74:	2100      	movs	r1, #0
 8002f76:	f003 ffef 	bl	8006f58 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f7a:	4b24      	ldr	r3, [pc, #144]	; (800300c <MX_GPIO_Init+0xa8>)
 8002f7c:	695a      	ldr	r2, [r3, #20]
 8002f7e:	4b23      	ldr	r3, [pc, #140]	; (800300c <MX_GPIO_Init+0xa8>)
 8002f80:	2180      	movs	r1, #128	; 0x80
 8002f82:	03c9      	lsls	r1, r1, #15
 8002f84:	430a      	orrs	r2, r1
 8002f86:	615a      	str	r2, [r3, #20]
 8002f88:	4b20      	ldr	r3, [pc, #128]	; (800300c <MX_GPIO_Init+0xa8>)
 8002f8a:	695a      	ldr	r2, [r3, #20]
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	03db      	lsls	r3, r3, #15
 8002f90:	4013      	ands	r3, r2
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f96:	4b1d      	ldr	r3, [pc, #116]	; (800300c <MX_GPIO_Init+0xa8>)
 8002f98:	695a      	ldr	r2, [r3, #20]
 8002f9a:	4b1c      	ldr	r3, [pc, #112]	; (800300c <MX_GPIO_Init+0xa8>)
 8002f9c:	2180      	movs	r1, #128	; 0x80
 8002f9e:	0289      	lsls	r1, r1, #10
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	615a      	str	r2, [r3, #20]
 8002fa4:	4b19      	ldr	r3, [pc, #100]	; (800300c <MX_GPIO_Init+0xa8>)
 8002fa6:	695a      	ldr	r2, [r3, #20]
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	029b      	lsls	r3, r3, #10
 8002fac:	4013      	ands	r3, r2
 8002fae:	607b      	str	r3, [r7, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fb2:	4b16      	ldr	r3, [pc, #88]	; (800300c <MX_GPIO_Init+0xa8>)
 8002fb4:	695a      	ldr	r2, [r3, #20]
 8002fb6:	4b15      	ldr	r3, [pc, #84]	; (800300c <MX_GPIO_Init+0xa8>)
 8002fb8:	2180      	movs	r1, #128	; 0x80
 8002fba:	0309      	lsls	r1, r1, #12
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	615a      	str	r2, [r3, #20]
 8002fc0:	4b12      	ldr	r3, [pc, #72]	; (800300c <MX_GPIO_Init+0xa8>)
 8002fc2:	695a      	ldr	r2, [r3, #20]
 8002fc4:	2380      	movs	r3, #128	; 0x80
 8002fc6:	031b      	lsls	r3, r3, #12
 8002fc8:	4013      	ands	r3, r2
 8002fca:	603b      	str	r3, [r7, #0]
 8002fcc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8002fce:	2380      	movs	r3, #128	; 0x80
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	480f      	ldr	r0, [pc, #60]	; (8003010 <MX_GPIO_Init+0xac>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	0019      	movs	r1, r3
 8002fd8:	f001 fbfa 	bl	80047d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002fdc:	193b      	adds	r3, r7, r4
 8002fde:	2280      	movs	r2, #128	; 0x80
 8002fe0:	0092      	lsls	r2, r2, #2
 8002fe2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fe4:	193b      	adds	r3, r7, r4
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fea:	193b      	adds	r3, r7, r4
 8002fec:	2200      	movs	r2, #0
 8002fee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff0:	193b      	adds	r3, r7, r4
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ff6:	193b      	adds	r3, r7, r4
 8002ff8:	4a05      	ldr	r2, [pc, #20]	; (8003010 <MX_GPIO_Init+0xac>)
 8002ffa:	0019      	movs	r1, r3
 8002ffc:	0010      	movs	r0, r2
 8002ffe:	f001 fa6f 	bl	80044e0 <HAL_GPIO_Init>

}
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	46bd      	mov	sp, r7
 8003006:	b009      	add	sp, #36	; 0x24
 8003008:	bd90      	pop	{r4, r7, pc}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	40021000 	.word	0x40021000
 8003010:	48000800 	.word	0x48000800

08003014 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003018:	b672      	cpsid	i
}
 800301a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800301c:	e7fe      	b.n	800301c <Error_Handler+0x8>
	...

08003020 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003026:	4b0f      	ldr	r3, [pc, #60]	; (8003064 <HAL_MspInit+0x44>)
 8003028:	699a      	ldr	r2, [r3, #24]
 800302a:	4b0e      	ldr	r3, [pc, #56]	; (8003064 <HAL_MspInit+0x44>)
 800302c:	2101      	movs	r1, #1
 800302e:	430a      	orrs	r2, r1
 8003030:	619a      	str	r2, [r3, #24]
 8003032:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <HAL_MspInit+0x44>)
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	2201      	movs	r2, #1
 8003038:	4013      	ands	r3, r2
 800303a:	607b      	str	r3, [r7, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800303e:	4b09      	ldr	r3, [pc, #36]	; (8003064 <HAL_MspInit+0x44>)
 8003040:	69da      	ldr	r2, [r3, #28]
 8003042:	4b08      	ldr	r3, [pc, #32]	; (8003064 <HAL_MspInit+0x44>)
 8003044:	2180      	movs	r1, #128	; 0x80
 8003046:	0549      	lsls	r1, r1, #21
 8003048:	430a      	orrs	r2, r1
 800304a:	61da      	str	r2, [r3, #28]
 800304c:	4b05      	ldr	r3, [pc, #20]	; (8003064 <HAL_MspInit+0x44>)
 800304e:	69da      	ldr	r2, [r3, #28]
 8003050:	2380      	movs	r3, #128	; 0x80
 8003052:	055b      	lsls	r3, r3, #21
 8003054:	4013      	ands	r3, r2
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	46bd      	mov	sp, r7
 800305e:	b002      	add	sp, #8
 8003060:	bd80      	pop	{r7, pc}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	40021000 	.word	0x40021000

08003068 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003068:	b590      	push	{r4, r7, lr}
 800306a:	b08b      	sub	sp, #44	; 0x2c
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003070:	2414      	movs	r4, #20
 8003072:	193b      	adds	r3, r7, r4
 8003074:	0018      	movs	r0, r3
 8003076:	2314      	movs	r3, #20
 8003078:	001a      	movs	r2, r3
 800307a:	2100      	movs	r1, #0
 800307c:	f003 ff6c 	bl	8006f58 <memset>
  if(hadc->Instance==ADC1)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a31      	ldr	r2, [pc, #196]	; (800314c <HAL_ADC_MspInit+0xe4>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d15b      	bne.n	8003142 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800308a:	4b31      	ldr	r3, [pc, #196]	; (8003150 <HAL_ADC_MspInit+0xe8>)
 800308c:	699a      	ldr	r2, [r3, #24]
 800308e:	4b30      	ldr	r3, [pc, #192]	; (8003150 <HAL_ADC_MspInit+0xe8>)
 8003090:	2180      	movs	r1, #128	; 0x80
 8003092:	0089      	lsls	r1, r1, #2
 8003094:	430a      	orrs	r2, r1
 8003096:	619a      	str	r2, [r3, #24]
 8003098:	4b2d      	ldr	r3, [pc, #180]	; (8003150 <HAL_ADC_MspInit+0xe8>)
 800309a:	699a      	ldr	r2, [r3, #24]
 800309c:	2380      	movs	r3, #128	; 0x80
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4013      	ands	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a6:	4b2a      	ldr	r3, [pc, #168]	; (8003150 <HAL_ADC_MspInit+0xe8>)
 80030a8:	695a      	ldr	r2, [r3, #20]
 80030aa:	4b29      	ldr	r3, [pc, #164]	; (8003150 <HAL_ADC_MspInit+0xe8>)
 80030ac:	2180      	movs	r1, #128	; 0x80
 80030ae:	0289      	lsls	r1, r1, #10
 80030b0:	430a      	orrs	r2, r1
 80030b2:	615a      	str	r2, [r3, #20]
 80030b4:	4b26      	ldr	r3, [pc, #152]	; (8003150 <HAL_ADC_MspInit+0xe8>)
 80030b6:	695a      	ldr	r2, [r3, #20]
 80030b8:	2380      	movs	r3, #128	; 0x80
 80030ba:	029b      	lsls	r3, r3, #10
 80030bc:	4013      	ands	r3, r2
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80030c2:	193b      	adds	r3, r7, r4
 80030c4:	2230      	movs	r2, #48	; 0x30
 80030c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030c8:	193b      	adds	r3, r7, r4
 80030ca:	2203      	movs	r2, #3
 80030cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ce:	193b      	adds	r3, r7, r4
 80030d0:	2200      	movs	r2, #0
 80030d2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d4:	193a      	adds	r2, r7, r4
 80030d6:	2390      	movs	r3, #144	; 0x90
 80030d8:	05db      	lsls	r3, r3, #23
 80030da:	0011      	movs	r1, r2
 80030dc:	0018      	movs	r0, r3
 80030de:	f001 f9ff 	bl	80044e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80030e2:	4b1c      	ldr	r3, [pc, #112]	; (8003154 <HAL_ADC_MspInit+0xec>)
 80030e4:	4a1c      	ldr	r2, [pc, #112]	; (8003158 <HAL_ADC_MspInit+0xf0>)
 80030e6:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030e8:	4b1a      	ldr	r3, [pc, #104]	; (8003154 <HAL_ADC_MspInit+0xec>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80030ee:	4b19      	ldr	r3, [pc, #100]	; (8003154 <HAL_ADC_MspInit+0xec>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80030f4:	4b17      	ldr	r3, [pc, #92]	; (8003154 <HAL_ADC_MspInit+0xec>)
 80030f6:	2280      	movs	r2, #128	; 0x80
 80030f8:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80030fa:	4b16      	ldr	r3, [pc, #88]	; (8003154 <HAL_ADC_MspInit+0xec>)
 80030fc:	2280      	movs	r2, #128	; 0x80
 80030fe:	0052      	lsls	r2, r2, #1
 8003100:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003102:	4b14      	ldr	r3, [pc, #80]	; (8003154 <HAL_ADC_MspInit+0xec>)
 8003104:	2280      	movs	r2, #128	; 0x80
 8003106:	00d2      	lsls	r2, r2, #3
 8003108:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800310a:	4b12      	ldr	r3, [pc, #72]	; (8003154 <HAL_ADC_MspInit+0xec>)
 800310c:	2220      	movs	r2, #32
 800310e:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8003110:	4b10      	ldr	r3, [pc, #64]	; (8003154 <HAL_ADC_MspInit+0xec>)
 8003112:	2200      	movs	r2, #0
 8003114:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003116:	4b0f      	ldr	r3, [pc, #60]	; (8003154 <HAL_ADC_MspInit+0xec>)
 8003118:	0018      	movs	r0, r3
 800311a:	f000 ffcb 	bl	80040b4 <HAL_DMA_Init>
 800311e:	1e03      	subs	r3, r0, #0
 8003120:	d001      	beq.n	8003126 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8003122:	f7ff ff77 	bl	8003014 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a0a      	ldr	r2, [pc, #40]	; (8003154 <HAL_ADC_MspInit+0xec>)
 800312a:	631a      	str	r2, [r3, #48]	; 0x30
 800312c:	4b09      	ldr	r3, [pc, #36]	; (8003154 <HAL_ADC_MspInit+0xec>)
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	625a      	str	r2, [r3, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 2, 0);
 8003132:	2200      	movs	r2, #0
 8003134:	2102      	movs	r1, #2
 8003136:	200c      	movs	r0, #12
 8003138:	f000 ff8a 	bl	8004050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 800313c:	200c      	movs	r0, #12
 800313e:	f000 ff9c 	bl	800407a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	46bd      	mov	sp, r7
 8003146:	b00b      	add	sp, #44	; 0x2c
 8003148:	bd90      	pop	{r4, r7, pc}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	40012400 	.word	0x40012400
 8003150:	40021000 	.word	0x40021000
 8003154:	20000244 	.word	0x20000244
 8003158:	40020008 	.word	0x40020008

0800315c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a0d      	ldr	r2, [pc, #52]	; (80031a0 <HAL_TIM_Base_MspInit+0x44>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d113      	bne.n	8003196 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800316e:	4b0d      	ldr	r3, [pc, #52]	; (80031a4 <HAL_TIM_Base_MspInit+0x48>)
 8003170:	69da      	ldr	r2, [r3, #28]
 8003172:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <HAL_TIM_Base_MspInit+0x48>)
 8003174:	2110      	movs	r1, #16
 8003176:	430a      	orrs	r2, r1
 8003178:	61da      	str	r2, [r3, #28]
 800317a:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <HAL_TIM_Base_MspInit+0x48>)
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	2210      	movs	r2, #16
 8003180:	4013      	ands	r3, r2
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003186:	2200      	movs	r2, #0
 8003188:	2100      	movs	r1, #0
 800318a:	2011      	movs	r0, #17
 800318c:	f000 ff60 	bl	8004050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003190:	2011      	movs	r0, #17
 8003192:	f000 ff72 	bl	800407a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	46bd      	mov	sp, r7
 800319a:	b004      	add	sp, #16
 800319c:	bd80      	pop	{r7, pc}
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	40001000 	.word	0x40001000
 80031a4:	40021000 	.word	0x40021000

080031a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031a8:	b590      	push	{r4, r7, lr}
 80031aa:	b08b      	sub	sp, #44	; 0x2c
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b0:	2414      	movs	r4, #20
 80031b2:	193b      	adds	r3, r7, r4
 80031b4:	0018      	movs	r0, r3
 80031b6:	2314      	movs	r3, #20
 80031b8:	001a      	movs	r2, r3
 80031ba:	2100      	movs	r1, #0
 80031bc:	f003 fecc 	bl	8006f58 <memset>
  if(huart->Instance==USART1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a21      	ldr	r2, [pc, #132]	; (800324c <HAL_UART_MspInit+0xa4>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d13b      	bne.n	8003242 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031ca:	4b21      	ldr	r3, [pc, #132]	; (8003250 <HAL_UART_MspInit+0xa8>)
 80031cc:	699a      	ldr	r2, [r3, #24]
 80031ce:	4b20      	ldr	r3, [pc, #128]	; (8003250 <HAL_UART_MspInit+0xa8>)
 80031d0:	2180      	movs	r1, #128	; 0x80
 80031d2:	01c9      	lsls	r1, r1, #7
 80031d4:	430a      	orrs	r2, r1
 80031d6:	619a      	str	r2, [r3, #24]
 80031d8:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <HAL_UART_MspInit+0xa8>)
 80031da:	699a      	ldr	r2, [r3, #24]
 80031dc:	2380      	movs	r3, #128	; 0x80
 80031de:	01db      	lsls	r3, r3, #7
 80031e0:	4013      	ands	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
 80031e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e6:	4b1a      	ldr	r3, [pc, #104]	; (8003250 <HAL_UART_MspInit+0xa8>)
 80031e8:	695a      	ldr	r2, [r3, #20]
 80031ea:	4b19      	ldr	r3, [pc, #100]	; (8003250 <HAL_UART_MspInit+0xa8>)
 80031ec:	2180      	movs	r1, #128	; 0x80
 80031ee:	0289      	lsls	r1, r1, #10
 80031f0:	430a      	orrs	r2, r1
 80031f2:	615a      	str	r2, [r3, #20]
 80031f4:	4b16      	ldr	r3, [pc, #88]	; (8003250 <HAL_UART_MspInit+0xa8>)
 80031f6:	695a      	ldr	r2, [r3, #20]
 80031f8:	2380      	movs	r3, #128	; 0x80
 80031fa:	029b      	lsls	r3, r3, #10
 80031fc:	4013      	ands	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003202:	193b      	adds	r3, r7, r4
 8003204:	22c0      	movs	r2, #192	; 0xc0
 8003206:	00d2      	lsls	r2, r2, #3
 8003208:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320a:	0021      	movs	r1, r4
 800320c:	187b      	adds	r3, r7, r1
 800320e:	2202      	movs	r2, #2
 8003210:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003212:	187b      	adds	r3, r7, r1
 8003214:	2200      	movs	r2, #0
 8003216:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003218:	187b      	adds	r3, r7, r1
 800321a:	2203      	movs	r2, #3
 800321c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800321e:	187b      	adds	r3, r7, r1
 8003220:	2201      	movs	r2, #1
 8003222:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003224:	187a      	adds	r2, r7, r1
 8003226:	2390      	movs	r3, #144	; 0x90
 8003228:	05db      	lsls	r3, r3, #23
 800322a:	0011      	movs	r1, r2
 800322c:	0018      	movs	r0, r3
 800322e:	f001 f957 	bl	80044e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8003232:	2200      	movs	r2, #0
 8003234:	2101      	movs	r1, #1
 8003236:	201b      	movs	r0, #27
 8003238:	f000 ff0a 	bl	8004050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800323c:	201b      	movs	r0, #27
 800323e:	f000 ff1c 	bl	800407a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	46bd      	mov	sp, r7
 8003246:	b00b      	add	sp, #44	; 0x2c
 8003248:	bd90      	pop	{r4, r7, pc}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	40013800 	.word	0x40013800
 8003250:	40021000 	.word	0x40021000

08003254 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003258:	e7fe      	b.n	8003258 <NMI_Handler+0x4>

0800325a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800325e:	e7fe      	b.n	800325e <HardFault_Handler+0x4>

08003260 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003264:	46c0      	nop			; (mov r8, r8)
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800326e:	46c0      	nop			; (mov r8, r8)
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003278:	f000 f96a 	bl	8003550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800327c:	46c0      	nop			; (mov r8, r8)
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
	...

08003284 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8003288:	4b03      	ldr	r3, [pc, #12]	; (8003298 <DMA1_Channel1_IRQHandler+0x14>)
 800328a:	0018      	movs	r0, r3
 800328c:	f001 f83d 	bl	800430a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003290:	46c0      	nop			; (mov r8, r8)
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	20000244 	.word	0x20000244

0800329c <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80032a0:	4b03      	ldr	r3, [pc, #12]	; (80032b0 <ADC1_COMP_IRQHandler+0x14>)
 80032a2:	0018      	movs	r0, r3
 80032a4:	f000 fb56 	bl	8003954 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 80032a8:	46c0      	nop			; (mov r8, r8)
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	20000204 	.word	0x20000204

080032b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80032b8:	4b03      	ldr	r3, [pc, #12]	; (80032c8 <TIM6_DAC_IRQHandler+0x14>)
 80032ba:	0018      	movs	r0, r3
 80032bc:	f002 f938 	bl	8005530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80032c0:	46c0      	nop			; (mov r8, r8)
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	20000288 	.word	0x20000288

080032cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80032d0:	4b03      	ldr	r3, [pc, #12]	; (80032e0 <USART1_IRQHandler+0x14>)
 80032d2:	0018      	movs	r0, r3
 80032d4:	f002 fc9c 	bl	8005c10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80032d8:	46c0      	nop			; (mov r8, r8)
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	200002d0 	.word	0x200002d0

080032e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
	return 1;
 80032e8:	2301      	movs	r3, #1
}
 80032ea:	0018      	movs	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <_kill>:

int _kill(int pid, int sig)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80032fa:	f003 fe03 	bl	8006f04 <__errno>
 80032fe:	0003      	movs	r3, r0
 8003300:	2216      	movs	r2, #22
 8003302:	601a      	str	r2, [r3, #0]
	return -1;
 8003304:	2301      	movs	r3, #1
 8003306:	425b      	negs	r3, r3
}
 8003308:	0018      	movs	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	b002      	add	sp, #8
 800330e:	bd80      	pop	{r7, pc}

08003310 <_exit>:

void _exit (int status)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003318:	2301      	movs	r3, #1
 800331a:	425a      	negs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	0011      	movs	r1, r2
 8003320:	0018      	movs	r0, r3
 8003322:	f7ff ffe5 	bl	80032f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003326:	e7fe      	b.n	8003326 <_exit+0x16>

08003328 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003334:	2300      	movs	r3, #0
 8003336:	617b      	str	r3, [r7, #20]
 8003338:	e00a      	b.n	8003350 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800333a:	e000      	b.n	800333e <_read+0x16>
 800333c:	bf00      	nop
 800333e:	0001      	movs	r1, r0
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	1c5a      	adds	r2, r3, #1
 8003344:	60ba      	str	r2, [r7, #8]
 8003346:	b2ca      	uxtb	r2, r1
 8003348:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	3301      	adds	r3, #1
 800334e:	617b      	str	r3, [r7, #20]
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	429a      	cmp	r2, r3
 8003356:	dbf0      	blt.n	800333a <_read+0x12>
	}

return len;
 8003358:	687b      	ldr	r3, [r7, #4]
}
 800335a:	0018      	movs	r0, r3
 800335c:	46bd      	mov	sp, r7
 800335e:	b006      	add	sp, #24
 8003360:	bd80      	pop	{r7, pc}

08003362 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b086      	sub	sp, #24
 8003366:	af00      	add	r7, sp, #0
 8003368:	60f8      	str	r0, [r7, #12]
 800336a:	60b9      	str	r1, [r7, #8]
 800336c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800336e:	2300      	movs	r3, #0
 8003370:	617b      	str	r3, [r7, #20]
 8003372:	e009      	b.n	8003388 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	1c5a      	adds	r2, r3, #1
 8003378:	60ba      	str	r2, [r7, #8]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	0018      	movs	r0, r3
 800337e:	e000      	b.n	8003382 <_write+0x20>
 8003380:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	3301      	adds	r3, #1
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	429a      	cmp	r2, r3
 800338e:	dbf1      	blt.n	8003374 <_write+0x12>
	}
	return len;
 8003390:	687b      	ldr	r3, [r7, #4]
}
 8003392:	0018      	movs	r0, r3
 8003394:	46bd      	mov	sp, r7
 8003396:	b006      	add	sp, #24
 8003398:	bd80      	pop	{r7, pc}

0800339a <_close>:

int _close(int file)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b082      	sub	sp, #8
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
	return -1;
 80033a2:	2301      	movs	r3, #1
 80033a4:	425b      	negs	r3, r3
}
 80033a6:	0018      	movs	r0, r3
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b002      	add	sp, #8
 80033ac:	bd80      	pop	{r7, pc}

080033ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b082      	sub	sp, #8
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
 80033b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	2280      	movs	r2, #128	; 0x80
 80033bc:	0192      	lsls	r2, r2, #6
 80033be:	605a      	str	r2, [r3, #4]
	return 0;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	0018      	movs	r0, r3
 80033c4:	46bd      	mov	sp, r7
 80033c6:	b002      	add	sp, #8
 80033c8:	bd80      	pop	{r7, pc}

080033ca <_isatty>:

int _isatty(int file)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
	return 1;
 80033d2:	2301      	movs	r3, #1
}
 80033d4:	0018      	movs	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	b002      	add	sp, #8
 80033da:	bd80      	pop	{r7, pc}

080033dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
	return 0;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	0018      	movs	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	b004      	add	sp, #16
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033fc:	4a14      	ldr	r2, [pc, #80]	; (8003450 <_sbrk+0x5c>)
 80033fe:	4b15      	ldr	r3, [pc, #84]	; (8003454 <_sbrk+0x60>)
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003408:	4b13      	ldr	r3, [pc, #76]	; (8003458 <_sbrk+0x64>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d102      	bne.n	8003416 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003410:	4b11      	ldr	r3, [pc, #68]	; (8003458 <_sbrk+0x64>)
 8003412:	4a12      	ldr	r2, [pc, #72]	; (800345c <_sbrk+0x68>)
 8003414:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003416:	4b10      	ldr	r3, [pc, #64]	; (8003458 <_sbrk+0x64>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	18d3      	adds	r3, r2, r3
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	429a      	cmp	r2, r3
 8003422:	d207      	bcs.n	8003434 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003424:	f003 fd6e 	bl	8006f04 <__errno>
 8003428:	0003      	movs	r3, r0
 800342a:	220c      	movs	r2, #12
 800342c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800342e:	2301      	movs	r3, #1
 8003430:	425b      	negs	r3, r3
 8003432:	e009      	b.n	8003448 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003434:	4b08      	ldr	r3, [pc, #32]	; (8003458 <_sbrk+0x64>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800343a:	4b07      	ldr	r3, [pc, #28]	; (8003458 <_sbrk+0x64>)
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	18d2      	adds	r2, r2, r3
 8003442:	4b05      	ldr	r3, [pc, #20]	; (8003458 <_sbrk+0x64>)
 8003444:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003446:	68fb      	ldr	r3, [r7, #12]
}
 8003448:	0018      	movs	r0, r3
 800344a:	46bd      	mov	sp, r7
 800344c:	b006      	add	sp, #24
 800344e:	bd80      	pop	{r7, pc}
 8003450:	20004000 	.word	0x20004000
 8003454:	00000400 	.word	0x00000400
 8003458:	20000418 	.word	0x20000418
 800345c:	20000430 	.word	0x20000430

08003460 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003464:	46c0      	nop			; (mov r8, r8)
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
	...

0800346c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800346c:	480d      	ldr	r0, [pc, #52]	; (80034a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800346e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003470:	f7ff fff6 	bl	8003460 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003474:	480c      	ldr	r0, [pc, #48]	; (80034a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003476:	490d      	ldr	r1, [pc, #52]	; (80034ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8003478:	4a0d      	ldr	r2, [pc, #52]	; (80034b0 <LoopForever+0xe>)
  movs r3, #0
 800347a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800347c:	e002      	b.n	8003484 <LoopCopyDataInit>

0800347e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800347e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003482:	3304      	adds	r3, #4

08003484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003488:	d3f9      	bcc.n	800347e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800348a:	4a0a      	ldr	r2, [pc, #40]	; (80034b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800348c:	4c0a      	ldr	r4, [pc, #40]	; (80034b8 <LoopForever+0x16>)
  movs r3, #0
 800348e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003490:	e001      	b.n	8003496 <LoopFillZerobss>

08003492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003494:	3204      	adds	r2, #4

08003496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003498:	d3fb      	bcc.n	8003492 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800349a:	f003 fd39 	bl	8006f10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800349e:	f7ff fb93 	bl	8002bc8 <main>

080034a2 <LoopForever>:

LoopForever:
    b LoopForever
 80034a2:	e7fe      	b.n	80034a2 <LoopForever>
  ldr   r0, =_estack
 80034a4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80034a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034ac:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80034b0:	0800c8c4 	.word	0x0800c8c4
  ldr r2, =_sbss
 80034b4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80034b8:	20000430 	.word	0x20000430

080034bc <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80034bc:	e7fe      	b.n	80034bc <CEC_CAN_IRQHandler>
	...

080034c0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034c4:	4b07      	ldr	r3, [pc, #28]	; (80034e4 <HAL_Init+0x24>)
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	4b06      	ldr	r3, [pc, #24]	; (80034e4 <HAL_Init+0x24>)
 80034ca:	2110      	movs	r1, #16
 80034cc:	430a      	orrs	r2, r1
 80034ce:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80034d0:	2000      	movs	r0, #0
 80034d2:	f000 f809 	bl	80034e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034d6:	f7ff fda3 	bl	8003020 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	0018      	movs	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	40022000 	.word	0x40022000

080034e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034e8:	b590      	push	{r4, r7, lr}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034f0:	4b14      	ldr	r3, [pc, #80]	; (8003544 <HAL_InitTick+0x5c>)
 80034f2:	681c      	ldr	r4, [r3, #0]
 80034f4:	4b14      	ldr	r3, [pc, #80]	; (8003548 <HAL_InitTick+0x60>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	0019      	movs	r1, r3
 80034fa:	23fa      	movs	r3, #250	; 0xfa
 80034fc:	0098      	lsls	r0, r3, #2
 80034fe:	f7fc fe1f 	bl	8000140 <__udivsi3>
 8003502:	0003      	movs	r3, r0
 8003504:	0019      	movs	r1, r3
 8003506:	0020      	movs	r0, r4
 8003508:	f7fc fe1a 	bl	8000140 <__udivsi3>
 800350c:	0003      	movs	r3, r0
 800350e:	0018      	movs	r0, r3
 8003510:	f000 fdc3 	bl	800409a <HAL_SYSTICK_Config>
 8003514:	1e03      	subs	r3, r0, #0
 8003516:	d001      	beq.n	800351c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e00f      	b.n	800353c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b03      	cmp	r3, #3
 8003520:	d80b      	bhi.n	800353a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	2301      	movs	r3, #1
 8003526:	425b      	negs	r3, r3
 8003528:	2200      	movs	r2, #0
 800352a:	0018      	movs	r0, r3
 800352c:	f000 fd90 	bl	8004050 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003530:	4b06      	ldr	r3, [pc, #24]	; (800354c <HAL_InitTick+0x64>)
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003536:	2300      	movs	r3, #0
 8003538:	e000      	b.n	800353c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
}
 800353c:	0018      	movs	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	b003      	add	sp, #12
 8003542:	bd90      	pop	{r4, r7, pc}
 8003544:	20000008 	.word	0x20000008
 8003548:	20000010 	.word	0x20000010
 800354c:	2000000c 	.word	0x2000000c

08003550 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003554:	4b05      	ldr	r3, [pc, #20]	; (800356c <HAL_IncTick+0x1c>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	001a      	movs	r2, r3
 800355a:	4b05      	ldr	r3, [pc, #20]	; (8003570 <HAL_IncTick+0x20>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	18d2      	adds	r2, r2, r3
 8003560:	4b03      	ldr	r3, [pc, #12]	; (8003570 <HAL_IncTick+0x20>)
 8003562:	601a      	str	r2, [r3, #0]
}
 8003564:	46c0      	nop			; (mov r8, r8)
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	20000010 	.word	0x20000010
 8003570:	2000041c 	.word	0x2000041c

08003574 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  return uwTick;
 8003578:	4b02      	ldr	r3, [pc, #8]	; (8003584 <HAL_GetTick+0x10>)
 800357a:	681b      	ldr	r3, [r3, #0]
}
 800357c:	0018      	movs	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	2000041c 	.word	0x2000041c

08003588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003590:	f7ff fff0 	bl	8003574 <HAL_GetTick>
 8003594:	0003      	movs	r3, r0
 8003596:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	3301      	adds	r3, #1
 80035a0:	d005      	beq.n	80035ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035a2:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <HAL_Delay+0x44>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	001a      	movs	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	189b      	adds	r3, r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	f7ff ffe0 	bl	8003574 <HAL_GetTick>
 80035b4:	0002      	movs	r2, r0
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d8f7      	bhi.n	80035b0 <HAL_Delay+0x28>
  {
  }
}
 80035c0:	46c0      	nop			; (mov r8, r8)
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	46bd      	mov	sp, r7
 80035c6:	b004      	add	sp, #16
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	20000010 	.word	0x20000010

080035d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035d8:	230f      	movs	r3, #15
 80035da:	18fb      	adds	r3, r7, r3
 80035dc:	2200      	movs	r2, #0
 80035de:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e125      	b.n	800383a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10a      	bne.n	800360c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2234      	movs	r2, #52	; 0x34
 8003600:	2100      	movs	r1, #0
 8003602:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	0018      	movs	r0, r3
 8003608:	f7ff fd2e 	bl	8003068 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003610:	2210      	movs	r2, #16
 8003612:	4013      	ands	r3, r2
 8003614:	d000      	beq.n	8003618 <HAL_ADC_Init+0x48>
 8003616:	e103      	b.n	8003820 <HAL_ADC_Init+0x250>
 8003618:	230f      	movs	r3, #15
 800361a:	18fb      	adds	r3, r7, r3
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d000      	beq.n	8003624 <HAL_ADC_Init+0x54>
 8003622:	e0fd      	b.n	8003820 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2204      	movs	r2, #4
 800362c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800362e:	d000      	beq.n	8003632 <HAL_ADC_Init+0x62>
 8003630:	e0f6      	b.n	8003820 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003636:	4a83      	ldr	r2, [pc, #524]	; (8003844 <HAL_ADC_Init+0x274>)
 8003638:	4013      	ands	r3, r2
 800363a:	2202      	movs	r2, #2
 800363c:	431a      	orrs	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2203      	movs	r2, #3
 800364a:	4013      	ands	r3, r2
 800364c:	2b01      	cmp	r3, #1
 800364e:	d112      	bne.n	8003676 <HAL_ADC_Init+0xa6>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2201      	movs	r2, #1
 8003658:	4013      	ands	r3, r2
 800365a:	2b01      	cmp	r3, #1
 800365c:	d009      	beq.n	8003672 <HAL_ADC_Init+0xa2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68da      	ldr	r2, [r3, #12]
 8003664:	2380      	movs	r3, #128	; 0x80
 8003666:	021b      	lsls	r3, r3, #8
 8003668:	401a      	ands	r2, r3
 800366a:	2380      	movs	r3, #128	; 0x80
 800366c:	021b      	lsls	r3, r3, #8
 800366e:	429a      	cmp	r2, r3
 8003670:	d101      	bne.n	8003676 <HAL_ADC_Init+0xa6>
 8003672:	2301      	movs	r3, #1
 8003674:	e000      	b.n	8003678 <HAL_ADC_Init+0xa8>
 8003676:	2300      	movs	r3, #0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d116      	bne.n	80036aa <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	2218      	movs	r2, #24
 8003684:	4393      	bics	r3, r2
 8003686:	0019      	movs	r1, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	0899      	lsrs	r1, r3, #2
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4964      	ldr	r1, [pc, #400]	; (8003848 <HAL_ADC_Init+0x278>)
 80036b6:	400a      	ands	r2, r1
 80036b8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	7e1b      	ldrb	r3, [r3, #24]
 80036be:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	7e5b      	ldrb	r3, [r3, #25]
 80036c4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80036c6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	7e9b      	ldrb	r3, [r3, #26]
 80036cc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80036ce:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d002      	beq.n	80036de <HAL_ADC_Init+0x10e>
 80036d8:	2380      	movs	r3, #128	; 0x80
 80036da:	015b      	lsls	r3, r3, #5
 80036dc:	e000      	b.n	80036e0 <HAL_ADC_Init+0x110>
 80036de:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80036e0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80036e6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d101      	bne.n	80036f4 <HAL_ADC_Init+0x124>
 80036f0:	2304      	movs	r3, #4
 80036f2:	e000      	b.n	80036f6 <HAL_ADC_Init+0x126>
 80036f4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80036f6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2124      	movs	r1, #36	; 0x24
 80036fc:	5c5b      	ldrb	r3, [r3, r1]
 80036fe:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003700:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	4313      	orrs	r3, r2
 8003706:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	7edb      	ldrb	r3, [r3, #27]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d115      	bne.n	800373c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	7e9b      	ldrb	r3, [r3, #26]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d105      	bne.n	8003724 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2280      	movs	r2, #128	; 0x80
 800371c:	0252      	lsls	r2, r2, #9
 800371e:	4313      	orrs	r3, r2
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	e00b      	b.n	800373c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003728:	2220      	movs	r2, #32
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003734:	2201      	movs	r2, #1
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69da      	ldr	r2, [r3, #28]
 8003740:	23c2      	movs	r3, #194	; 0xc2
 8003742:	33ff      	adds	r3, #255	; 0xff
 8003744:	429a      	cmp	r2, r3
 8003746:	d007      	beq.n	8003758 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003750:	4313      	orrs	r3, r2
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	4313      	orrs	r3, r2
 8003756:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68d9      	ldr	r1, [r3, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	430a      	orrs	r2, r1
 8003766:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800376c:	2380      	movs	r3, #128	; 0x80
 800376e:	055b      	lsls	r3, r3, #21
 8003770:	429a      	cmp	r2, r3
 8003772:	d01b      	beq.n	80037ac <HAL_ADC_Init+0x1dc>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	2b01      	cmp	r3, #1
 800377a:	d017      	beq.n	80037ac <HAL_ADC_Init+0x1dc>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003780:	2b02      	cmp	r3, #2
 8003782:	d013      	beq.n	80037ac <HAL_ADC_Init+0x1dc>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	2b03      	cmp	r3, #3
 800378a:	d00f      	beq.n	80037ac <HAL_ADC_Init+0x1dc>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003790:	2b04      	cmp	r3, #4
 8003792:	d00b      	beq.n	80037ac <HAL_ADC_Init+0x1dc>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003798:	2b05      	cmp	r3, #5
 800379a:	d007      	beq.n	80037ac <HAL_ADC_Init+0x1dc>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a0:	2b06      	cmp	r3, #6
 80037a2:	d003      	beq.n	80037ac <HAL_ADC_Init+0x1dc>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	2b07      	cmp	r3, #7
 80037aa:	d112      	bne.n	80037d2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695a      	ldr	r2, [r3, #20]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2107      	movs	r1, #7
 80037b8:	438a      	bics	r2, r1
 80037ba:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6959      	ldr	r1, [r3, #20]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c6:	2207      	movs	r2, #7
 80037c8:	401a      	ands	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	4a1c      	ldr	r2, [pc, #112]	; (800384c <HAL_ADC_Init+0x27c>)
 80037da:	4013      	ands	r3, r2
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d10b      	bne.n	80037fa <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ec:	2203      	movs	r2, #3
 80037ee:	4393      	bics	r3, r2
 80037f0:	2201      	movs	r2, #1
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80037f8:	e01c      	b.n	8003834 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fe:	2212      	movs	r2, #18
 8003800:	4393      	bics	r3, r2
 8003802:	2210      	movs	r2, #16
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380e:	2201      	movs	r2, #1
 8003810:	431a      	orrs	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003816:	230f      	movs	r3, #15
 8003818:	18fb      	adds	r3, r7, r3
 800381a:	2201      	movs	r2, #1
 800381c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800381e:	e009      	b.n	8003834 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003824:	2210      	movs	r2, #16
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800382c:	230f      	movs	r3, #15
 800382e:	18fb      	adds	r3, r7, r3
 8003830:	2201      	movs	r2, #1
 8003832:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003834:	230f      	movs	r3, #15
 8003836:	18fb      	adds	r3, r7, r3
 8003838:	781b      	ldrb	r3, [r3, #0]
}
 800383a:	0018      	movs	r0, r3
 800383c:	46bd      	mov	sp, r7
 800383e:	b004      	add	sp, #16
 8003840:	bd80      	pop	{r7, pc}
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	fffffefd 	.word	0xfffffefd
 8003848:	fffe0219 	.word	0xfffe0219
 800384c:	833fffe7 	.word	0x833fffe7

08003850 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003850:	b590      	push	{r4, r7, lr}
 8003852:	b087      	sub	sp, #28
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800385c:	2317      	movs	r3, #23
 800385e:	18fb      	adds	r3, r7, r3
 8003860:	2200      	movs	r2, #0
 8003862:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2204      	movs	r2, #4
 800386c:	4013      	ands	r3, r2
 800386e:	d15e      	bne.n	800392e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2234      	movs	r2, #52	; 0x34
 8003874:	5c9b      	ldrb	r3, [r3, r2]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <HAL_ADC_Start_DMA+0x2e>
 800387a:	2302      	movs	r3, #2
 800387c:	e05e      	b.n	800393c <HAL_ADC_Start_DMA+0xec>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2234      	movs	r2, #52	; 0x34
 8003882:	2101      	movs	r1, #1
 8003884:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	7e5b      	ldrb	r3, [r3, #25]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d007      	beq.n	800389e <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800388e:	2317      	movs	r3, #23
 8003890:	18fc      	adds	r4, r7, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	0018      	movs	r0, r3
 8003896:	f000 fa27 	bl	8003ce8 <ADC_Enable>
 800389a:	0003      	movs	r3, r0
 800389c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800389e:	2317      	movs	r3, #23
 80038a0:	18fb      	adds	r3, r7, r3
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d146      	bne.n	8003936 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ac:	4a25      	ldr	r2, [pc, #148]	; (8003944 <HAL_ADC_Start_DMA+0xf4>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	2280      	movs	r2, #128	; 0x80
 80038b2:	0052      	lsls	r2, r2, #1
 80038b4:	431a      	orrs	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2234      	movs	r2, #52	; 0x34
 80038c4:	2100      	movs	r1, #0
 80038c6:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038cc:	4a1e      	ldr	r2, [pc, #120]	; (8003948 <HAL_ADC_Start_DMA+0xf8>)
 80038ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	4a1d      	ldr	r2, [pc, #116]	; (800394c <HAL_ADC_Start_DMA+0xfc>)
 80038d6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038dc:	4a1c      	ldr	r2, [pc, #112]	; (8003950 <HAL_ADC_Start_DMA+0x100>)
 80038de:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	221c      	movs	r2, #28
 80038e6:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2110      	movs	r1, #16
 80038f4:	430a      	orrs	r2, r1
 80038f6:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2101      	movs	r1, #1
 8003904:	430a      	orrs	r2, r1
 8003906:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	3340      	adds	r3, #64	; 0x40
 8003912:	0019      	movs	r1, r3
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f000 fc14 	bl	8004144 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689a      	ldr	r2, [r3, #8]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2104      	movs	r1, #4
 8003928:	430a      	orrs	r2, r1
 800392a:	609a      	str	r2, [r3, #8]
 800392c:	e003      	b.n	8003936 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800392e:	2317      	movs	r3, #23
 8003930:	18fb      	adds	r3, r7, r3
 8003932:	2202      	movs	r2, #2
 8003934:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003936:	2317      	movs	r3, #23
 8003938:	18fb      	adds	r3, r7, r3
 800393a:	781b      	ldrb	r3, [r3, #0]
}
 800393c:	0018      	movs	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	b007      	add	sp, #28
 8003942:	bd90      	pop	{r4, r7, pc}
 8003944:	fffff0fe 	.word	0xfffff0fe
 8003948:	08003df1 	.word	0x08003df1
 800394c:	08003ea5 	.word	0x08003ea5
 8003950:	08003ec3 	.word	0x08003ec3

08003954 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2204      	movs	r2, #4
 8003970:	4013      	ands	r3, r2
 8003972:	d003      	beq.n	800397c <HAL_ADC_IRQHandler+0x28>
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2204      	movs	r2, #4
 8003978:	4013      	ands	r3, r2
 800397a:	d107      	bne.n	800398c <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2208      	movs	r2, #8
 8003980:	4013      	ands	r3, r2
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003982:	d049      	beq.n	8003a18 <HAL_ADC_IRQHandler+0xc4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2208      	movs	r2, #8
 8003988:	4013      	ands	r3, r2
 800398a:	d045      	beq.n	8003a18 <HAL_ADC_IRQHandler+0xc4>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003990:	2210      	movs	r2, #16
 8003992:	4013      	ands	r3, r2
 8003994:	d106      	bne.n	80039a4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399a:	2280      	movs	r2, #128	; 0x80
 800399c:	0092      	lsls	r2, r2, #2
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68da      	ldr	r2, [r3, #12]
 80039aa:	23c0      	movs	r3, #192	; 0xc0
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	4013      	ands	r3, r2
 80039b0:	d12a      	bne.n	8003a08 <HAL_ADC_IRQHandler+0xb4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d126      	bne.n	8003a08 <HAL_ADC_IRQHandler+0xb4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2208      	movs	r2, #8
 80039be:	4013      	ands	r3, r2
 80039c0:	d022      	beq.n	8003a08 <HAL_ADC_IRQHandler+0xb4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	2204      	movs	r2, #4
 80039ca:	4013      	ands	r3, r2
 80039cc:	d110      	bne.n	80039f0 <HAL_ADC_IRQHandler+0x9c>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	210c      	movs	r1, #12
 80039da:	438a      	bics	r2, r1
 80039dc:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e2:	4a2d      	ldr	r2, [pc, #180]	; (8003a98 <HAL_ADC_IRQHandler+0x144>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	2201      	movs	r2, #1
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	639a      	str	r2, [r3, #56]	; 0x38
 80039ee:	e00b      	b.n	8003a08 <HAL_ADC_IRQHandler+0xb4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f4:	2220      	movs	r2, #32
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a00:	2201      	movs	r2, #1
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	f7ff f88e 	bl	8002b2c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	220c      	movs	r2, #12
 8003a16:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2280      	movs	r2, #128	; 0x80
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	d012      	beq.n	8003a46 <HAL_ADC_IRQHandler+0xf2>
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2280      	movs	r2, #128	; 0x80
 8003a24:	4013      	ands	r3, r2
 8003a26:	d00e      	beq.n	8003a46 <HAL_ADC_IRQHandler+0xf2>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2c:	2280      	movs	r2, #128	; 0x80
 8003a2e:	0252      	lsls	r2, r2, #9
 8003a30:	431a      	orrs	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f000 f837 	bl	8003aac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2280      	movs	r2, #128	; 0x80
 8003a44:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2210      	movs	r2, #16
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d020      	beq.n	8003a90 <HAL_ADC_IRQHandler+0x13c>
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	2210      	movs	r2, #16
 8003a52:	4013      	ands	r3, r2
 8003a54:	d01c      	beq.n	8003a90 <HAL_ADC_IRQHandler+0x13c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d006      	beq.n	8003a6c <HAL_ADC_IRQHandler+0x118>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	2201      	movs	r2, #1
 8003a66:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d10d      	bne.n	8003a88 <HAL_ADC_IRQHandler+0x134>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a70:	2202      	movs	r2, #2
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2210      	movs	r2, #16
 8003a7e:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	0018      	movs	r0, r3
 8003a84:	f000 f81a 	bl	8003abc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2210      	movs	r2, #16
 8003a8e:	601a      	str	r2, [r3, #0]
  }

}
 8003a90:	46c0      	nop			; (mov r8, r8)
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b004      	add	sp, #16
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	fffffefe 	.word	0xfffffefe

08003a9c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003aa4:	46c0      	nop			; (mov r8, r8)
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	b002      	add	sp, #8
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8003ab4:	46c0      	nop			; (mov r8, r8)
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	b002      	add	sp, #8
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003ac4:	46c0      	nop			; (mov r8, r8)
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	b002      	add	sp, #8
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ad6:	230f      	movs	r3, #15
 8003ad8:	18fb      	adds	r3, r7, r3
 8003ada:	2200      	movs	r2, #0
 8003adc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae6:	2380      	movs	r3, #128	; 0x80
 8003ae8:	055b      	lsls	r3, r3, #21
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d011      	beq.n	8003b12 <HAL_ADC_ConfigChannel+0x46>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d00d      	beq.n	8003b12 <HAL_ADC_ConfigChannel+0x46>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d009      	beq.n	8003b12 <HAL_ADC_ConfigChannel+0x46>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	2b03      	cmp	r3, #3
 8003b04:	d005      	beq.n	8003b12 <HAL_ADC_ConfigChannel+0x46>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d001      	beq.n	8003b12 <HAL_ADC_ConfigChannel+0x46>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2234      	movs	r2, #52	; 0x34
 8003b16:	5c9b      	ldrb	r3, [r3, r2]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_ADC_ConfigChannel+0x54>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e0d0      	b.n	8003cc2 <HAL_ADC_ConfigChannel+0x1f6>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2234      	movs	r2, #52	; 0x34
 8003b24:	2101      	movs	r1, #1
 8003b26:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2204      	movs	r2, #4
 8003b30:	4013      	ands	r3, r2
 8003b32:	d000      	beq.n	8003b36 <HAL_ADC_ConfigChannel+0x6a>
 8003b34:	e0b4      	b.n	8003ca0 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	4a64      	ldr	r2, [pc, #400]	; (8003ccc <HAL_ADC_ConfigChannel+0x200>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d100      	bne.n	8003b42 <HAL_ADC_ConfigChannel+0x76>
 8003b40:	e082      	b.n	8003c48 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b5c:	2380      	movs	r3, #128	; 0x80
 8003b5e:	055b      	lsls	r3, r3, #21
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d037      	beq.n	8003bd4 <HAL_ADC_ConfigChannel+0x108>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d033      	beq.n	8003bd4 <HAL_ADC_ConfigChannel+0x108>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d02f      	beq.n	8003bd4 <HAL_ADC_ConfigChannel+0x108>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b78:	2b03      	cmp	r3, #3
 8003b7a:	d02b      	beq.n	8003bd4 <HAL_ADC_ConfigChannel+0x108>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	d027      	beq.n	8003bd4 <HAL_ADC_ConfigChannel+0x108>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b88:	2b05      	cmp	r3, #5
 8003b8a:	d023      	beq.n	8003bd4 <HAL_ADC_ConfigChannel+0x108>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b90:	2b06      	cmp	r3, #6
 8003b92:	d01f      	beq.n	8003bd4 <HAL_ADC_ConfigChannel+0x108>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b98:	2b07      	cmp	r3, #7
 8003b9a:	d01b      	beq.n	8003bd4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	2107      	movs	r1, #7
 8003ba8:	400b      	ands	r3, r1
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d012      	beq.n	8003bd4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695a      	ldr	r2, [r3, #20]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2107      	movs	r1, #7
 8003bba:	438a      	bics	r2, r1
 8003bbc:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	6959      	ldr	r1, [r3, #20]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	2207      	movs	r2, #7
 8003bca:	401a      	ands	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b10      	cmp	r3, #16
 8003bda:	d007      	beq.n	8003bec <HAL_ADC_ConfigChannel+0x120>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2b11      	cmp	r3, #17
 8003be2:	d003      	beq.n	8003bec <HAL_ADC_ConfigChannel+0x120>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b12      	cmp	r3, #18
 8003bea:	d163      	bne.n	8003cb4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003bec:	4b38      	ldr	r3, [pc, #224]	; (8003cd0 <HAL_ADC_ConfigChannel+0x204>)
 8003bee:	6819      	ldr	r1, [r3, #0]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b10      	cmp	r3, #16
 8003bf6:	d009      	beq.n	8003c0c <HAL_ADC_ConfigChannel+0x140>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b11      	cmp	r3, #17
 8003bfe:	d102      	bne.n	8003c06 <HAL_ADC_ConfigChannel+0x13a>
 8003c00:	2380      	movs	r3, #128	; 0x80
 8003c02:	03db      	lsls	r3, r3, #15
 8003c04:	e004      	b.n	8003c10 <HAL_ADC_ConfigChannel+0x144>
 8003c06:	2380      	movs	r3, #128	; 0x80
 8003c08:	045b      	lsls	r3, r3, #17
 8003c0a:	e001      	b.n	8003c10 <HAL_ADC_ConfigChannel+0x144>
 8003c0c:	2380      	movs	r3, #128	; 0x80
 8003c0e:	041b      	lsls	r3, r3, #16
 8003c10:	4a2f      	ldr	r2, [pc, #188]	; (8003cd0 <HAL_ADC_ConfigChannel+0x204>)
 8003c12:	430b      	orrs	r3, r1
 8003c14:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b10      	cmp	r3, #16
 8003c1c:	d14a      	bne.n	8003cb4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c1e:	4b2d      	ldr	r3, [pc, #180]	; (8003cd4 <HAL_ADC_ConfigChannel+0x208>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	492d      	ldr	r1, [pc, #180]	; (8003cd8 <HAL_ADC_ConfigChannel+0x20c>)
 8003c24:	0018      	movs	r0, r3
 8003c26:	f7fc fa8b 	bl	8000140 <__udivsi3>
 8003c2a:	0003      	movs	r3, r0
 8003c2c:	001a      	movs	r2, r3
 8003c2e:	0013      	movs	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	189b      	adds	r3, r3, r2
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c38:	e002      	b.n	8003c40 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f9      	bne.n	8003c3a <HAL_ADC_ConfigChannel+0x16e>
 8003c46:	e035      	b.n	8003cb4 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2101      	movs	r1, #1
 8003c54:	4099      	lsls	r1, r3
 8003c56:	000b      	movs	r3, r1
 8003c58:	43d9      	mvns	r1, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	400a      	ands	r2, r1
 8003c60:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b10      	cmp	r3, #16
 8003c68:	d007      	beq.n	8003c7a <HAL_ADC_ConfigChannel+0x1ae>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b11      	cmp	r3, #17
 8003c70:	d003      	beq.n	8003c7a <HAL_ADC_ConfigChannel+0x1ae>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b12      	cmp	r3, #18
 8003c78:	d11c      	bne.n	8003cb4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003c7a:	4b15      	ldr	r3, [pc, #84]	; (8003cd0 <HAL_ADC_ConfigChannel+0x204>)
 8003c7c:	6819      	ldr	r1, [r3, #0]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2b10      	cmp	r3, #16
 8003c84:	d007      	beq.n	8003c96 <HAL_ADC_ConfigChannel+0x1ca>
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2b11      	cmp	r3, #17
 8003c8c:	d101      	bne.n	8003c92 <HAL_ADC_ConfigChannel+0x1c6>
 8003c8e:	4b13      	ldr	r3, [pc, #76]	; (8003cdc <HAL_ADC_ConfigChannel+0x210>)
 8003c90:	e002      	b.n	8003c98 <HAL_ADC_ConfigChannel+0x1cc>
 8003c92:	4b13      	ldr	r3, [pc, #76]	; (8003ce0 <HAL_ADC_ConfigChannel+0x214>)
 8003c94:	e000      	b.n	8003c98 <HAL_ADC_ConfigChannel+0x1cc>
 8003c96:	4b13      	ldr	r3, [pc, #76]	; (8003ce4 <HAL_ADC_ConfigChannel+0x218>)
 8003c98:	4a0d      	ldr	r2, [pc, #52]	; (8003cd0 <HAL_ADC_ConfigChannel+0x204>)
 8003c9a:	400b      	ands	r3, r1
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	e009      	b.n	8003cb4 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003cac:	230f      	movs	r3, #15
 8003cae:	18fb      	adds	r3, r7, r3
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2234      	movs	r2, #52	; 0x34
 8003cb8:	2100      	movs	r1, #0
 8003cba:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003cbc:	230f      	movs	r3, #15
 8003cbe:	18fb      	adds	r3, r7, r3
 8003cc0:	781b      	ldrb	r3, [r3, #0]
}
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	b004      	add	sp, #16
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	46c0      	nop			; (mov r8, r8)
 8003ccc:	00001001 	.word	0x00001001
 8003cd0:	40012708 	.word	0x40012708
 8003cd4:	20000008 	.word	0x20000008
 8003cd8:	000f4240 	.word	0x000f4240
 8003cdc:	ffbfffff 	.word	0xffbfffff
 8003ce0:	feffffff 	.word	0xfeffffff
 8003ce4:	ff7fffff 	.word	0xff7fffff

08003ce8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	2203      	movs	r2, #3
 8003d00:	4013      	ands	r3, r2
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d112      	bne.n	8003d2c <ADC_Enable+0x44>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	4013      	ands	r3, r2
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d009      	beq.n	8003d28 <ADC_Enable+0x40>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	2380      	movs	r3, #128	; 0x80
 8003d1c:	021b      	lsls	r3, r3, #8
 8003d1e:	401a      	ands	r2, r3
 8003d20:	2380      	movs	r3, #128	; 0x80
 8003d22:	021b      	lsls	r3, r3, #8
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d101      	bne.n	8003d2c <ADC_Enable+0x44>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e000      	b.n	8003d2e <ADC_Enable+0x46>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d152      	bne.n	8003dd8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	4a2a      	ldr	r2, [pc, #168]	; (8003de4 <ADC_Enable+0xfc>)
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	d00d      	beq.n	8003d5a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d42:	2210      	movs	r2, #16
 8003d44:	431a      	orrs	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4e:	2201      	movs	r2, #1
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e03f      	b.n	8003dda <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2101      	movs	r1, #1
 8003d66:	430a      	orrs	r2, r1
 8003d68:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003d6a:	4b1f      	ldr	r3, [pc, #124]	; (8003de8 <ADC_Enable+0x100>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	491f      	ldr	r1, [pc, #124]	; (8003dec <ADC_Enable+0x104>)
 8003d70:	0018      	movs	r0, r3
 8003d72:	f7fc f9e5 	bl	8000140 <__udivsi3>
 8003d76:	0003      	movs	r3, r0
 8003d78:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003d7a:	e002      	b.n	8003d82 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1f9      	bne.n	8003d7c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d88:	f7ff fbf4 	bl	8003574 <HAL_GetTick>
 8003d8c:	0003      	movs	r3, r0
 8003d8e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003d90:	e01b      	b.n	8003dca <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d92:	f7ff fbef 	bl	8003574 <HAL_GetTick>
 8003d96:	0002      	movs	r2, r0
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d914      	bls.n	8003dca <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2201      	movs	r2, #1
 8003da8:	4013      	ands	r3, r2
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d00d      	beq.n	8003dca <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db2:	2210      	movs	r2, #16
 8003db4:	431a      	orrs	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e007      	b.n	8003dda <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d1dc      	bne.n	8003d92 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	0018      	movs	r0, r3
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	b004      	add	sp, #16
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	46c0      	nop			; (mov r8, r8)
 8003de4:	80000017 	.word	0x80000017
 8003de8:	20000008 	.word	0x20000008
 8003dec:	000f4240 	.word	0x000f4240

08003df0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e02:	2250      	movs	r2, #80	; 0x50
 8003e04:	4013      	ands	r3, r2
 8003e06:	d140      	bne.n	8003e8a <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0c:	2280      	movs	r2, #128	; 0x80
 8003e0e:	0092      	lsls	r2, r2, #2
 8003e10:	431a      	orrs	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	23c0      	movs	r3, #192	; 0xc0
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	4013      	ands	r3, r2
 8003e22:	d12d      	bne.n	8003e80 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d129      	bne.n	8003e80 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2208      	movs	r2, #8
 8003e34:	4013      	ands	r3, r2
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d122      	bne.n	8003e80 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2204      	movs	r2, #4
 8003e42:	4013      	ands	r3, r2
 8003e44:	d110      	bne.n	8003e68 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	210c      	movs	r1, #12
 8003e52:	438a      	bics	r2, r1
 8003e54:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5a:	4a11      	ldr	r2, [pc, #68]	; (8003ea0 <ADC_DMAConvCplt+0xb0>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	2201      	movs	r2, #1
 8003e60:	431a      	orrs	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	639a      	str	r2, [r3, #56]	; 0x38
 8003e66:	e00b      	b.n	8003e80 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e78:	2201      	movs	r2, #1
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	0018      	movs	r0, r3
 8003e84:	f7fe fe52 	bl	8002b2c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8003e88:	e005      	b.n	8003e96 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	0010      	movs	r0, r2
 8003e94:	4798      	blx	r3
}
 8003e96:	46c0      	nop			; (mov r8, r8)
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	b004      	add	sp, #16
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	46c0      	nop			; (mov r8, r8)
 8003ea0:	fffffefe 	.word	0xfffffefe

08003ea4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f7ff fdf1 	bl	8003a9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003eba:	46c0      	nop			; (mov r8, r8)
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	b004      	add	sp, #16
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b084      	sub	sp, #16
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed4:	2240      	movs	r2, #64	; 0x40
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee0:	2204      	movs	r2, #4
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	0018      	movs	r0, r3
 8003eec:	f7ff fde6 	bl	8003abc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ef0:	46c0      	nop			; (mov r8, r8)
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	b004      	add	sp, #16
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	0002      	movs	r2, r0
 8003f00:	1dfb      	adds	r3, r7, #7
 8003f02:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f04:	1dfb      	adds	r3, r7, #7
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	2b7f      	cmp	r3, #127	; 0x7f
 8003f0a:	d809      	bhi.n	8003f20 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f0c:	1dfb      	adds	r3, r7, #7
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	001a      	movs	r2, r3
 8003f12:	231f      	movs	r3, #31
 8003f14:	401a      	ands	r2, r3
 8003f16:	4b04      	ldr	r3, [pc, #16]	; (8003f28 <__NVIC_EnableIRQ+0x30>)
 8003f18:	2101      	movs	r1, #1
 8003f1a:	4091      	lsls	r1, r2
 8003f1c:	000a      	movs	r2, r1
 8003f1e:	601a      	str	r2, [r3, #0]
  }
}
 8003f20:	46c0      	nop			; (mov r8, r8)
 8003f22:	46bd      	mov	sp, r7
 8003f24:	b002      	add	sp, #8
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	e000e100 	.word	0xe000e100

08003f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f2c:	b590      	push	{r4, r7, lr}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	0002      	movs	r2, r0
 8003f34:	6039      	str	r1, [r7, #0]
 8003f36:	1dfb      	adds	r3, r7, #7
 8003f38:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f3a:	1dfb      	adds	r3, r7, #7
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	2b7f      	cmp	r3, #127	; 0x7f
 8003f40:	d828      	bhi.n	8003f94 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f42:	4a2f      	ldr	r2, [pc, #188]	; (8004000 <__NVIC_SetPriority+0xd4>)
 8003f44:	1dfb      	adds	r3, r7, #7
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	b25b      	sxtb	r3, r3
 8003f4a:	089b      	lsrs	r3, r3, #2
 8003f4c:	33c0      	adds	r3, #192	; 0xc0
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	589b      	ldr	r3, [r3, r2]
 8003f52:	1dfa      	adds	r2, r7, #7
 8003f54:	7812      	ldrb	r2, [r2, #0]
 8003f56:	0011      	movs	r1, r2
 8003f58:	2203      	movs	r2, #3
 8003f5a:	400a      	ands	r2, r1
 8003f5c:	00d2      	lsls	r2, r2, #3
 8003f5e:	21ff      	movs	r1, #255	; 0xff
 8003f60:	4091      	lsls	r1, r2
 8003f62:	000a      	movs	r2, r1
 8003f64:	43d2      	mvns	r2, r2
 8003f66:	401a      	ands	r2, r3
 8003f68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	019b      	lsls	r3, r3, #6
 8003f6e:	22ff      	movs	r2, #255	; 0xff
 8003f70:	401a      	ands	r2, r3
 8003f72:	1dfb      	adds	r3, r7, #7
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	0018      	movs	r0, r3
 8003f78:	2303      	movs	r3, #3
 8003f7a:	4003      	ands	r3, r0
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f80:	481f      	ldr	r0, [pc, #124]	; (8004000 <__NVIC_SetPriority+0xd4>)
 8003f82:	1dfb      	adds	r3, r7, #7
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	b25b      	sxtb	r3, r3
 8003f88:	089b      	lsrs	r3, r3, #2
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	33c0      	adds	r3, #192	; 0xc0
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003f92:	e031      	b.n	8003ff8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f94:	4a1b      	ldr	r2, [pc, #108]	; (8004004 <__NVIC_SetPriority+0xd8>)
 8003f96:	1dfb      	adds	r3, r7, #7
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	0019      	movs	r1, r3
 8003f9c:	230f      	movs	r3, #15
 8003f9e:	400b      	ands	r3, r1
 8003fa0:	3b08      	subs	r3, #8
 8003fa2:	089b      	lsrs	r3, r3, #2
 8003fa4:	3306      	adds	r3, #6
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	18d3      	adds	r3, r2, r3
 8003faa:	3304      	adds	r3, #4
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	1dfa      	adds	r2, r7, #7
 8003fb0:	7812      	ldrb	r2, [r2, #0]
 8003fb2:	0011      	movs	r1, r2
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	400a      	ands	r2, r1
 8003fb8:	00d2      	lsls	r2, r2, #3
 8003fba:	21ff      	movs	r1, #255	; 0xff
 8003fbc:	4091      	lsls	r1, r2
 8003fbe:	000a      	movs	r2, r1
 8003fc0:	43d2      	mvns	r2, r2
 8003fc2:	401a      	ands	r2, r3
 8003fc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	019b      	lsls	r3, r3, #6
 8003fca:	22ff      	movs	r2, #255	; 0xff
 8003fcc:	401a      	ands	r2, r3
 8003fce:	1dfb      	adds	r3, r7, #7
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	4003      	ands	r3, r0
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fdc:	4809      	ldr	r0, [pc, #36]	; (8004004 <__NVIC_SetPriority+0xd8>)
 8003fde:	1dfb      	adds	r3, r7, #7
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	001c      	movs	r4, r3
 8003fe4:	230f      	movs	r3, #15
 8003fe6:	4023      	ands	r3, r4
 8003fe8:	3b08      	subs	r3, #8
 8003fea:	089b      	lsrs	r3, r3, #2
 8003fec:	430a      	orrs	r2, r1
 8003fee:	3306      	adds	r3, #6
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	18c3      	adds	r3, r0, r3
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	601a      	str	r2, [r3, #0]
}
 8003ff8:	46c0      	nop			; (mov r8, r8)
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	b003      	add	sp, #12
 8003ffe:	bd90      	pop	{r4, r7, pc}
 8004000:	e000e100 	.word	0xe000e100
 8004004:	e000ed00 	.word	0xe000ed00

08004008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	1e5a      	subs	r2, r3, #1
 8004014:	2380      	movs	r3, #128	; 0x80
 8004016:	045b      	lsls	r3, r3, #17
 8004018:	429a      	cmp	r2, r3
 800401a:	d301      	bcc.n	8004020 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800401c:	2301      	movs	r3, #1
 800401e:	e010      	b.n	8004042 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004020:	4b0a      	ldr	r3, [pc, #40]	; (800404c <SysTick_Config+0x44>)
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	3a01      	subs	r2, #1
 8004026:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004028:	2301      	movs	r3, #1
 800402a:	425b      	negs	r3, r3
 800402c:	2103      	movs	r1, #3
 800402e:	0018      	movs	r0, r3
 8004030:	f7ff ff7c 	bl	8003f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004034:	4b05      	ldr	r3, [pc, #20]	; (800404c <SysTick_Config+0x44>)
 8004036:	2200      	movs	r2, #0
 8004038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800403a:	4b04      	ldr	r3, [pc, #16]	; (800404c <SysTick_Config+0x44>)
 800403c:	2207      	movs	r2, #7
 800403e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004040:	2300      	movs	r3, #0
}
 8004042:	0018      	movs	r0, r3
 8004044:	46bd      	mov	sp, r7
 8004046:	b002      	add	sp, #8
 8004048:	bd80      	pop	{r7, pc}
 800404a:	46c0      	nop			; (mov r8, r8)
 800404c:	e000e010 	.word	0xe000e010

08004050 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	60b9      	str	r1, [r7, #8]
 8004058:	607a      	str	r2, [r7, #4]
 800405a:	210f      	movs	r1, #15
 800405c:	187b      	adds	r3, r7, r1
 800405e:	1c02      	adds	r2, r0, #0
 8004060:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	187b      	adds	r3, r7, r1
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	b25b      	sxtb	r3, r3
 800406a:	0011      	movs	r1, r2
 800406c:	0018      	movs	r0, r3
 800406e:	f7ff ff5d 	bl	8003f2c <__NVIC_SetPriority>
}
 8004072:	46c0      	nop			; (mov r8, r8)
 8004074:	46bd      	mov	sp, r7
 8004076:	b004      	add	sp, #16
 8004078:	bd80      	pop	{r7, pc}

0800407a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b082      	sub	sp, #8
 800407e:	af00      	add	r7, sp, #0
 8004080:	0002      	movs	r2, r0
 8004082:	1dfb      	adds	r3, r7, #7
 8004084:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004086:	1dfb      	adds	r3, r7, #7
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	b25b      	sxtb	r3, r3
 800408c:	0018      	movs	r0, r3
 800408e:	f7ff ff33 	bl	8003ef8 <__NVIC_EnableIRQ>
}
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	46bd      	mov	sp, r7
 8004096:	b002      	add	sp, #8
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b082      	sub	sp, #8
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	0018      	movs	r0, r3
 80040a6:	f7ff ffaf 	bl	8004008 <SysTick_Config>
 80040aa:	0003      	movs	r3, r0
}
 80040ac:	0018      	movs	r0, r3
 80040ae:	46bd      	mov	sp, r7
 80040b0:	b002      	add	sp, #8
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e036      	b.n	8004138 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2221      	movs	r2, #33	; 0x21
 80040ce:	2102      	movs	r1, #2
 80040d0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	4a18      	ldr	r2, [pc, #96]	; (8004140 <HAL_DMA_Init+0x8c>)
 80040de:	4013      	ands	r3, r2
 80040e0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80040ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004102:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	4313      	orrs	r3, r2
 800410e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	0018      	movs	r0, r3
 800411c:	f000 f9c4 	bl	80044a8 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2221      	movs	r2, #33	; 0x21
 800412a:	2101      	movs	r1, #1
 800412c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2220      	movs	r2, #32
 8004132:	2100      	movs	r1, #0
 8004134:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	0018      	movs	r0, r3
 800413a:	46bd      	mov	sp, r7
 800413c:	b004      	add	sp, #16
 800413e:	bd80      	pop	{r7, pc}
 8004140:	ffffc00f 	.word	0xffffc00f

08004144 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
 8004150:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004152:	2317      	movs	r3, #23
 8004154:	18fb      	adds	r3, r7, r3
 8004156:	2200      	movs	r2, #0
 8004158:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2220      	movs	r2, #32
 800415e:	5c9b      	ldrb	r3, [r3, r2]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_DMA_Start_IT+0x24>
 8004164:	2302      	movs	r3, #2
 8004166:	e04f      	b.n	8004208 <HAL_DMA_Start_IT+0xc4>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2220      	movs	r2, #32
 800416c:	2101      	movs	r1, #1
 800416e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2221      	movs	r2, #33	; 0x21
 8004174:	5c9b      	ldrb	r3, [r3, r2]
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b01      	cmp	r3, #1
 800417a:	d13a      	bne.n	80041f2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2221      	movs	r2, #33	; 0x21
 8004180:	2102      	movs	r1, #2
 8004182:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2101      	movs	r1, #1
 8004196:	438a      	bics	r2, r1
 8004198:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	68b9      	ldr	r1, [r7, #8]
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 f954 	bl	800444e <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d008      	beq.n	80041c0 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	210e      	movs	r1, #14
 80041ba:	430a      	orrs	r2, r1
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	e00f      	b.n	80041e0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	210a      	movs	r1, #10
 80041cc:	430a      	orrs	r2, r1
 80041ce:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2104      	movs	r1, #4
 80041dc:	438a      	bics	r2, r1
 80041de:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2101      	movs	r1, #1
 80041ec:	430a      	orrs	r2, r1
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	e007      	b.n	8004202 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2220      	movs	r2, #32
 80041f6:	2100      	movs	r1, #0
 80041f8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80041fa:	2317      	movs	r3, #23
 80041fc:	18fb      	adds	r3, r7, r3
 80041fe:	2202      	movs	r2, #2
 8004200:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004202:	2317      	movs	r3, #23
 8004204:	18fb      	adds	r3, r7, r3
 8004206:	781b      	ldrb	r3, [r3, #0]
}
 8004208:	0018      	movs	r0, r3
 800420a:	46bd      	mov	sp, r7
 800420c:	b006      	add	sp, #24
 800420e:	bd80      	pop	{r7, pc}

08004210 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2221      	movs	r2, #33	; 0x21
 800421c:	5c9b      	ldrb	r3, [r3, r2]
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d008      	beq.n	8004236 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2204      	movs	r2, #4
 8004228:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2220      	movs	r2, #32
 800422e:	2100      	movs	r1, #0
 8004230:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e020      	b.n	8004278 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	210e      	movs	r1, #14
 8004242:	438a      	bics	r2, r1
 8004244:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2101      	movs	r1, #1
 8004252:	438a      	bics	r2, r1
 8004254:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425e:	2101      	movs	r1, #1
 8004260:	4091      	lsls	r1, r2
 8004262:	000a      	movs	r2, r1
 8004264:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2221      	movs	r2, #33	; 0x21
 800426a:	2101      	movs	r1, #1
 800426c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2220      	movs	r2, #32
 8004272:	2100      	movs	r1, #0
 8004274:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	0018      	movs	r0, r3
 800427a:	46bd      	mov	sp, r7
 800427c:	b002      	add	sp, #8
 800427e:	bd80      	pop	{r7, pc}

08004280 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004288:	210f      	movs	r1, #15
 800428a:	187b      	adds	r3, r7, r1
 800428c:	2200      	movs	r2, #0
 800428e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2221      	movs	r2, #33	; 0x21
 8004294:	5c9b      	ldrb	r3, [r3, r2]
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d006      	beq.n	80042aa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2204      	movs	r2, #4
 80042a0:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80042a2:	187b      	adds	r3, r7, r1
 80042a4:	2201      	movs	r2, #1
 80042a6:	701a      	strb	r2, [r3, #0]
 80042a8:	e028      	b.n	80042fc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	210e      	movs	r1, #14
 80042b6:	438a      	bics	r2, r1
 80042b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2101      	movs	r1, #1
 80042c6:	438a      	bics	r2, r1
 80042c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d2:	2101      	movs	r1, #1
 80042d4:	4091      	lsls	r1, r2
 80042d6:	000a      	movs	r2, r1
 80042d8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2221      	movs	r2, #33	; 0x21
 80042de:	2101      	movs	r1, #1
 80042e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2220      	movs	r2, #32
 80042e6:	2100      	movs	r1, #0
 80042e8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d004      	beq.n	80042fc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	0010      	movs	r0, r2
 80042fa:	4798      	blx	r3
    }
  }
  return status;
 80042fc:	230f      	movs	r3, #15
 80042fe:	18fb      	adds	r3, r7, r3
 8004300:	781b      	ldrb	r3, [r3, #0]
}
 8004302:	0018      	movs	r0, r3
 8004304:	46bd      	mov	sp, r7
 8004306:	b004      	add	sp, #16
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	2204      	movs	r2, #4
 8004328:	409a      	lsls	r2, r3
 800432a:	0013      	movs	r3, r2
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	4013      	ands	r3, r2
 8004330:	d024      	beq.n	800437c <HAL_DMA_IRQHandler+0x72>
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2204      	movs	r2, #4
 8004336:	4013      	ands	r3, r2
 8004338:	d020      	beq.n	800437c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2220      	movs	r2, #32
 8004342:	4013      	ands	r3, r2
 8004344:	d107      	bne.n	8004356 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2104      	movs	r1, #4
 8004352:	438a      	bics	r2, r1
 8004354:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435e:	2104      	movs	r1, #4
 8004360:	4091      	lsls	r1, r2
 8004362:	000a      	movs	r2, r1
 8004364:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436a:	2b00      	cmp	r3, #0
 800436c:	d100      	bne.n	8004370 <HAL_DMA_IRQHandler+0x66>
 800436e:	e06a      	b.n	8004446 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	0010      	movs	r0, r2
 8004378:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800437a:	e064      	b.n	8004446 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004380:	2202      	movs	r2, #2
 8004382:	409a      	lsls	r2, r3
 8004384:	0013      	movs	r3, r2
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	4013      	ands	r3, r2
 800438a:	d02b      	beq.n	80043e4 <HAL_DMA_IRQHandler+0xda>
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2202      	movs	r2, #2
 8004390:	4013      	ands	r3, r2
 8004392:	d027      	beq.n	80043e4 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2220      	movs	r2, #32
 800439c:	4013      	ands	r3, r2
 800439e:	d10b      	bne.n	80043b8 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	210a      	movs	r1, #10
 80043ac:	438a      	bics	r2, r1
 80043ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2221      	movs	r2, #33	; 0x21
 80043b4:	2101      	movs	r1, #1
 80043b6:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c0:	2102      	movs	r1, #2
 80043c2:	4091      	lsls	r1, r2
 80043c4:	000a      	movs	r2, r1
 80043c6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2220      	movs	r2, #32
 80043cc:	2100      	movs	r1, #0
 80043ce:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d036      	beq.n	8004446 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	0010      	movs	r0, r2
 80043e0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80043e2:	e030      	b.n	8004446 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	2208      	movs	r2, #8
 80043ea:	409a      	lsls	r2, r3
 80043ec:	0013      	movs	r3, r2
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	4013      	ands	r3, r2
 80043f2:	d028      	beq.n	8004446 <HAL_DMA_IRQHandler+0x13c>
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2208      	movs	r2, #8
 80043f8:	4013      	ands	r3, r2
 80043fa:	d024      	beq.n	8004446 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	210e      	movs	r1, #14
 8004408:	438a      	bics	r2, r1
 800440a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004414:	2101      	movs	r1, #1
 8004416:	4091      	lsls	r1, r2
 8004418:	000a      	movs	r2, r1
 800441a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2221      	movs	r2, #33	; 0x21
 8004426:	2101      	movs	r1, #1
 8004428:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	2100      	movs	r1, #0
 8004430:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004436:	2b00      	cmp	r3, #0
 8004438:	d005      	beq.n	8004446 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	0010      	movs	r0, r2
 8004442:	4798      	blx	r3
    }
  }
}
 8004444:	e7ff      	b.n	8004446 <HAL_DMA_IRQHandler+0x13c>
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	46bd      	mov	sp, r7
 800444a:	b004      	add	sp, #16
 800444c:	bd80      	pop	{r7, pc}

0800444e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b084      	sub	sp, #16
 8004452:	af00      	add	r7, sp, #0
 8004454:	60f8      	str	r0, [r7, #12]
 8004456:	60b9      	str	r1, [r7, #8]
 8004458:	607a      	str	r2, [r7, #4]
 800445a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004464:	2101      	movs	r1, #1
 8004466:	4091      	lsls	r1, r2
 8004468:	000a      	movs	r2, r1
 800446a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	2b10      	cmp	r3, #16
 800447a:	d108      	bne.n	800448e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800448c:	e007      	b.n	800449e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	60da      	str	r2, [r3, #12]
}
 800449e:	46c0      	nop			; (mov r8, r8)
 80044a0:	46bd      	mov	sp, r7
 80044a2:	b004      	add	sp, #16
 80044a4:	bd80      	pop	{r7, pc}
	...

080044a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a08      	ldr	r2, [pc, #32]	; (80044d8 <DMA_CalcBaseAndBitshift+0x30>)
 80044b6:	4694      	mov	ip, r2
 80044b8:	4463      	add	r3, ip
 80044ba:	2114      	movs	r1, #20
 80044bc:	0018      	movs	r0, r3
 80044be:	f7fb fe3f 	bl	8000140 <__udivsi3>
 80044c2:	0003      	movs	r3, r0
 80044c4:	009a      	lsls	r2, r3, #2
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a03      	ldr	r2, [pc, #12]	; (80044dc <DMA_CalcBaseAndBitshift+0x34>)
 80044ce:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80044d0:	46c0      	nop			; (mov r8, r8)
 80044d2:	46bd      	mov	sp, r7
 80044d4:	b002      	add	sp, #8
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	bffdfff8 	.word	0xbffdfff8
 80044dc:	40020000 	.word	0x40020000

080044e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044ee:	e155      	b.n	800479c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2101      	movs	r1, #1
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	4091      	lsls	r1, r2
 80044fa:	000a      	movs	r2, r1
 80044fc:	4013      	ands	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d100      	bne.n	8004508 <HAL_GPIO_Init+0x28>
 8004506:	e146      	b.n	8004796 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	2203      	movs	r2, #3
 800450e:	4013      	ands	r3, r2
 8004510:	2b01      	cmp	r3, #1
 8004512:	d005      	beq.n	8004520 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2203      	movs	r2, #3
 800451a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800451c:	2b02      	cmp	r3, #2
 800451e:	d130      	bne.n	8004582 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	2203      	movs	r2, #3
 800452c:	409a      	lsls	r2, r3
 800452e:	0013      	movs	r3, r2
 8004530:	43da      	mvns	r2, r3
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	4013      	ands	r3, r2
 8004536:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	68da      	ldr	r2, [r3, #12]
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	409a      	lsls	r2, r3
 8004542:	0013      	movs	r3, r2
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004556:	2201      	movs	r2, #1
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	409a      	lsls	r2, r3
 800455c:	0013      	movs	r3, r2
 800455e:	43da      	mvns	r2, r3
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	4013      	ands	r3, r2
 8004564:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	091b      	lsrs	r3, r3, #4
 800456c:	2201      	movs	r2, #1
 800456e:	401a      	ands	r2, r3
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	409a      	lsls	r2, r3
 8004574:	0013      	movs	r3, r2
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4313      	orrs	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	2203      	movs	r2, #3
 8004588:	4013      	ands	r3, r2
 800458a:	2b03      	cmp	r3, #3
 800458c:	d017      	beq.n	80045be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	2203      	movs	r2, #3
 800459a:	409a      	lsls	r2, r3
 800459c:	0013      	movs	r3, r2
 800459e:	43da      	mvns	r2, r3
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	4013      	ands	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	409a      	lsls	r2, r3
 80045b0:	0013      	movs	r3, r2
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2203      	movs	r2, #3
 80045c4:	4013      	ands	r3, r2
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d123      	bne.n	8004612 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	08da      	lsrs	r2, r3, #3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3208      	adds	r2, #8
 80045d2:	0092      	lsls	r2, r2, #2
 80045d4:	58d3      	ldr	r3, [r2, r3]
 80045d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	2207      	movs	r2, #7
 80045dc:	4013      	ands	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	220f      	movs	r2, #15
 80045e2:	409a      	lsls	r2, r3
 80045e4:	0013      	movs	r3, r2
 80045e6:	43da      	mvns	r2, r3
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	4013      	ands	r3, r2
 80045ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	691a      	ldr	r2, [r3, #16]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	2107      	movs	r1, #7
 80045f6:	400b      	ands	r3, r1
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	409a      	lsls	r2, r3
 80045fc:	0013      	movs	r3, r2
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	4313      	orrs	r3, r2
 8004602:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	08da      	lsrs	r2, r3, #3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3208      	adds	r2, #8
 800460c:	0092      	lsls	r2, r2, #2
 800460e:	6939      	ldr	r1, [r7, #16]
 8004610:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	2203      	movs	r2, #3
 800461e:	409a      	lsls	r2, r3
 8004620:	0013      	movs	r3, r2
 8004622:	43da      	mvns	r2, r3
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	4013      	ands	r3, r2
 8004628:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2203      	movs	r2, #3
 8004630:	401a      	ands	r2, r3
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	409a      	lsls	r2, r3
 8004638:	0013      	movs	r3, r2
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	4313      	orrs	r3, r2
 800463e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	23c0      	movs	r3, #192	; 0xc0
 800464c:	029b      	lsls	r3, r3, #10
 800464e:	4013      	ands	r3, r2
 8004650:	d100      	bne.n	8004654 <HAL_GPIO_Init+0x174>
 8004652:	e0a0      	b.n	8004796 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004654:	4b57      	ldr	r3, [pc, #348]	; (80047b4 <HAL_GPIO_Init+0x2d4>)
 8004656:	699a      	ldr	r2, [r3, #24]
 8004658:	4b56      	ldr	r3, [pc, #344]	; (80047b4 <HAL_GPIO_Init+0x2d4>)
 800465a:	2101      	movs	r1, #1
 800465c:	430a      	orrs	r2, r1
 800465e:	619a      	str	r2, [r3, #24]
 8004660:	4b54      	ldr	r3, [pc, #336]	; (80047b4 <HAL_GPIO_Init+0x2d4>)
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	2201      	movs	r2, #1
 8004666:	4013      	ands	r3, r2
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800466c:	4a52      	ldr	r2, [pc, #328]	; (80047b8 <HAL_GPIO_Init+0x2d8>)
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	089b      	lsrs	r3, r3, #2
 8004672:	3302      	adds	r3, #2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	589b      	ldr	r3, [r3, r2]
 8004678:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2203      	movs	r2, #3
 800467e:	4013      	ands	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	220f      	movs	r2, #15
 8004684:	409a      	lsls	r2, r3
 8004686:	0013      	movs	r3, r2
 8004688:	43da      	mvns	r2, r3
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	4013      	ands	r3, r2
 800468e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	2390      	movs	r3, #144	; 0x90
 8004694:	05db      	lsls	r3, r3, #23
 8004696:	429a      	cmp	r2, r3
 8004698:	d019      	beq.n	80046ce <HAL_GPIO_Init+0x1ee>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a47      	ldr	r2, [pc, #284]	; (80047bc <HAL_GPIO_Init+0x2dc>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d013      	beq.n	80046ca <HAL_GPIO_Init+0x1ea>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a46      	ldr	r2, [pc, #280]	; (80047c0 <HAL_GPIO_Init+0x2e0>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d00d      	beq.n	80046c6 <HAL_GPIO_Init+0x1e6>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a45      	ldr	r2, [pc, #276]	; (80047c4 <HAL_GPIO_Init+0x2e4>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d007      	beq.n	80046c2 <HAL_GPIO_Init+0x1e2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a44      	ldr	r2, [pc, #272]	; (80047c8 <HAL_GPIO_Init+0x2e8>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d101      	bne.n	80046be <HAL_GPIO_Init+0x1de>
 80046ba:	2304      	movs	r3, #4
 80046bc:	e008      	b.n	80046d0 <HAL_GPIO_Init+0x1f0>
 80046be:	2305      	movs	r3, #5
 80046c0:	e006      	b.n	80046d0 <HAL_GPIO_Init+0x1f0>
 80046c2:	2303      	movs	r3, #3
 80046c4:	e004      	b.n	80046d0 <HAL_GPIO_Init+0x1f0>
 80046c6:	2302      	movs	r3, #2
 80046c8:	e002      	b.n	80046d0 <HAL_GPIO_Init+0x1f0>
 80046ca:	2301      	movs	r3, #1
 80046cc:	e000      	b.n	80046d0 <HAL_GPIO_Init+0x1f0>
 80046ce:	2300      	movs	r3, #0
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	2103      	movs	r1, #3
 80046d4:	400a      	ands	r2, r1
 80046d6:	0092      	lsls	r2, r2, #2
 80046d8:	4093      	lsls	r3, r2
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	4313      	orrs	r3, r2
 80046de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80046e0:	4935      	ldr	r1, [pc, #212]	; (80047b8 <HAL_GPIO_Init+0x2d8>)
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	089b      	lsrs	r3, r3, #2
 80046e6:	3302      	adds	r3, #2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046ee:	4b37      	ldr	r3, [pc, #220]	; (80047cc <HAL_GPIO_Init+0x2ec>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	43da      	mvns	r2, r3
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	4013      	ands	r3, r2
 80046fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	2380      	movs	r3, #128	; 0x80
 8004704:	035b      	lsls	r3, r3, #13
 8004706:	4013      	ands	r3, r2
 8004708:	d003      	beq.n	8004712 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4313      	orrs	r3, r2
 8004710:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004712:	4b2e      	ldr	r3, [pc, #184]	; (80047cc <HAL_GPIO_Init+0x2ec>)
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004718:	4b2c      	ldr	r3, [pc, #176]	; (80047cc <HAL_GPIO_Init+0x2ec>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	43da      	mvns	r2, r3
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	4013      	ands	r3, r2
 8004726:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	2380      	movs	r3, #128	; 0x80
 800472e:	039b      	lsls	r3, r3, #14
 8004730:	4013      	ands	r3, r2
 8004732:	d003      	beq.n	800473c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4313      	orrs	r3, r2
 800473a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800473c:	4b23      	ldr	r3, [pc, #140]	; (80047cc <HAL_GPIO_Init+0x2ec>)
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8004742:	4b22      	ldr	r3, [pc, #136]	; (80047cc <HAL_GPIO_Init+0x2ec>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	43da      	mvns	r2, r3
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	4013      	ands	r3, r2
 8004750:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	2380      	movs	r3, #128	; 0x80
 8004758:	029b      	lsls	r3, r3, #10
 800475a:	4013      	ands	r3, r2
 800475c:	d003      	beq.n	8004766 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4313      	orrs	r3, r2
 8004764:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004766:	4b19      	ldr	r3, [pc, #100]	; (80047cc <HAL_GPIO_Init+0x2ec>)
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800476c:	4b17      	ldr	r3, [pc, #92]	; (80047cc <HAL_GPIO_Init+0x2ec>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	43da      	mvns	r2, r3
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	4013      	ands	r3, r2
 800477a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	2380      	movs	r3, #128	; 0x80
 8004782:	025b      	lsls	r3, r3, #9
 8004784:	4013      	ands	r3, r2
 8004786:	d003      	beq.n	8004790 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	4313      	orrs	r3, r2
 800478e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004790:	4b0e      	ldr	r3, [pc, #56]	; (80047cc <HAL_GPIO_Init+0x2ec>)
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	3301      	adds	r3, #1
 800479a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	40da      	lsrs	r2, r3
 80047a4:	1e13      	subs	r3, r2, #0
 80047a6:	d000      	beq.n	80047aa <HAL_GPIO_Init+0x2ca>
 80047a8:	e6a2      	b.n	80044f0 <HAL_GPIO_Init+0x10>
  } 
}
 80047aa:	46c0      	nop			; (mov r8, r8)
 80047ac:	46c0      	nop			; (mov r8, r8)
 80047ae:	46bd      	mov	sp, r7
 80047b0:	b006      	add	sp, #24
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40021000 	.word	0x40021000
 80047b8:	40010000 	.word	0x40010000
 80047bc:	48000400 	.word	0x48000400
 80047c0:	48000800 	.word	0x48000800
 80047c4:	48000c00 	.word	0x48000c00
 80047c8:	48001000 	.word	0x48001000
 80047cc:	40010400 	.word	0x40010400

080047d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	0008      	movs	r0, r1
 80047da:	0011      	movs	r1, r2
 80047dc:	1cbb      	adds	r3, r7, #2
 80047de:	1c02      	adds	r2, r0, #0
 80047e0:	801a      	strh	r2, [r3, #0]
 80047e2:	1c7b      	adds	r3, r7, #1
 80047e4:	1c0a      	adds	r2, r1, #0
 80047e6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047e8:	1c7b      	adds	r3, r7, #1
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d004      	beq.n	80047fa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047f0:	1cbb      	adds	r3, r7, #2
 80047f2:	881a      	ldrh	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047f8:	e003      	b.n	8004802 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047fa:	1cbb      	adds	r3, r7, #2
 80047fc:	881a      	ldrh	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004802:	46c0      	nop			; (mov r8, r8)
 8004804:	46bd      	mov	sp, r7
 8004806:	b002      	add	sp, #8
 8004808:	bd80      	pop	{r7, pc}
	...

0800480c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d102      	bne.n	8004820 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	f000 fb76 	bl	8004f0c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2201      	movs	r2, #1
 8004826:	4013      	ands	r3, r2
 8004828:	d100      	bne.n	800482c <HAL_RCC_OscConfig+0x20>
 800482a:	e08e      	b.n	800494a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800482c:	4bc5      	ldr	r3, [pc, #788]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	220c      	movs	r2, #12
 8004832:	4013      	ands	r3, r2
 8004834:	2b04      	cmp	r3, #4
 8004836:	d00e      	beq.n	8004856 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004838:	4bc2      	ldr	r3, [pc, #776]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	220c      	movs	r2, #12
 800483e:	4013      	ands	r3, r2
 8004840:	2b08      	cmp	r3, #8
 8004842:	d117      	bne.n	8004874 <HAL_RCC_OscConfig+0x68>
 8004844:	4bbf      	ldr	r3, [pc, #764]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	23c0      	movs	r3, #192	; 0xc0
 800484a:	025b      	lsls	r3, r3, #9
 800484c:	401a      	ands	r2, r3
 800484e:	2380      	movs	r3, #128	; 0x80
 8004850:	025b      	lsls	r3, r3, #9
 8004852:	429a      	cmp	r2, r3
 8004854:	d10e      	bne.n	8004874 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004856:	4bbb      	ldr	r3, [pc, #748]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	2380      	movs	r3, #128	; 0x80
 800485c:	029b      	lsls	r3, r3, #10
 800485e:	4013      	ands	r3, r2
 8004860:	d100      	bne.n	8004864 <HAL_RCC_OscConfig+0x58>
 8004862:	e071      	b.n	8004948 <HAL_RCC_OscConfig+0x13c>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d000      	beq.n	800486e <HAL_RCC_OscConfig+0x62>
 800486c:	e06c      	b.n	8004948 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	f000 fb4c 	bl	8004f0c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d107      	bne.n	800488c <HAL_RCC_OscConfig+0x80>
 800487c:	4bb1      	ldr	r3, [pc, #708]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	4bb0      	ldr	r3, [pc, #704]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 8004882:	2180      	movs	r1, #128	; 0x80
 8004884:	0249      	lsls	r1, r1, #9
 8004886:	430a      	orrs	r2, r1
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	e02f      	b.n	80048ec <HAL_RCC_OscConfig+0xe0>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10c      	bne.n	80048ae <HAL_RCC_OscConfig+0xa2>
 8004894:	4bab      	ldr	r3, [pc, #684]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	4baa      	ldr	r3, [pc, #680]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 800489a:	49ab      	ldr	r1, [pc, #684]	; (8004b48 <HAL_RCC_OscConfig+0x33c>)
 800489c:	400a      	ands	r2, r1
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	4ba8      	ldr	r3, [pc, #672]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	4ba7      	ldr	r3, [pc, #668]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 80048a6:	49a9      	ldr	r1, [pc, #676]	; (8004b4c <HAL_RCC_OscConfig+0x340>)
 80048a8:	400a      	ands	r2, r1
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	e01e      	b.n	80048ec <HAL_RCC_OscConfig+0xe0>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b05      	cmp	r3, #5
 80048b4:	d10e      	bne.n	80048d4 <HAL_RCC_OscConfig+0xc8>
 80048b6:	4ba3      	ldr	r3, [pc, #652]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	4ba2      	ldr	r3, [pc, #648]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 80048bc:	2180      	movs	r1, #128	; 0x80
 80048be:	02c9      	lsls	r1, r1, #11
 80048c0:	430a      	orrs	r2, r1
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	4b9f      	ldr	r3, [pc, #636]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	4b9e      	ldr	r3, [pc, #632]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 80048ca:	2180      	movs	r1, #128	; 0x80
 80048cc:	0249      	lsls	r1, r1, #9
 80048ce:	430a      	orrs	r2, r1
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	e00b      	b.n	80048ec <HAL_RCC_OscConfig+0xe0>
 80048d4:	4b9b      	ldr	r3, [pc, #620]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	4b9a      	ldr	r3, [pc, #616]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 80048da:	499b      	ldr	r1, [pc, #620]	; (8004b48 <HAL_RCC_OscConfig+0x33c>)
 80048dc:	400a      	ands	r2, r1
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	4b98      	ldr	r3, [pc, #608]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	4b97      	ldr	r3, [pc, #604]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 80048e6:	4999      	ldr	r1, [pc, #612]	; (8004b4c <HAL_RCC_OscConfig+0x340>)
 80048e8:	400a      	ands	r2, r1
 80048ea:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d014      	beq.n	800491e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f4:	f7fe fe3e 	bl	8003574 <HAL_GetTick>
 80048f8:	0003      	movs	r3, r0
 80048fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048fc:	e008      	b.n	8004910 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048fe:	f7fe fe39 	bl	8003574 <HAL_GetTick>
 8004902:	0002      	movs	r2, r0
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b64      	cmp	r3, #100	; 0x64
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e2fd      	b.n	8004f0c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004910:	4b8c      	ldr	r3, [pc, #560]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	2380      	movs	r3, #128	; 0x80
 8004916:	029b      	lsls	r3, r3, #10
 8004918:	4013      	ands	r3, r2
 800491a:	d0f0      	beq.n	80048fe <HAL_RCC_OscConfig+0xf2>
 800491c:	e015      	b.n	800494a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491e:	f7fe fe29 	bl	8003574 <HAL_GetTick>
 8004922:	0003      	movs	r3, r0
 8004924:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004926:	e008      	b.n	800493a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004928:	f7fe fe24 	bl	8003574 <HAL_GetTick>
 800492c:	0002      	movs	r2, r0
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b64      	cmp	r3, #100	; 0x64
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e2e8      	b.n	8004f0c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800493a:	4b82      	ldr	r3, [pc, #520]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	2380      	movs	r3, #128	; 0x80
 8004940:	029b      	lsls	r3, r3, #10
 8004942:	4013      	ands	r3, r2
 8004944:	d1f0      	bne.n	8004928 <HAL_RCC_OscConfig+0x11c>
 8004946:	e000      	b.n	800494a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004948:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2202      	movs	r2, #2
 8004950:	4013      	ands	r3, r2
 8004952:	d100      	bne.n	8004956 <HAL_RCC_OscConfig+0x14a>
 8004954:	e06c      	b.n	8004a30 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004956:	4b7b      	ldr	r3, [pc, #492]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	220c      	movs	r2, #12
 800495c:	4013      	ands	r3, r2
 800495e:	d00e      	beq.n	800497e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004960:	4b78      	ldr	r3, [pc, #480]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	220c      	movs	r2, #12
 8004966:	4013      	ands	r3, r2
 8004968:	2b08      	cmp	r3, #8
 800496a:	d11f      	bne.n	80049ac <HAL_RCC_OscConfig+0x1a0>
 800496c:	4b75      	ldr	r3, [pc, #468]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	23c0      	movs	r3, #192	; 0xc0
 8004972:	025b      	lsls	r3, r3, #9
 8004974:	401a      	ands	r2, r3
 8004976:	2380      	movs	r3, #128	; 0x80
 8004978:	021b      	lsls	r3, r3, #8
 800497a:	429a      	cmp	r2, r3
 800497c:	d116      	bne.n	80049ac <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800497e:	4b71      	ldr	r3, [pc, #452]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2202      	movs	r2, #2
 8004984:	4013      	ands	r3, r2
 8004986:	d005      	beq.n	8004994 <HAL_RCC_OscConfig+0x188>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d001      	beq.n	8004994 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e2bb      	b.n	8004f0c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004994:	4b6b      	ldr	r3, [pc, #428]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	22f8      	movs	r2, #248	; 0xf8
 800499a:	4393      	bics	r3, r2
 800499c:	0019      	movs	r1, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	00da      	lsls	r2, r3, #3
 80049a4:	4b67      	ldr	r3, [pc, #412]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 80049a6:	430a      	orrs	r2, r1
 80049a8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049aa:	e041      	b.n	8004a30 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d024      	beq.n	80049fe <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049b4:	4b63      	ldr	r3, [pc, #396]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	4b62      	ldr	r3, [pc, #392]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 80049ba:	2101      	movs	r1, #1
 80049bc:	430a      	orrs	r2, r1
 80049be:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c0:	f7fe fdd8 	bl	8003574 <HAL_GetTick>
 80049c4:	0003      	movs	r3, r0
 80049c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049c8:	e008      	b.n	80049dc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049ca:	f7fe fdd3 	bl	8003574 <HAL_GetTick>
 80049ce:	0002      	movs	r2, r0
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e297      	b.n	8004f0c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049dc:	4b59      	ldr	r3, [pc, #356]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2202      	movs	r2, #2
 80049e2:	4013      	ands	r3, r2
 80049e4:	d0f1      	beq.n	80049ca <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049e6:	4b57      	ldr	r3, [pc, #348]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	22f8      	movs	r2, #248	; 0xf8
 80049ec:	4393      	bics	r3, r2
 80049ee:	0019      	movs	r1, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	00da      	lsls	r2, r3, #3
 80049f6:	4b53      	ldr	r3, [pc, #332]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 80049f8:	430a      	orrs	r2, r1
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	e018      	b.n	8004a30 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049fe:	4b51      	ldr	r3, [pc, #324]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	4b50      	ldr	r3, [pc, #320]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 8004a04:	2101      	movs	r1, #1
 8004a06:	438a      	bics	r2, r1
 8004a08:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0a:	f7fe fdb3 	bl	8003574 <HAL_GetTick>
 8004a0e:	0003      	movs	r3, r0
 8004a10:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a14:	f7fe fdae 	bl	8003574 <HAL_GetTick>
 8004a18:	0002      	movs	r2, r0
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e272      	b.n	8004f0c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a26:	4b47      	ldr	r3, [pc, #284]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	d1f1      	bne.n	8004a14 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2208      	movs	r2, #8
 8004a36:	4013      	ands	r3, r2
 8004a38:	d036      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d019      	beq.n	8004a76 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a42:	4b40      	ldr	r3, [pc, #256]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 8004a44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a46:	4b3f      	ldr	r3, [pc, #252]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 8004a48:	2101      	movs	r1, #1
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a4e:	f7fe fd91 	bl	8003574 <HAL_GetTick>
 8004a52:	0003      	movs	r3, r0
 8004a54:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a58:	f7fe fd8c 	bl	8003574 <HAL_GetTick>
 8004a5c:	0002      	movs	r2, r0
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e250      	b.n	8004f0c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a6a:	4b36      	ldr	r3, [pc, #216]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6e:	2202      	movs	r2, #2
 8004a70:	4013      	ands	r3, r2
 8004a72:	d0f1      	beq.n	8004a58 <HAL_RCC_OscConfig+0x24c>
 8004a74:	e018      	b.n	8004aa8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a76:	4b33      	ldr	r3, [pc, #204]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 8004a78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a7a:	4b32      	ldr	r3, [pc, #200]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	438a      	bics	r2, r1
 8004a80:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a82:	f7fe fd77 	bl	8003574 <HAL_GetTick>
 8004a86:	0003      	movs	r3, r0
 8004a88:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a8c:	f7fe fd72 	bl	8003574 <HAL_GetTick>
 8004a90:	0002      	movs	r2, r0
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e236      	b.n	8004f0c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a9e:	4b29      	ldr	r3, [pc, #164]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	d1f1      	bne.n	8004a8c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2204      	movs	r2, #4
 8004aae:	4013      	ands	r3, r2
 8004ab0:	d100      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x2a8>
 8004ab2:	e0b5      	b.n	8004c20 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ab4:	201f      	movs	r0, #31
 8004ab6:	183b      	adds	r3, r7, r0
 8004ab8:	2200      	movs	r2, #0
 8004aba:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004abc:	4b21      	ldr	r3, [pc, #132]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 8004abe:	69da      	ldr	r2, [r3, #28]
 8004ac0:	2380      	movs	r3, #128	; 0x80
 8004ac2:	055b      	lsls	r3, r3, #21
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	d110      	bne.n	8004aea <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ac8:	4b1e      	ldr	r3, [pc, #120]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 8004aca:	69da      	ldr	r2, [r3, #28]
 8004acc:	4b1d      	ldr	r3, [pc, #116]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 8004ace:	2180      	movs	r1, #128	; 0x80
 8004ad0:	0549      	lsls	r1, r1, #21
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	61da      	str	r2, [r3, #28]
 8004ad6:	4b1b      	ldr	r3, [pc, #108]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 8004ad8:	69da      	ldr	r2, [r3, #28]
 8004ada:	2380      	movs	r3, #128	; 0x80
 8004adc:	055b      	lsls	r3, r3, #21
 8004ade:	4013      	ands	r3, r2
 8004ae0:	60fb      	str	r3, [r7, #12]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004ae4:	183b      	adds	r3, r7, r0
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aea:	4b19      	ldr	r3, [pc, #100]	; (8004b50 <HAL_RCC_OscConfig+0x344>)
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	2380      	movs	r3, #128	; 0x80
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	4013      	ands	r3, r2
 8004af4:	d11a      	bne.n	8004b2c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004af6:	4b16      	ldr	r3, [pc, #88]	; (8004b50 <HAL_RCC_OscConfig+0x344>)
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	4b15      	ldr	r3, [pc, #84]	; (8004b50 <HAL_RCC_OscConfig+0x344>)
 8004afc:	2180      	movs	r1, #128	; 0x80
 8004afe:	0049      	lsls	r1, r1, #1
 8004b00:	430a      	orrs	r2, r1
 8004b02:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b04:	f7fe fd36 	bl	8003574 <HAL_GetTick>
 8004b08:	0003      	movs	r3, r0
 8004b0a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b0c:	e008      	b.n	8004b20 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b0e:	f7fe fd31 	bl	8003574 <HAL_GetTick>
 8004b12:	0002      	movs	r2, r0
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b64      	cmp	r3, #100	; 0x64
 8004b1a:	d901      	bls.n	8004b20 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e1f5      	b.n	8004f0c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b20:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <HAL_RCC_OscConfig+0x344>)
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	2380      	movs	r3, #128	; 0x80
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	4013      	ands	r3, r2
 8004b2a:	d0f0      	beq.n	8004b0e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d10f      	bne.n	8004b54 <HAL_RCC_OscConfig+0x348>
 8004b34:	4b03      	ldr	r3, [pc, #12]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 8004b36:	6a1a      	ldr	r2, [r3, #32]
 8004b38:	4b02      	ldr	r3, [pc, #8]	; (8004b44 <HAL_RCC_OscConfig+0x338>)
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	621a      	str	r2, [r3, #32]
 8004b40:	e036      	b.n	8004bb0 <HAL_RCC_OscConfig+0x3a4>
 8004b42:	46c0      	nop			; (mov r8, r8)
 8004b44:	40021000 	.word	0x40021000
 8004b48:	fffeffff 	.word	0xfffeffff
 8004b4c:	fffbffff 	.word	0xfffbffff
 8004b50:	40007000 	.word	0x40007000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10c      	bne.n	8004b76 <HAL_RCC_OscConfig+0x36a>
 8004b5c:	4bca      	ldr	r3, [pc, #808]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004b5e:	6a1a      	ldr	r2, [r3, #32]
 8004b60:	4bc9      	ldr	r3, [pc, #804]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004b62:	2101      	movs	r1, #1
 8004b64:	438a      	bics	r2, r1
 8004b66:	621a      	str	r2, [r3, #32]
 8004b68:	4bc7      	ldr	r3, [pc, #796]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004b6a:	6a1a      	ldr	r2, [r3, #32]
 8004b6c:	4bc6      	ldr	r3, [pc, #792]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004b6e:	2104      	movs	r1, #4
 8004b70:	438a      	bics	r2, r1
 8004b72:	621a      	str	r2, [r3, #32]
 8004b74:	e01c      	b.n	8004bb0 <HAL_RCC_OscConfig+0x3a4>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	2b05      	cmp	r3, #5
 8004b7c:	d10c      	bne.n	8004b98 <HAL_RCC_OscConfig+0x38c>
 8004b7e:	4bc2      	ldr	r3, [pc, #776]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004b80:	6a1a      	ldr	r2, [r3, #32]
 8004b82:	4bc1      	ldr	r3, [pc, #772]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004b84:	2104      	movs	r1, #4
 8004b86:	430a      	orrs	r2, r1
 8004b88:	621a      	str	r2, [r3, #32]
 8004b8a:	4bbf      	ldr	r3, [pc, #764]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004b8c:	6a1a      	ldr	r2, [r3, #32]
 8004b8e:	4bbe      	ldr	r3, [pc, #760]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004b90:	2101      	movs	r1, #1
 8004b92:	430a      	orrs	r2, r1
 8004b94:	621a      	str	r2, [r3, #32]
 8004b96:	e00b      	b.n	8004bb0 <HAL_RCC_OscConfig+0x3a4>
 8004b98:	4bbb      	ldr	r3, [pc, #748]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004b9a:	6a1a      	ldr	r2, [r3, #32]
 8004b9c:	4bba      	ldr	r3, [pc, #744]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004b9e:	2101      	movs	r1, #1
 8004ba0:	438a      	bics	r2, r1
 8004ba2:	621a      	str	r2, [r3, #32]
 8004ba4:	4bb8      	ldr	r3, [pc, #736]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004ba6:	6a1a      	ldr	r2, [r3, #32]
 8004ba8:	4bb7      	ldr	r3, [pc, #732]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004baa:	2104      	movs	r1, #4
 8004bac:	438a      	bics	r2, r1
 8004bae:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d014      	beq.n	8004be2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bb8:	f7fe fcdc 	bl	8003574 <HAL_GetTick>
 8004bbc:	0003      	movs	r3, r0
 8004bbe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc0:	e009      	b.n	8004bd6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bc2:	f7fe fcd7 	bl	8003574 <HAL_GetTick>
 8004bc6:	0002      	movs	r2, r0
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	4aaf      	ldr	r2, [pc, #700]	; (8004e8c <HAL_RCC_OscConfig+0x680>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e19a      	b.n	8004f0c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bd6:	4bac      	ldr	r3, [pc, #688]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	4013      	ands	r3, r2
 8004bde:	d0f0      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x3b6>
 8004be0:	e013      	b.n	8004c0a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004be2:	f7fe fcc7 	bl	8003574 <HAL_GetTick>
 8004be6:	0003      	movs	r3, r0
 8004be8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bea:	e009      	b.n	8004c00 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bec:	f7fe fcc2 	bl	8003574 <HAL_GetTick>
 8004bf0:	0002      	movs	r2, r0
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	4aa5      	ldr	r2, [pc, #660]	; (8004e8c <HAL_RCC_OscConfig+0x680>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e185      	b.n	8004f0c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c00:	4ba1      	ldr	r3, [pc, #644]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004c02:	6a1b      	ldr	r3, [r3, #32]
 8004c04:	2202      	movs	r2, #2
 8004c06:	4013      	ands	r3, r2
 8004c08:	d1f0      	bne.n	8004bec <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004c0a:	231f      	movs	r3, #31
 8004c0c:	18fb      	adds	r3, r7, r3
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d105      	bne.n	8004c20 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c14:	4b9c      	ldr	r3, [pc, #624]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004c16:	69da      	ldr	r2, [r3, #28]
 8004c18:	4b9b      	ldr	r3, [pc, #620]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004c1a:	499d      	ldr	r1, [pc, #628]	; (8004e90 <HAL_RCC_OscConfig+0x684>)
 8004c1c:	400a      	ands	r2, r1
 8004c1e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2210      	movs	r2, #16
 8004c26:	4013      	ands	r3, r2
 8004c28:	d063      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d12a      	bne.n	8004c88 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004c32:	4b95      	ldr	r3, [pc, #596]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004c34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c36:	4b94      	ldr	r3, [pc, #592]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004c38:	2104      	movs	r1, #4
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004c3e:	4b92      	ldr	r3, [pc, #584]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004c40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c42:	4b91      	ldr	r3, [pc, #580]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004c44:	2101      	movs	r1, #1
 8004c46:	430a      	orrs	r2, r1
 8004c48:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c4a:	f7fe fc93 	bl	8003574 <HAL_GetTick>
 8004c4e:	0003      	movs	r3, r0
 8004c50:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004c52:	e008      	b.n	8004c66 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004c54:	f7fe fc8e 	bl	8003574 <HAL_GetTick>
 8004c58:	0002      	movs	r2, r0
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e152      	b.n	8004f0c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004c66:	4b88      	ldr	r3, [pc, #544]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	d0f1      	beq.n	8004c54 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004c70:	4b85      	ldr	r3, [pc, #532]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c74:	22f8      	movs	r2, #248	; 0xf8
 8004c76:	4393      	bics	r3, r2
 8004c78:	0019      	movs	r1, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	00da      	lsls	r2, r3, #3
 8004c80:	4b81      	ldr	r3, [pc, #516]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004c82:	430a      	orrs	r2, r1
 8004c84:	635a      	str	r2, [r3, #52]	; 0x34
 8004c86:	e034      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	3305      	adds	r3, #5
 8004c8e:	d111      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004c90:	4b7d      	ldr	r3, [pc, #500]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004c92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c94:	4b7c      	ldr	r3, [pc, #496]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004c96:	2104      	movs	r1, #4
 8004c98:	438a      	bics	r2, r1
 8004c9a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004c9c:	4b7a      	ldr	r3, [pc, #488]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca0:	22f8      	movs	r2, #248	; 0xf8
 8004ca2:	4393      	bics	r3, r2
 8004ca4:	0019      	movs	r1, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	00da      	lsls	r2, r3, #3
 8004cac:	4b76      	ldr	r3, [pc, #472]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	635a      	str	r2, [r3, #52]	; 0x34
 8004cb2:	e01e      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004cb4:	4b74      	ldr	r3, [pc, #464]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004cb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cb8:	4b73      	ldr	r3, [pc, #460]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004cba:	2104      	movs	r1, #4
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004cc0:	4b71      	ldr	r3, [pc, #452]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cc4:	4b70      	ldr	r3, [pc, #448]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	438a      	bics	r2, r1
 8004cca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ccc:	f7fe fc52 	bl	8003574 <HAL_GetTick>
 8004cd0:	0003      	movs	r3, r0
 8004cd2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004cd6:	f7fe fc4d 	bl	8003574 <HAL_GetTick>
 8004cda:	0002      	movs	r2, r0
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e111      	b.n	8004f0c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004ce8:	4b67      	ldr	r3, [pc, #412]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cec:	2202      	movs	r2, #2
 8004cee:	4013      	ands	r3, r2
 8004cf0:	d1f1      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	d05c      	beq.n	8004db6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004cfc:	4b62      	ldr	r3, [pc, #392]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	220c      	movs	r2, #12
 8004d02:	4013      	ands	r3, r2
 8004d04:	2b0c      	cmp	r3, #12
 8004d06:	d00e      	beq.n	8004d26 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004d08:	4b5f      	ldr	r3, [pc, #380]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	220c      	movs	r2, #12
 8004d0e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d114      	bne.n	8004d3e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004d14:	4b5c      	ldr	r3, [pc, #368]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	23c0      	movs	r3, #192	; 0xc0
 8004d1a:	025b      	lsls	r3, r3, #9
 8004d1c:	401a      	ands	r2, r3
 8004d1e:	23c0      	movs	r3, #192	; 0xc0
 8004d20:	025b      	lsls	r3, r3, #9
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d10b      	bne.n	8004d3e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004d26:	4b58      	ldr	r3, [pc, #352]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004d28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d2a:	2380      	movs	r3, #128	; 0x80
 8004d2c:	029b      	lsls	r3, r3, #10
 8004d2e:	4013      	ands	r3, r2
 8004d30:	d040      	beq.n	8004db4 <HAL_RCC_OscConfig+0x5a8>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d03c      	beq.n	8004db4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e0e6      	b.n	8004f0c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d01b      	beq.n	8004d7e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004d46:	4b50      	ldr	r3, [pc, #320]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d4a:	4b4f      	ldr	r3, [pc, #316]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004d4c:	2180      	movs	r1, #128	; 0x80
 8004d4e:	0249      	lsls	r1, r1, #9
 8004d50:	430a      	orrs	r2, r1
 8004d52:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d54:	f7fe fc0e 	bl	8003574 <HAL_GetTick>
 8004d58:	0003      	movs	r3, r0
 8004d5a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004d5c:	e008      	b.n	8004d70 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d5e:	f7fe fc09 	bl	8003574 <HAL_GetTick>
 8004d62:	0002      	movs	r2, r0
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e0cd      	b.n	8004f0c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004d70:	4b45      	ldr	r3, [pc, #276]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004d72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d74:	2380      	movs	r3, #128	; 0x80
 8004d76:	029b      	lsls	r3, r3, #10
 8004d78:	4013      	ands	r3, r2
 8004d7a:	d0f0      	beq.n	8004d5e <HAL_RCC_OscConfig+0x552>
 8004d7c:	e01b      	b.n	8004db6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004d7e:	4b42      	ldr	r3, [pc, #264]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004d80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d82:	4b41      	ldr	r3, [pc, #260]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004d84:	4943      	ldr	r1, [pc, #268]	; (8004e94 <HAL_RCC_OscConfig+0x688>)
 8004d86:	400a      	ands	r2, r1
 8004d88:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d8a:	f7fe fbf3 	bl	8003574 <HAL_GetTick>
 8004d8e:	0003      	movs	r3, r0
 8004d90:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d94:	f7fe fbee 	bl	8003574 <HAL_GetTick>
 8004d98:	0002      	movs	r2, r0
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e0b2      	b.n	8004f0c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004da6:	4b38      	ldr	r3, [pc, #224]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004da8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004daa:	2380      	movs	r3, #128	; 0x80
 8004dac:	029b      	lsls	r3, r3, #10
 8004dae:	4013      	ands	r3, r2
 8004db0:	d1f0      	bne.n	8004d94 <HAL_RCC_OscConfig+0x588>
 8004db2:	e000      	b.n	8004db6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004db4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d100      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x5b4>
 8004dbe:	e0a4      	b.n	8004f0a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dc0:	4b31      	ldr	r3, [pc, #196]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	220c      	movs	r2, #12
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d100      	bne.n	8004dce <HAL_RCC_OscConfig+0x5c2>
 8004dcc:	e078      	b.n	8004ec0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d14c      	bne.n	8004e70 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dd6:	4b2c      	ldr	r3, [pc, #176]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	4b2b      	ldr	r3, [pc, #172]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004ddc:	492e      	ldr	r1, [pc, #184]	; (8004e98 <HAL_RCC_OscConfig+0x68c>)
 8004dde:	400a      	ands	r2, r1
 8004de0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de2:	f7fe fbc7 	bl	8003574 <HAL_GetTick>
 8004de6:	0003      	movs	r3, r0
 8004de8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dec:	f7fe fbc2 	bl	8003574 <HAL_GetTick>
 8004df0:	0002      	movs	r2, r0
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e086      	b.n	8004f0c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dfe:	4b22      	ldr	r3, [pc, #136]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	2380      	movs	r3, #128	; 0x80
 8004e04:	049b      	lsls	r3, r3, #18
 8004e06:	4013      	ands	r3, r2
 8004e08:	d1f0      	bne.n	8004dec <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e0a:	4b1f      	ldr	r3, [pc, #124]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0e:	220f      	movs	r2, #15
 8004e10:	4393      	bics	r3, r2
 8004e12:	0019      	movs	r1, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e18:	4b1b      	ldr	r3, [pc, #108]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e1e:	4b1a      	ldr	r3, [pc, #104]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	4a1e      	ldr	r2, [pc, #120]	; (8004e9c <HAL_RCC_OscConfig+0x690>)
 8004e24:	4013      	ands	r3, r2
 8004e26:	0019      	movs	r1, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e30:	431a      	orrs	r2, r3
 8004e32:	4b15      	ldr	r3, [pc, #84]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004e34:	430a      	orrs	r2, r1
 8004e36:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e38:	4b13      	ldr	r3, [pc, #76]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	4b12      	ldr	r3, [pc, #72]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004e3e:	2180      	movs	r1, #128	; 0x80
 8004e40:	0449      	lsls	r1, r1, #17
 8004e42:	430a      	orrs	r2, r1
 8004e44:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e46:	f7fe fb95 	bl	8003574 <HAL_GetTick>
 8004e4a:	0003      	movs	r3, r0
 8004e4c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e50:	f7fe fb90 	bl	8003574 <HAL_GetTick>
 8004e54:	0002      	movs	r2, r0
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e054      	b.n	8004f0c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e62:	4b09      	ldr	r3, [pc, #36]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	2380      	movs	r3, #128	; 0x80
 8004e68:	049b      	lsls	r3, r3, #18
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	d0f0      	beq.n	8004e50 <HAL_RCC_OscConfig+0x644>
 8004e6e:	e04c      	b.n	8004f0a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e70:	4b05      	ldr	r3, [pc, #20]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	4b04      	ldr	r3, [pc, #16]	; (8004e88 <HAL_RCC_OscConfig+0x67c>)
 8004e76:	4908      	ldr	r1, [pc, #32]	; (8004e98 <HAL_RCC_OscConfig+0x68c>)
 8004e78:	400a      	ands	r2, r1
 8004e7a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e7c:	f7fe fb7a 	bl	8003574 <HAL_GetTick>
 8004e80:	0003      	movs	r3, r0
 8004e82:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e84:	e015      	b.n	8004eb2 <HAL_RCC_OscConfig+0x6a6>
 8004e86:	46c0      	nop			; (mov r8, r8)
 8004e88:	40021000 	.word	0x40021000
 8004e8c:	00001388 	.word	0x00001388
 8004e90:	efffffff 	.word	0xefffffff
 8004e94:	fffeffff 	.word	0xfffeffff
 8004e98:	feffffff 	.word	0xfeffffff
 8004e9c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ea0:	f7fe fb68 	bl	8003574 <HAL_GetTick>
 8004ea4:	0002      	movs	r2, r0
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e02c      	b.n	8004f0c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eb2:	4b18      	ldr	r3, [pc, #96]	; (8004f14 <HAL_RCC_OscConfig+0x708>)
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	2380      	movs	r3, #128	; 0x80
 8004eb8:	049b      	lsls	r3, r3, #18
 8004eba:	4013      	ands	r3, r2
 8004ebc:	d1f0      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x694>
 8004ebe:	e024      	b.n	8004f0a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d101      	bne.n	8004ecc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e01f      	b.n	8004f0c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004ecc:	4b11      	ldr	r3, [pc, #68]	; (8004f14 <HAL_RCC_OscConfig+0x708>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004ed2:	4b10      	ldr	r3, [pc, #64]	; (8004f14 <HAL_RCC_OscConfig+0x708>)
 8004ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	23c0      	movs	r3, #192	; 0xc0
 8004edc:	025b      	lsls	r3, r3, #9
 8004ede:	401a      	ands	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d10e      	bne.n	8004f06 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	220f      	movs	r2, #15
 8004eec:	401a      	ands	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d107      	bne.n	8004f06 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	23f0      	movs	r3, #240	; 0xf0
 8004efa:	039b      	lsls	r3, r3, #14
 8004efc:	401a      	ands	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d001      	beq.n	8004f0a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e000      	b.n	8004f0c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	b008      	add	sp, #32
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40021000 	.word	0x40021000

08004f18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e0bf      	b.n	80050ac <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f2c:	4b61      	ldr	r3, [pc, #388]	; (80050b4 <HAL_RCC_ClockConfig+0x19c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2201      	movs	r2, #1
 8004f32:	4013      	ands	r3, r2
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d911      	bls.n	8004f5e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f3a:	4b5e      	ldr	r3, [pc, #376]	; (80050b4 <HAL_RCC_ClockConfig+0x19c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	4393      	bics	r3, r2
 8004f42:	0019      	movs	r1, r3
 8004f44:	4b5b      	ldr	r3, [pc, #364]	; (80050b4 <HAL_RCC_ClockConfig+0x19c>)
 8004f46:	683a      	ldr	r2, [r7, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f4c:	4b59      	ldr	r3, [pc, #356]	; (80050b4 <HAL_RCC_ClockConfig+0x19c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2201      	movs	r2, #1
 8004f52:	4013      	ands	r3, r2
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d001      	beq.n	8004f5e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e0a6      	b.n	80050ac <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2202      	movs	r2, #2
 8004f64:	4013      	ands	r3, r2
 8004f66:	d015      	beq.n	8004f94 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2204      	movs	r2, #4
 8004f6e:	4013      	ands	r3, r2
 8004f70:	d006      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004f72:	4b51      	ldr	r3, [pc, #324]	; (80050b8 <HAL_RCC_ClockConfig+0x1a0>)
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	4b50      	ldr	r3, [pc, #320]	; (80050b8 <HAL_RCC_ClockConfig+0x1a0>)
 8004f78:	21e0      	movs	r1, #224	; 0xe0
 8004f7a:	00c9      	lsls	r1, r1, #3
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f80:	4b4d      	ldr	r3, [pc, #308]	; (80050b8 <HAL_RCC_ClockConfig+0x1a0>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	22f0      	movs	r2, #240	; 0xf0
 8004f86:	4393      	bics	r3, r2
 8004f88:	0019      	movs	r1, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689a      	ldr	r2, [r3, #8]
 8004f8e:	4b4a      	ldr	r3, [pc, #296]	; (80050b8 <HAL_RCC_ClockConfig+0x1a0>)
 8004f90:	430a      	orrs	r2, r1
 8004f92:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	d04c      	beq.n	8005038 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d107      	bne.n	8004fb6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fa6:	4b44      	ldr	r3, [pc, #272]	; (80050b8 <HAL_RCC_ClockConfig+0x1a0>)
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	2380      	movs	r3, #128	; 0x80
 8004fac:	029b      	lsls	r3, r3, #10
 8004fae:	4013      	ands	r3, r2
 8004fb0:	d120      	bne.n	8004ff4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e07a      	b.n	80050ac <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d107      	bne.n	8004fce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fbe:	4b3e      	ldr	r3, [pc, #248]	; (80050b8 <HAL_RCC_ClockConfig+0x1a0>)
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	2380      	movs	r3, #128	; 0x80
 8004fc4:	049b      	lsls	r3, r3, #18
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	d114      	bne.n	8004ff4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e06e      	b.n	80050ac <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b03      	cmp	r3, #3
 8004fd4:	d107      	bne.n	8004fe6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004fd6:	4b38      	ldr	r3, [pc, #224]	; (80050b8 <HAL_RCC_ClockConfig+0x1a0>)
 8004fd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fda:	2380      	movs	r3, #128	; 0x80
 8004fdc:	029b      	lsls	r3, r3, #10
 8004fde:	4013      	ands	r3, r2
 8004fe0:	d108      	bne.n	8004ff4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e062      	b.n	80050ac <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fe6:	4b34      	ldr	r3, [pc, #208]	; (80050b8 <HAL_RCC_ClockConfig+0x1a0>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2202      	movs	r2, #2
 8004fec:	4013      	ands	r3, r2
 8004fee:	d101      	bne.n	8004ff4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e05b      	b.n	80050ac <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ff4:	4b30      	ldr	r3, [pc, #192]	; (80050b8 <HAL_RCC_ClockConfig+0x1a0>)
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	2203      	movs	r2, #3
 8004ffa:	4393      	bics	r3, r2
 8004ffc:	0019      	movs	r1, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	4b2d      	ldr	r3, [pc, #180]	; (80050b8 <HAL_RCC_ClockConfig+0x1a0>)
 8005004:	430a      	orrs	r2, r1
 8005006:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005008:	f7fe fab4 	bl	8003574 <HAL_GetTick>
 800500c:	0003      	movs	r3, r0
 800500e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005010:	e009      	b.n	8005026 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005012:	f7fe faaf 	bl	8003574 <HAL_GetTick>
 8005016:	0002      	movs	r2, r0
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	4a27      	ldr	r2, [pc, #156]	; (80050bc <HAL_RCC_ClockConfig+0x1a4>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e042      	b.n	80050ac <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005026:	4b24      	ldr	r3, [pc, #144]	; (80050b8 <HAL_RCC_ClockConfig+0x1a0>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	220c      	movs	r2, #12
 800502c:	401a      	ands	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	429a      	cmp	r2, r3
 8005036:	d1ec      	bne.n	8005012 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005038:	4b1e      	ldr	r3, [pc, #120]	; (80050b4 <HAL_RCC_ClockConfig+0x19c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2201      	movs	r2, #1
 800503e:	4013      	ands	r3, r2
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d211      	bcs.n	800506a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005046:	4b1b      	ldr	r3, [pc, #108]	; (80050b4 <HAL_RCC_ClockConfig+0x19c>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2201      	movs	r2, #1
 800504c:	4393      	bics	r3, r2
 800504e:	0019      	movs	r1, r3
 8005050:	4b18      	ldr	r3, [pc, #96]	; (80050b4 <HAL_RCC_ClockConfig+0x19c>)
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	430a      	orrs	r2, r1
 8005056:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005058:	4b16      	ldr	r3, [pc, #88]	; (80050b4 <HAL_RCC_ClockConfig+0x19c>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2201      	movs	r2, #1
 800505e:	4013      	ands	r3, r2
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	429a      	cmp	r2, r3
 8005064:	d001      	beq.n	800506a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e020      	b.n	80050ac <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2204      	movs	r2, #4
 8005070:	4013      	ands	r3, r2
 8005072:	d009      	beq.n	8005088 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005074:	4b10      	ldr	r3, [pc, #64]	; (80050b8 <HAL_RCC_ClockConfig+0x1a0>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	4a11      	ldr	r2, [pc, #68]	; (80050c0 <HAL_RCC_ClockConfig+0x1a8>)
 800507a:	4013      	ands	r3, r2
 800507c:	0019      	movs	r1, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	4b0d      	ldr	r3, [pc, #52]	; (80050b8 <HAL_RCC_ClockConfig+0x1a0>)
 8005084:	430a      	orrs	r2, r1
 8005086:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005088:	f000 f820 	bl	80050cc <HAL_RCC_GetSysClockFreq>
 800508c:	0001      	movs	r1, r0
 800508e:	4b0a      	ldr	r3, [pc, #40]	; (80050b8 <HAL_RCC_ClockConfig+0x1a0>)
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	091b      	lsrs	r3, r3, #4
 8005094:	220f      	movs	r2, #15
 8005096:	4013      	ands	r3, r2
 8005098:	4a0a      	ldr	r2, [pc, #40]	; (80050c4 <HAL_RCC_ClockConfig+0x1ac>)
 800509a:	5cd3      	ldrb	r3, [r2, r3]
 800509c:	000a      	movs	r2, r1
 800509e:	40da      	lsrs	r2, r3
 80050a0:	4b09      	ldr	r3, [pc, #36]	; (80050c8 <HAL_RCC_ClockConfig+0x1b0>)
 80050a2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80050a4:	2000      	movs	r0, #0
 80050a6:	f7fe fa1f 	bl	80034e8 <HAL_InitTick>
  
  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	0018      	movs	r0, r3
 80050ae:	46bd      	mov	sp, r7
 80050b0:	b004      	add	sp, #16
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	40022000 	.word	0x40022000
 80050b8:	40021000 	.word	0x40021000
 80050bc:	00001388 	.word	0x00001388
 80050c0:	fffff8ff 	.word	0xfffff8ff
 80050c4:	0800c3c8 	.word	0x0800c3c8
 80050c8:	20000008 	.word	0x20000008

080050cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	60fb      	str	r3, [r7, #12]
 80050d6:	2300      	movs	r3, #0
 80050d8:	60bb      	str	r3, [r7, #8]
 80050da:	2300      	movs	r3, #0
 80050dc:	617b      	str	r3, [r7, #20]
 80050de:	2300      	movs	r3, #0
 80050e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80050e2:	2300      	movs	r3, #0
 80050e4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80050e6:	4b2d      	ldr	r3, [pc, #180]	; (800519c <HAL_RCC_GetSysClockFreq+0xd0>)
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	220c      	movs	r2, #12
 80050f0:	4013      	ands	r3, r2
 80050f2:	2b0c      	cmp	r3, #12
 80050f4:	d046      	beq.n	8005184 <HAL_RCC_GetSysClockFreq+0xb8>
 80050f6:	d848      	bhi.n	800518a <HAL_RCC_GetSysClockFreq+0xbe>
 80050f8:	2b04      	cmp	r3, #4
 80050fa:	d002      	beq.n	8005102 <HAL_RCC_GetSysClockFreq+0x36>
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d003      	beq.n	8005108 <HAL_RCC_GetSysClockFreq+0x3c>
 8005100:	e043      	b.n	800518a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005102:	4b27      	ldr	r3, [pc, #156]	; (80051a0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005104:	613b      	str	r3, [r7, #16]
      break;
 8005106:	e043      	b.n	8005190 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	0c9b      	lsrs	r3, r3, #18
 800510c:	220f      	movs	r2, #15
 800510e:	4013      	ands	r3, r2
 8005110:	4a24      	ldr	r2, [pc, #144]	; (80051a4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8005112:	5cd3      	ldrb	r3, [r2, r3]
 8005114:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005116:	4b21      	ldr	r3, [pc, #132]	; (800519c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511a:	220f      	movs	r2, #15
 800511c:	4013      	ands	r3, r2
 800511e:	4a22      	ldr	r2, [pc, #136]	; (80051a8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8005120:	5cd3      	ldrb	r3, [r2, r3]
 8005122:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	23c0      	movs	r3, #192	; 0xc0
 8005128:	025b      	lsls	r3, r3, #9
 800512a:	401a      	ands	r2, r3
 800512c:	2380      	movs	r3, #128	; 0x80
 800512e:	025b      	lsls	r3, r3, #9
 8005130:	429a      	cmp	r2, r3
 8005132:	d109      	bne.n	8005148 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005134:	68b9      	ldr	r1, [r7, #8]
 8005136:	481a      	ldr	r0, [pc, #104]	; (80051a0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005138:	f7fb f802 	bl	8000140 <__udivsi3>
 800513c:	0003      	movs	r3, r0
 800513e:	001a      	movs	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4353      	muls	r3, r2
 8005144:	617b      	str	r3, [r7, #20]
 8005146:	e01a      	b.n	800517e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	23c0      	movs	r3, #192	; 0xc0
 800514c:	025b      	lsls	r3, r3, #9
 800514e:	401a      	ands	r2, r3
 8005150:	23c0      	movs	r3, #192	; 0xc0
 8005152:	025b      	lsls	r3, r3, #9
 8005154:	429a      	cmp	r2, r3
 8005156:	d109      	bne.n	800516c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005158:	68b9      	ldr	r1, [r7, #8]
 800515a:	4814      	ldr	r0, [pc, #80]	; (80051ac <HAL_RCC_GetSysClockFreq+0xe0>)
 800515c:	f7fa fff0 	bl	8000140 <__udivsi3>
 8005160:	0003      	movs	r3, r0
 8005162:	001a      	movs	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4353      	muls	r3, r2
 8005168:	617b      	str	r3, [r7, #20]
 800516a:	e008      	b.n	800517e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800516c:	68b9      	ldr	r1, [r7, #8]
 800516e:	480c      	ldr	r0, [pc, #48]	; (80051a0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005170:	f7fa ffe6 	bl	8000140 <__udivsi3>
 8005174:	0003      	movs	r3, r0
 8005176:	001a      	movs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4353      	muls	r3, r2
 800517c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	613b      	str	r3, [r7, #16]
      break;
 8005182:	e005      	b.n	8005190 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8005184:	4b09      	ldr	r3, [pc, #36]	; (80051ac <HAL_RCC_GetSysClockFreq+0xe0>)
 8005186:	613b      	str	r3, [r7, #16]
      break;
 8005188:	e002      	b.n	8005190 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800518a:	4b05      	ldr	r3, [pc, #20]	; (80051a0 <HAL_RCC_GetSysClockFreq+0xd4>)
 800518c:	613b      	str	r3, [r7, #16]
      break;
 800518e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005190:	693b      	ldr	r3, [r7, #16]
}
 8005192:	0018      	movs	r0, r3
 8005194:	46bd      	mov	sp, r7
 8005196:	b006      	add	sp, #24
 8005198:	bd80      	pop	{r7, pc}
 800519a:	46c0      	nop			; (mov r8, r8)
 800519c:	40021000 	.word	0x40021000
 80051a0:	007a1200 	.word	0x007a1200
 80051a4:	0800c3e0 	.word	0x0800c3e0
 80051a8:	0800c3f0 	.word	0x0800c3f0
 80051ac:	02dc6c00 	.word	0x02dc6c00

080051b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051b4:	4b02      	ldr	r3, [pc, #8]	; (80051c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80051b6:	681b      	ldr	r3, [r3, #0]
}
 80051b8:	0018      	movs	r0, r3
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	46c0      	nop			; (mov r8, r8)
 80051c0:	20000008 	.word	0x20000008

080051c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80051c8:	f7ff fff2 	bl	80051b0 <HAL_RCC_GetHCLKFreq>
 80051cc:	0001      	movs	r1, r0
 80051ce:	4b06      	ldr	r3, [pc, #24]	; (80051e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	0a1b      	lsrs	r3, r3, #8
 80051d4:	2207      	movs	r2, #7
 80051d6:	4013      	ands	r3, r2
 80051d8:	4a04      	ldr	r2, [pc, #16]	; (80051ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80051da:	5cd3      	ldrb	r3, [r2, r3]
 80051dc:	40d9      	lsrs	r1, r3
 80051de:	000b      	movs	r3, r1
}    
 80051e0:	0018      	movs	r0, r3
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	46c0      	nop			; (mov r8, r8)
 80051e8:	40021000 	.word	0x40021000
 80051ec:	0800c3d8 	.word	0x0800c3d8

080051f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051f8:	2300      	movs	r3, #0
 80051fa:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80051fc:	2300      	movs	r3, #0
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	2380      	movs	r3, #128	; 0x80
 8005206:	025b      	lsls	r3, r3, #9
 8005208:	4013      	ands	r3, r2
 800520a:	d100      	bne.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800520c:	e08e      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800520e:	2017      	movs	r0, #23
 8005210:	183b      	adds	r3, r7, r0
 8005212:	2200      	movs	r2, #0
 8005214:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005216:	4b6e      	ldr	r3, [pc, #440]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005218:	69da      	ldr	r2, [r3, #28]
 800521a:	2380      	movs	r3, #128	; 0x80
 800521c:	055b      	lsls	r3, r3, #21
 800521e:	4013      	ands	r3, r2
 8005220:	d110      	bne.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005222:	4b6b      	ldr	r3, [pc, #428]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005224:	69da      	ldr	r2, [r3, #28]
 8005226:	4b6a      	ldr	r3, [pc, #424]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005228:	2180      	movs	r1, #128	; 0x80
 800522a:	0549      	lsls	r1, r1, #21
 800522c:	430a      	orrs	r2, r1
 800522e:	61da      	str	r2, [r3, #28]
 8005230:	4b67      	ldr	r3, [pc, #412]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005232:	69da      	ldr	r2, [r3, #28]
 8005234:	2380      	movs	r3, #128	; 0x80
 8005236:	055b      	lsls	r3, r3, #21
 8005238:	4013      	ands	r3, r2
 800523a:	60bb      	str	r3, [r7, #8]
 800523c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800523e:	183b      	adds	r3, r7, r0
 8005240:	2201      	movs	r2, #1
 8005242:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005244:	4b63      	ldr	r3, [pc, #396]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	2380      	movs	r3, #128	; 0x80
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	4013      	ands	r3, r2
 800524e:	d11a      	bne.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005250:	4b60      	ldr	r3, [pc, #384]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	4b5f      	ldr	r3, [pc, #380]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005256:	2180      	movs	r1, #128	; 0x80
 8005258:	0049      	lsls	r1, r1, #1
 800525a:	430a      	orrs	r2, r1
 800525c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800525e:	f7fe f989 	bl	8003574 <HAL_GetTick>
 8005262:	0003      	movs	r3, r0
 8005264:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005266:	e008      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005268:	f7fe f984 	bl	8003574 <HAL_GetTick>
 800526c:	0002      	movs	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b64      	cmp	r3, #100	; 0x64
 8005274:	d901      	bls.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e0a6      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800527a:	4b56      	ldr	r3, [pc, #344]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	2380      	movs	r3, #128	; 0x80
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	4013      	ands	r3, r2
 8005284:	d0f0      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005286:	4b52      	ldr	r3, [pc, #328]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005288:	6a1a      	ldr	r2, [r3, #32]
 800528a:	23c0      	movs	r3, #192	; 0xc0
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4013      	ands	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d034      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	23c0      	movs	r3, #192	; 0xc0
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4013      	ands	r3, r2
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d02c      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052a8:	4b49      	ldr	r3, [pc, #292]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	4a4a      	ldr	r2, [pc, #296]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80052ae:	4013      	ands	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052b2:	4b47      	ldr	r3, [pc, #284]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052b4:	6a1a      	ldr	r2, [r3, #32]
 80052b6:	4b46      	ldr	r3, [pc, #280]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052b8:	2180      	movs	r1, #128	; 0x80
 80052ba:	0249      	lsls	r1, r1, #9
 80052bc:	430a      	orrs	r2, r1
 80052be:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052c0:	4b43      	ldr	r3, [pc, #268]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052c2:	6a1a      	ldr	r2, [r3, #32]
 80052c4:	4b42      	ldr	r3, [pc, #264]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052c6:	4945      	ldr	r1, [pc, #276]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80052c8:	400a      	ands	r2, r1
 80052ca:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80052cc:	4b40      	ldr	r3, [pc, #256]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2201      	movs	r2, #1
 80052d6:	4013      	ands	r3, r2
 80052d8:	d013      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052da:	f7fe f94b 	bl	8003574 <HAL_GetTick>
 80052de:	0003      	movs	r3, r0
 80052e0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052e2:	e009      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052e4:	f7fe f946 	bl	8003574 <HAL_GetTick>
 80052e8:	0002      	movs	r2, r0
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	4a3c      	ldr	r2, [pc, #240]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d901      	bls.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e067      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f8:	4b35      	ldr	r3, [pc, #212]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	2202      	movs	r2, #2
 80052fe:	4013      	ands	r3, r2
 8005300:	d0f0      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005302:	4b33      	ldr	r3, [pc, #204]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	4a34      	ldr	r2, [pc, #208]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005308:	4013      	ands	r3, r2
 800530a:	0019      	movs	r1, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	4b2f      	ldr	r3, [pc, #188]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005312:	430a      	orrs	r2, r1
 8005314:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005316:	2317      	movs	r3, #23
 8005318:	18fb      	adds	r3, r7, r3
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d105      	bne.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005320:	4b2b      	ldr	r3, [pc, #172]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005322:	69da      	ldr	r2, [r3, #28]
 8005324:	4b2a      	ldr	r3, [pc, #168]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005326:	492f      	ldr	r1, [pc, #188]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8005328:	400a      	ands	r2, r1
 800532a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2201      	movs	r2, #1
 8005332:	4013      	ands	r3, r2
 8005334:	d009      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005336:	4b26      	ldr	r3, [pc, #152]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533a:	2203      	movs	r2, #3
 800533c:	4393      	bics	r3, r2
 800533e:	0019      	movs	r1, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	4b22      	ldr	r3, [pc, #136]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005346:	430a      	orrs	r2, r1
 8005348:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2202      	movs	r2, #2
 8005350:	4013      	ands	r3, r2
 8005352:	d009      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005354:	4b1e      	ldr	r3, [pc, #120]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005358:	4a23      	ldr	r2, [pc, #140]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800535a:	4013      	ands	r3, r2
 800535c:	0019      	movs	r1, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68da      	ldr	r2, [r3, #12]
 8005362:	4b1b      	ldr	r3, [pc, #108]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005364:	430a      	orrs	r2, r1
 8005366:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2220      	movs	r2, #32
 800536e:	4013      	ands	r3, r2
 8005370:	d009      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005372:	4b17      	ldr	r3, [pc, #92]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005376:	2210      	movs	r2, #16
 8005378:	4393      	bics	r3, r2
 800537a:	0019      	movs	r1, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691a      	ldr	r2, [r3, #16]
 8005380:	4b13      	ldr	r3, [pc, #76]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005382:	430a      	orrs	r2, r1
 8005384:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	2380      	movs	r3, #128	; 0x80
 800538c:	029b      	lsls	r3, r3, #10
 800538e:	4013      	ands	r3, r2
 8005390:	d009      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005392:	4b0f      	ldr	r3, [pc, #60]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005396:	2280      	movs	r2, #128	; 0x80
 8005398:	4393      	bics	r3, r2
 800539a:	0019      	movs	r1, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	699a      	ldr	r2, [r3, #24]
 80053a0:	4b0b      	ldr	r3, [pc, #44]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80053a2:	430a      	orrs	r2, r1
 80053a4:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	2380      	movs	r3, #128	; 0x80
 80053ac:	00db      	lsls	r3, r3, #3
 80053ae:	4013      	ands	r3, r2
 80053b0:	d009      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80053b2:	4b07      	ldr	r3, [pc, #28]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80053b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b6:	2240      	movs	r2, #64	; 0x40
 80053b8:	4393      	bics	r3, r2
 80053ba:	0019      	movs	r1, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	695a      	ldr	r2, [r3, #20]
 80053c0:	4b03      	ldr	r3, [pc, #12]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80053c2:	430a      	orrs	r2, r1
 80053c4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	0018      	movs	r0, r3
 80053ca:	46bd      	mov	sp, r7
 80053cc:	b006      	add	sp, #24
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	40021000 	.word	0x40021000
 80053d4:	40007000 	.word	0x40007000
 80053d8:	fffffcff 	.word	0xfffffcff
 80053dc:	fffeffff 	.word	0xfffeffff
 80053e0:	00001388 	.word	0x00001388
 80053e4:	efffffff 	.word	0xefffffff
 80053e8:	fffcffff 	.word	0xfffcffff

080053ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e042      	b.n	8005484 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	223d      	movs	r2, #61	; 0x3d
 8005402:	5c9b      	ldrb	r3, [r3, r2]
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d107      	bne.n	800541a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	223c      	movs	r2, #60	; 0x3c
 800540e:	2100      	movs	r1, #0
 8005410:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	0018      	movs	r0, r3
 8005416:	f7fd fea1 	bl	800315c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	223d      	movs	r2, #61	; 0x3d
 800541e:	2102      	movs	r1, #2
 8005420:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	3304      	adds	r3, #4
 800542a:	0019      	movs	r1, r3
 800542c:	0010      	movs	r0, r2
 800542e:	f000 f9b5 	bl	800579c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2246      	movs	r2, #70	; 0x46
 8005436:	2101      	movs	r1, #1
 8005438:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	223e      	movs	r2, #62	; 0x3e
 800543e:	2101      	movs	r1, #1
 8005440:	5499      	strb	r1, [r3, r2]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	223f      	movs	r2, #63	; 0x3f
 8005446:	2101      	movs	r1, #1
 8005448:	5499      	strb	r1, [r3, r2]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2240      	movs	r2, #64	; 0x40
 800544e:	2101      	movs	r1, #1
 8005450:	5499      	strb	r1, [r3, r2]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2241      	movs	r2, #65	; 0x41
 8005456:	2101      	movs	r1, #1
 8005458:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2242      	movs	r2, #66	; 0x42
 800545e:	2101      	movs	r1, #1
 8005460:	5499      	strb	r1, [r3, r2]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2243      	movs	r2, #67	; 0x43
 8005466:	2101      	movs	r1, #1
 8005468:	5499      	strb	r1, [r3, r2]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2244      	movs	r2, #68	; 0x44
 800546e:	2101      	movs	r1, #1
 8005470:	5499      	strb	r1, [r3, r2]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2245      	movs	r2, #69	; 0x45
 8005476:	2101      	movs	r1, #1
 8005478:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	223d      	movs	r2, #61	; 0x3d
 800547e:	2101      	movs	r1, #1
 8005480:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	0018      	movs	r0, r3
 8005486:	46bd      	mov	sp, r7
 8005488:	b002      	add	sp, #8
 800548a:	bd80      	pop	{r7, pc}

0800548c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	223d      	movs	r2, #61	; 0x3d
 8005498:	5c9b      	ldrb	r3, [r3, r2]
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b01      	cmp	r3, #1
 800549e:	d001      	beq.n	80054a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e03b      	b.n	800551c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	223d      	movs	r2, #61	; 0x3d
 80054a8:	2102      	movs	r1, #2
 80054aa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68da      	ldr	r2, [r3, #12]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2101      	movs	r1, #1
 80054b8:	430a      	orrs	r2, r1
 80054ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a18      	ldr	r2, [pc, #96]	; (8005524 <HAL_TIM_Base_Start_IT+0x98>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d00f      	beq.n	80054e6 <HAL_TIM_Base_Start_IT+0x5a>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	2380      	movs	r3, #128	; 0x80
 80054cc:	05db      	lsls	r3, r3, #23
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d009      	beq.n	80054e6 <HAL_TIM_Base_Start_IT+0x5a>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a14      	ldr	r2, [pc, #80]	; (8005528 <HAL_TIM_Base_Start_IT+0x9c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d004      	beq.n	80054e6 <HAL_TIM_Base_Start_IT+0x5a>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a12      	ldr	r2, [pc, #72]	; (800552c <HAL_TIM_Base_Start_IT+0xa0>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d111      	bne.n	800550a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	2207      	movs	r2, #7
 80054ee:	4013      	ands	r3, r2
 80054f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2b06      	cmp	r3, #6
 80054f6:	d010      	beq.n	800551a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2101      	movs	r1, #1
 8005504:	430a      	orrs	r2, r1
 8005506:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005508:	e007      	b.n	800551a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2101      	movs	r1, #1
 8005516:	430a      	orrs	r2, r1
 8005518:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	0018      	movs	r0, r3
 800551e:	46bd      	mov	sp, r7
 8005520:	b004      	add	sp, #16
 8005522:	bd80      	pop	{r7, pc}
 8005524:	40012c00 	.word	0x40012c00
 8005528:	40000400 	.word	0x40000400
 800552c:	40014000 	.word	0x40014000

08005530 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	2202      	movs	r2, #2
 8005540:	4013      	ands	r3, r2
 8005542:	2b02      	cmp	r3, #2
 8005544:	d124      	bne.n	8005590 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	2202      	movs	r2, #2
 800554e:	4013      	ands	r3, r2
 8005550:	2b02      	cmp	r3, #2
 8005552:	d11d      	bne.n	8005590 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2203      	movs	r2, #3
 800555a:	4252      	negs	r2, r2
 800555c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	2203      	movs	r2, #3
 800556c:	4013      	ands	r3, r2
 800556e:	d004      	beq.n	800557a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	0018      	movs	r0, r3
 8005574:	f000 f8fa 	bl	800576c <HAL_TIM_IC_CaptureCallback>
 8005578:	e007      	b.n	800558a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	0018      	movs	r0, r3
 800557e:	f000 f8ed 	bl	800575c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	0018      	movs	r0, r3
 8005586:	f000 f8f9 	bl	800577c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	2204      	movs	r2, #4
 8005598:	4013      	ands	r3, r2
 800559a:	2b04      	cmp	r3, #4
 800559c:	d125      	bne.n	80055ea <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	2204      	movs	r2, #4
 80055a6:	4013      	ands	r3, r2
 80055a8:	2b04      	cmp	r3, #4
 80055aa:	d11e      	bne.n	80055ea <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2205      	movs	r2, #5
 80055b2:	4252      	negs	r2, r2
 80055b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2202      	movs	r2, #2
 80055ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699a      	ldr	r2, [r3, #24]
 80055c2:	23c0      	movs	r3, #192	; 0xc0
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4013      	ands	r3, r2
 80055c8:	d004      	beq.n	80055d4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	0018      	movs	r0, r3
 80055ce:	f000 f8cd 	bl	800576c <HAL_TIM_IC_CaptureCallback>
 80055d2:	e007      	b.n	80055e4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	0018      	movs	r0, r3
 80055d8:	f000 f8c0 	bl	800575c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	0018      	movs	r0, r3
 80055e0:	f000 f8cc 	bl	800577c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	2208      	movs	r2, #8
 80055f2:	4013      	ands	r3, r2
 80055f4:	2b08      	cmp	r3, #8
 80055f6:	d124      	bne.n	8005642 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	2208      	movs	r2, #8
 8005600:	4013      	ands	r3, r2
 8005602:	2b08      	cmp	r3, #8
 8005604:	d11d      	bne.n	8005642 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2209      	movs	r2, #9
 800560c:	4252      	negs	r2, r2
 800560e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2204      	movs	r2, #4
 8005614:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	69db      	ldr	r3, [r3, #28]
 800561c:	2203      	movs	r2, #3
 800561e:	4013      	ands	r3, r2
 8005620:	d004      	beq.n	800562c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	0018      	movs	r0, r3
 8005626:	f000 f8a1 	bl	800576c <HAL_TIM_IC_CaptureCallback>
 800562a:	e007      	b.n	800563c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	0018      	movs	r0, r3
 8005630:	f000 f894 	bl	800575c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	0018      	movs	r0, r3
 8005638:	f000 f8a0 	bl	800577c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	2210      	movs	r2, #16
 800564a:	4013      	ands	r3, r2
 800564c:	2b10      	cmp	r3, #16
 800564e:	d125      	bne.n	800569c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	2210      	movs	r2, #16
 8005658:	4013      	ands	r3, r2
 800565a:	2b10      	cmp	r3, #16
 800565c:	d11e      	bne.n	800569c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2211      	movs	r2, #17
 8005664:	4252      	negs	r2, r2
 8005666:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2208      	movs	r2, #8
 800566c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	69da      	ldr	r2, [r3, #28]
 8005674:	23c0      	movs	r3, #192	; 0xc0
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4013      	ands	r3, r2
 800567a:	d004      	beq.n	8005686 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	0018      	movs	r0, r3
 8005680:	f000 f874 	bl	800576c <HAL_TIM_IC_CaptureCallback>
 8005684:	e007      	b.n	8005696 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	0018      	movs	r0, r3
 800568a:	f000 f867 	bl	800575c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	0018      	movs	r0, r3
 8005692:	f000 f873 	bl	800577c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	2201      	movs	r2, #1
 80056a4:	4013      	ands	r3, r2
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d10f      	bne.n	80056ca <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	2201      	movs	r2, #1
 80056b2:	4013      	ands	r3, r2
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d108      	bne.n	80056ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2202      	movs	r2, #2
 80056be:	4252      	negs	r2, r2
 80056c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	0018      	movs	r0, r3
 80056c6:	f7fd f9dd 	bl	8002a84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	2280      	movs	r2, #128	; 0x80
 80056d2:	4013      	ands	r3, r2
 80056d4:	2b80      	cmp	r3, #128	; 0x80
 80056d6:	d10f      	bne.n	80056f8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	2280      	movs	r2, #128	; 0x80
 80056e0:	4013      	ands	r3, r2
 80056e2:	2b80      	cmp	r3, #128	; 0x80
 80056e4:	d108      	bne.n	80056f8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2281      	movs	r2, #129	; 0x81
 80056ec:	4252      	negs	r2, r2
 80056ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	0018      	movs	r0, r3
 80056f4:	f000 f938 	bl	8005968 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	2240      	movs	r2, #64	; 0x40
 8005700:	4013      	ands	r3, r2
 8005702:	2b40      	cmp	r3, #64	; 0x40
 8005704:	d10f      	bne.n	8005726 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	2240      	movs	r2, #64	; 0x40
 800570e:	4013      	ands	r3, r2
 8005710:	2b40      	cmp	r3, #64	; 0x40
 8005712:	d108      	bne.n	8005726 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2241      	movs	r2, #65	; 0x41
 800571a:	4252      	negs	r2, r2
 800571c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	0018      	movs	r0, r3
 8005722:	f000 f833 	bl	800578c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	2220      	movs	r2, #32
 800572e:	4013      	ands	r3, r2
 8005730:	2b20      	cmp	r3, #32
 8005732:	d10f      	bne.n	8005754 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	2220      	movs	r2, #32
 800573c:	4013      	ands	r3, r2
 800573e:	2b20      	cmp	r3, #32
 8005740:	d108      	bne.n	8005754 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2221      	movs	r2, #33	; 0x21
 8005748:	4252      	negs	r2, r2
 800574a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	0018      	movs	r0, r3
 8005750:	f000 f902 	bl	8005958 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005754:	46c0      	nop			; (mov r8, r8)
 8005756:	46bd      	mov	sp, r7
 8005758:	b002      	add	sp, #8
 800575a:	bd80      	pop	{r7, pc}

0800575c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005764:	46c0      	nop			; (mov r8, r8)
 8005766:	46bd      	mov	sp, r7
 8005768:	b002      	add	sp, #8
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005774:	46c0      	nop			; (mov r8, r8)
 8005776:	46bd      	mov	sp, r7
 8005778:	b002      	add	sp, #8
 800577a:	bd80      	pop	{r7, pc}

0800577c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005784:	46c0      	nop			; (mov r8, r8)
 8005786:	46bd      	mov	sp, r7
 8005788:	b002      	add	sp, #8
 800578a:	bd80      	pop	{r7, pc}

0800578c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005794:	46c0      	nop			; (mov r8, r8)
 8005796:	46bd      	mov	sp, r7
 8005798:	b002      	add	sp, #8
 800579a:	bd80      	pop	{r7, pc}

0800579c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a34      	ldr	r2, [pc, #208]	; (8005880 <TIM_Base_SetConfig+0xe4>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d008      	beq.n	80057c6 <TIM_Base_SetConfig+0x2a>
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	2380      	movs	r3, #128	; 0x80
 80057b8:	05db      	lsls	r3, r3, #23
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d003      	beq.n	80057c6 <TIM_Base_SetConfig+0x2a>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a30      	ldr	r2, [pc, #192]	; (8005884 <TIM_Base_SetConfig+0xe8>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d108      	bne.n	80057d8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2270      	movs	r2, #112	; 0x70
 80057ca:	4393      	bics	r3, r2
 80057cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a29      	ldr	r2, [pc, #164]	; (8005880 <TIM_Base_SetConfig+0xe4>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d018      	beq.n	8005812 <TIM_Base_SetConfig+0x76>
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	2380      	movs	r3, #128	; 0x80
 80057e4:	05db      	lsls	r3, r3, #23
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d013      	beq.n	8005812 <TIM_Base_SetConfig+0x76>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a25      	ldr	r2, [pc, #148]	; (8005884 <TIM_Base_SetConfig+0xe8>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d00f      	beq.n	8005812 <TIM_Base_SetConfig+0x76>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a24      	ldr	r2, [pc, #144]	; (8005888 <TIM_Base_SetConfig+0xec>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d00b      	beq.n	8005812 <TIM_Base_SetConfig+0x76>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a23      	ldr	r2, [pc, #140]	; (800588c <TIM_Base_SetConfig+0xf0>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d007      	beq.n	8005812 <TIM_Base_SetConfig+0x76>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a22      	ldr	r2, [pc, #136]	; (8005890 <TIM_Base_SetConfig+0xf4>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d003      	beq.n	8005812 <TIM_Base_SetConfig+0x76>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a21      	ldr	r2, [pc, #132]	; (8005894 <TIM_Base_SetConfig+0xf8>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d108      	bne.n	8005824 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	4a20      	ldr	r2, [pc, #128]	; (8005898 <TIM_Base_SetConfig+0xfc>)
 8005816:	4013      	ands	r3, r2
 8005818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	4313      	orrs	r3, r2
 8005822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2280      	movs	r2, #128	; 0x80
 8005828:	4393      	bics	r3, r2
 800582a:	001a      	movs	r2, r3
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	4313      	orrs	r3, r2
 8005832:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	689a      	ldr	r2, [r3, #8]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a0c      	ldr	r2, [pc, #48]	; (8005880 <TIM_Base_SetConfig+0xe4>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d00b      	beq.n	800586a <TIM_Base_SetConfig+0xce>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a0d      	ldr	r2, [pc, #52]	; (800588c <TIM_Base_SetConfig+0xf0>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d007      	beq.n	800586a <TIM_Base_SetConfig+0xce>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a0c      	ldr	r2, [pc, #48]	; (8005890 <TIM_Base_SetConfig+0xf4>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d003      	beq.n	800586a <TIM_Base_SetConfig+0xce>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a0b      	ldr	r2, [pc, #44]	; (8005894 <TIM_Base_SetConfig+0xf8>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d103      	bne.n	8005872 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	691a      	ldr	r2, [r3, #16]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	615a      	str	r2, [r3, #20]
}
 8005878:	46c0      	nop			; (mov r8, r8)
 800587a:	46bd      	mov	sp, r7
 800587c:	b004      	add	sp, #16
 800587e:	bd80      	pop	{r7, pc}
 8005880:	40012c00 	.word	0x40012c00
 8005884:	40000400 	.word	0x40000400
 8005888:	40002000 	.word	0x40002000
 800588c:	40014000 	.word	0x40014000
 8005890:	40014400 	.word	0x40014400
 8005894:	40014800 	.word	0x40014800
 8005898:	fffffcff 	.word	0xfffffcff

0800589c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	223c      	movs	r2, #60	; 0x3c
 80058aa:	5c9b      	ldrb	r3, [r3, r2]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d101      	bne.n	80058b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058b0:	2302      	movs	r3, #2
 80058b2:	e047      	b.n	8005944 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	223c      	movs	r2, #60	; 0x3c
 80058b8:	2101      	movs	r1, #1
 80058ba:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	223d      	movs	r2, #61	; 0x3d
 80058c0:	2102      	movs	r1, #2
 80058c2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2270      	movs	r2, #112	; 0x70
 80058d8:	4393      	bics	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a16      	ldr	r2, [pc, #88]	; (800594c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d00f      	beq.n	8005918 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	2380      	movs	r3, #128	; 0x80
 80058fe:	05db      	lsls	r3, r3, #23
 8005900:	429a      	cmp	r2, r3
 8005902:	d009      	beq.n	8005918 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a11      	ldr	r2, [pc, #68]	; (8005950 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d004      	beq.n	8005918 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a10      	ldr	r2, [pc, #64]	; (8005954 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d10c      	bne.n	8005932 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	2280      	movs	r2, #128	; 0x80
 800591c:	4393      	bics	r3, r2
 800591e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	4313      	orrs	r3, r2
 8005928:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	223d      	movs	r2, #61	; 0x3d
 8005936:	2101      	movs	r1, #1
 8005938:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	223c      	movs	r2, #60	; 0x3c
 800593e:	2100      	movs	r1, #0
 8005940:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	0018      	movs	r0, r3
 8005946:	46bd      	mov	sp, r7
 8005948:	b004      	add	sp, #16
 800594a:	bd80      	pop	{r7, pc}
 800594c:	40012c00 	.word	0x40012c00
 8005950:	40000400 	.word	0x40000400
 8005954:	40014000 	.word	0x40014000

08005958 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005960:	46c0      	nop			; (mov r8, r8)
 8005962:	46bd      	mov	sp, r7
 8005964:	b002      	add	sp, #8
 8005966:	bd80      	pop	{r7, pc}

08005968 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005970:	46c0      	nop			; (mov r8, r8)
 8005972:	46bd      	mov	sp, r7
 8005974:	b002      	add	sp, #8
 8005976:	bd80      	pop	{r7, pc}

08005978 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e044      	b.n	8005a14 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800598e:	2b00      	cmp	r3, #0
 8005990:	d107      	bne.n	80059a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2278      	movs	r2, #120	; 0x78
 8005996:	2100      	movs	r1, #0
 8005998:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	0018      	movs	r0, r3
 800599e:	f7fd fc03 	bl	80031a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2224      	movs	r2, #36	; 0x24
 80059a6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2101      	movs	r1, #1
 80059b4:	438a      	bics	r2, r1
 80059b6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	0018      	movs	r0, r3
 80059bc:	f000 fc24 	bl	8006208 <UART_SetConfig>
 80059c0:	0003      	movs	r3, r0
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d101      	bne.n	80059ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e024      	b.n	8005a14 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	0018      	movs	r0, r3
 80059d6:	f000 fd9f 	bl	8006518 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	490d      	ldr	r1, [pc, #52]	; (8005a1c <HAL_UART_Init+0xa4>)
 80059e6:	400a      	ands	r2, r1
 80059e8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	689a      	ldr	r2, [r3, #8]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	212a      	movs	r1, #42	; 0x2a
 80059f6:	438a      	bics	r2, r1
 80059f8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2101      	movs	r1, #1
 8005a06:	430a      	orrs	r2, r1
 8005a08:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	0018      	movs	r0, r3
 8005a0e:	f000 fe37 	bl	8006680 <UART_CheckIdleState>
 8005a12:	0003      	movs	r3, r0
}
 8005a14:	0018      	movs	r0, r3
 8005a16:	46bd      	mov	sp, r7
 8005a18:	b002      	add	sp, #8
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	ffffb7ff 	.word	0xffffb7ff

08005a20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b08a      	sub	sp, #40	; 0x28
 8005a24:	af02      	add	r7, sp, #8
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	603b      	str	r3, [r7, #0]
 8005a2c:	1dbb      	adds	r3, r7, #6
 8005a2e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a34:	2b20      	cmp	r3, #32
 8005a36:	d000      	beq.n	8005a3a <HAL_UART_Transmit+0x1a>
 8005a38:	e08d      	b.n	8005b56 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d003      	beq.n	8005a48 <HAL_UART_Transmit+0x28>
 8005a40:	1dbb      	adds	r3, r7, #6
 8005a42:	881b      	ldrh	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e085      	b.n	8005b58 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	689a      	ldr	r2, [r3, #8]
 8005a50:	2380      	movs	r3, #128	; 0x80
 8005a52:	015b      	lsls	r3, r3, #5
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d109      	bne.n	8005a6c <HAL_UART_Transmit+0x4c>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d105      	bne.n	8005a6c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2201      	movs	r2, #1
 8005a64:	4013      	ands	r3, r2
 8005a66:	d001      	beq.n	8005a6c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e075      	b.n	8005b58 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2284      	movs	r2, #132	; 0x84
 8005a70:	2100      	movs	r1, #0
 8005a72:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2221      	movs	r2, #33	; 0x21
 8005a78:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a7a:	f7fd fd7b 	bl	8003574 <HAL_GetTick>
 8005a7e:	0003      	movs	r3, r0
 8005a80:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	1dba      	adds	r2, r7, #6
 8005a86:	2150      	movs	r1, #80	; 0x50
 8005a88:	8812      	ldrh	r2, [r2, #0]
 8005a8a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	1dba      	adds	r2, r7, #6
 8005a90:	2152      	movs	r1, #82	; 0x52
 8005a92:	8812      	ldrh	r2, [r2, #0]
 8005a94:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	689a      	ldr	r2, [r3, #8]
 8005a9a:	2380      	movs	r3, #128	; 0x80
 8005a9c:	015b      	lsls	r3, r3, #5
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d108      	bne.n	8005ab4 <HAL_UART_Transmit+0x94>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d104      	bne.n	8005ab4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	61bb      	str	r3, [r7, #24]
 8005ab2:	e003      	b.n	8005abc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005abc:	e030      	b.n	8005b20 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	0013      	movs	r3, r2
 8005ac8:	2200      	movs	r2, #0
 8005aca:	2180      	movs	r1, #128	; 0x80
 8005acc:	f000 fe80 	bl	80067d0 <UART_WaitOnFlagUntilTimeout>
 8005ad0:	1e03      	subs	r3, r0, #0
 8005ad2:	d004      	beq.n	8005ade <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e03c      	b.n	8005b58 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10b      	bne.n	8005afc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	881a      	ldrh	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	05d2      	lsls	r2, r2, #23
 8005aee:	0dd2      	lsrs	r2, r2, #23
 8005af0:	b292      	uxth	r2, r2
 8005af2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	3302      	adds	r3, #2
 8005af8:	61bb      	str	r3, [r7, #24]
 8005afa:	e008      	b.n	8005b0e <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	781a      	ldrb	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	b292      	uxth	r2, r2
 8005b06:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2252      	movs	r2, #82	; 0x52
 8005b12:	5a9b      	ldrh	r3, [r3, r2]
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	3b01      	subs	r3, #1
 8005b18:	b299      	uxth	r1, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2252      	movs	r2, #82	; 0x52
 8005b1e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2252      	movs	r2, #82	; 0x52
 8005b24:	5a9b      	ldrh	r3, [r3, r2]
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1c8      	bne.n	8005abe <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	0013      	movs	r3, r2
 8005b36:	2200      	movs	r2, #0
 8005b38:	2140      	movs	r1, #64	; 0x40
 8005b3a:	f000 fe49 	bl	80067d0 <UART_WaitOnFlagUntilTimeout>
 8005b3e:	1e03      	subs	r3, r0, #0
 8005b40:	d004      	beq.n	8005b4c <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2220      	movs	r2, #32
 8005b46:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e005      	b.n	8005b58 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	e000      	b.n	8005b58 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8005b56:	2302      	movs	r3, #2
  }
}
 8005b58:	0018      	movs	r0, r3
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	b008      	add	sp, #32
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	1dbb      	adds	r3, r7, #6
 8005b6c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2280      	movs	r2, #128	; 0x80
 8005b72:	589b      	ldr	r3, [r3, r2]
 8005b74:	2b20      	cmp	r3, #32
 8005b76:	d145      	bne.n	8005c04 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <HAL_UART_Receive_IT+0x26>
 8005b7e:	1dbb      	adds	r3, r7, #6
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e03d      	b.n	8005c06 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	689a      	ldr	r2, [r3, #8]
 8005b8e:	2380      	movs	r3, #128	; 0x80
 8005b90:	015b      	lsls	r3, r3, #5
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d109      	bne.n	8005baa <HAL_UART_Receive_IT+0x4a>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d105      	bne.n	8005baa <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	d001      	beq.n	8005baa <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e02d      	b.n	8005c06 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	2380      	movs	r3, #128	; 0x80
 8005bb8:	041b      	lsls	r3, r3, #16
 8005bba:	4013      	ands	r3, r2
 8005bbc:	d019      	beq.n	8005bf2 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8005bc2:	613b      	str	r3, [r7, #16]
  return(result);
 8005bc4:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005bc6:	61fb      	str	r3, [r7, #28]
 8005bc8:	2301      	movs	r3, #1
 8005bca:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	f383 8810 	msr	PRIMASK, r3
}
 8005bd2:	46c0      	nop			; (mov r8, r8)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2180      	movs	r1, #128	; 0x80
 8005be0:	04c9      	lsls	r1, r1, #19
 8005be2:	430a      	orrs	r2, r1
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	f383 8810 	msr	PRIMASK, r3
}
 8005bf0:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005bf2:	1dbb      	adds	r3, r7, #6
 8005bf4:	881a      	ldrh	r2, [r3, #0]
 8005bf6:	68b9      	ldr	r1, [r7, #8]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	0018      	movs	r0, r3
 8005bfc:	f000 fe52 	bl	80068a4 <UART_Start_Receive_IT>
 8005c00:	0003      	movs	r3, r0
 8005c02:	e000      	b.n	8005c06 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8005c04:	2302      	movs	r3, #2
  }
}
 8005c06:	0018      	movs	r0, r3
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	b008      	add	sp, #32
 8005c0c:	bd80      	pop	{r7, pc}
	...

08005c10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c10:	b590      	push	{r4, r7, lr}
 8005c12:	b0ab      	sub	sp, #172	; 0xac
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	22a4      	movs	r2, #164	; 0xa4
 8005c20:	18b9      	adds	r1, r7, r2
 8005c22:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	20a0      	movs	r0, #160	; 0xa0
 8005c2c:	1839      	adds	r1, r7, r0
 8005c2e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	219c      	movs	r1, #156	; 0x9c
 8005c38:	1879      	adds	r1, r7, r1
 8005c3a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005c3c:	0011      	movs	r1, r2
 8005c3e:	18bb      	adds	r3, r7, r2
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a99      	ldr	r2, [pc, #612]	; (8005ea8 <HAL_UART_IRQHandler+0x298>)
 8005c44:	4013      	ands	r3, r2
 8005c46:	2298      	movs	r2, #152	; 0x98
 8005c48:	18bc      	adds	r4, r7, r2
 8005c4a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005c4c:	18bb      	adds	r3, r7, r2
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d114      	bne.n	8005c7e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c54:	187b      	adds	r3, r7, r1
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2220      	movs	r2, #32
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	d00f      	beq.n	8005c7e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c5e:	183b      	adds	r3, r7, r0
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2220      	movs	r2, #32
 8005c64:	4013      	ands	r3, r2
 8005c66:	d00a      	beq.n	8005c7e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d100      	bne.n	8005c72 <HAL_UART_IRQHandler+0x62>
 8005c70:	e29e      	b.n	80061b0 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	0010      	movs	r0, r2
 8005c7a:	4798      	blx	r3
      }
      return;
 8005c7c:	e298      	b.n	80061b0 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005c7e:	2398      	movs	r3, #152	; 0x98
 8005c80:	18fb      	adds	r3, r7, r3
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d100      	bne.n	8005c8a <HAL_UART_IRQHandler+0x7a>
 8005c88:	e114      	b.n	8005eb4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005c8a:	239c      	movs	r3, #156	; 0x9c
 8005c8c:	18fb      	adds	r3, r7, r3
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2201      	movs	r2, #1
 8005c92:	4013      	ands	r3, r2
 8005c94:	d106      	bne.n	8005ca4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005c96:	23a0      	movs	r3, #160	; 0xa0
 8005c98:	18fb      	adds	r3, r7, r3
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a83      	ldr	r2, [pc, #524]	; (8005eac <HAL_UART_IRQHandler+0x29c>)
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	d100      	bne.n	8005ca4 <HAL_UART_IRQHandler+0x94>
 8005ca2:	e107      	b.n	8005eb4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ca4:	23a4      	movs	r3, #164	; 0xa4
 8005ca6:	18fb      	adds	r3, r7, r3
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2201      	movs	r2, #1
 8005cac:	4013      	ands	r3, r2
 8005cae:	d012      	beq.n	8005cd6 <HAL_UART_IRQHandler+0xc6>
 8005cb0:	23a0      	movs	r3, #160	; 0xa0
 8005cb2:	18fb      	adds	r3, r7, r3
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	2380      	movs	r3, #128	; 0x80
 8005cb8:	005b      	lsls	r3, r3, #1
 8005cba:	4013      	ands	r3, r2
 8005cbc:	d00b      	beq.n	8005cd6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2284      	movs	r2, #132	; 0x84
 8005cca:	589b      	ldr	r3, [r3, r2]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2184      	movs	r1, #132	; 0x84
 8005cd4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cd6:	23a4      	movs	r3, #164	; 0xa4
 8005cd8:	18fb      	adds	r3, r7, r3
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2202      	movs	r2, #2
 8005cde:	4013      	ands	r3, r2
 8005ce0:	d011      	beq.n	8005d06 <HAL_UART_IRQHandler+0xf6>
 8005ce2:	239c      	movs	r3, #156	; 0x9c
 8005ce4:	18fb      	adds	r3, r7, r3
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	4013      	ands	r3, r2
 8005cec:	d00b      	beq.n	8005d06 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2284      	movs	r2, #132	; 0x84
 8005cfa:	589b      	ldr	r3, [r3, r2]
 8005cfc:	2204      	movs	r2, #4
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2184      	movs	r1, #132	; 0x84
 8005d04:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d06:	23a4      	movs	r3, #164	; 0xa4
 8005d08:	18fb      	adds	r3, r7, r3
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2204      	movs	r2, #4
 8005d0e:	4013      	ands	r3, r2
 8005d10:	d011      	beq.n	8005d36 <HAL_UART_IRQHandler+0x126>
 8005d12:	239c      	movs	r3, #156	; 0x9c
 8005d14:	18fb      	adds	r3, r7, r3
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	d00b      	beq.n	8005d36 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2204      	movs	r2, #4
 8005d24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2284      	movs	r2, #132	; 0x84
 8005d2a:	589b      	ldr	r3, [r3, r2]
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2184      	movs	r1, #132	; 0x84
 8005d34:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005d36:	23a4      	movs	r3, #164	; 0xa4
 8005d38:	18fb      	adds	r3, r7, r3
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2208      	movs	r2, #8
 8005d3e:	4013      	ands	r3, r2
 8005d40:	d017      	beq.n	8005d72 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d42:	23a0      	movs	r3, #160	; 0xa0
 8005d44:	18fb      	adds	r3, r7, r3
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2220      	movs	r2, #32
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	d105      	bne.n	8005d5a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005d4e:	239c      	movs	r3, #156	; 0x9c
 8005d50:	18fb      	adds	r3, r7, r3
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2201      	movs	r2, #1
 8005d56:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d58:	d00b      	beq.n	8005d72 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2208      	movs	r2, #8
 8005d60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2284      	movs	r2, #132	; 0x84
 8005d66:	589b      	ldr	r3, [r3, r2]
 8005d68:	2208      	movs	r2, #8
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2184      	movs	r1, #132	; 0x84
 8005d70:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005d72:	23a4      	movs	r3, #164	; 0xa4
 8005d74:	18fb      	adds	r3, r7, r3
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	2380      	movs	r3, #128	; 0x80
 8005d7a:	011b      	lsls	r3, r3, #4
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	d013      	beq.n	8005da8 <HAL_UART_IRQHandler+0x198>
 8005d80:	23a0      	movs	r3, #160	; 0xa0
 8005d82:	18fb      	adds	r3, r7, r3
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	2380      	movs	r3, #128	; 0x80
 8005d88:	04db      	lsls	r3, r3, #19
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	d00c      	beq.n	8005da8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2280      	movs	r2, #128	; 0x80
 8005d94:	0112      	lsls	r2, r2, #4
 8005d96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2284      	movs	r2, #132	; 0x84
 8005d9c:	589b      	ldr	r3, [r3, r2]
 8005d9e:	2220      	movs	r2, #32
 8005da0:	431a      	orrs	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2184      	movs	r1, #132	; 0x84
 8005da6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2284      	movs	r2, #132	; 0x84
 8005dac:	589b      	ldr	r3, [r3, r2]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d100      	bne.n	8005db4 <HAL_UART_IRQHandler+0x1a4>
 8005db2:	e1ff      	b.n	80061b4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005db4:	23a4      	movs	r3, #164	; 0xa4
 8005db6:	18fb      	adds	r3, r7, r3
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	d00e      	beq.n	8005dde <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005dc0:	23a0      	movs	r3, #160	; 0xa0
 8005dc2:	18fb      	adds	r3, r7, r3
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	4013      	ands	r3, r2
 8005dca:	d008      	beq.n	8005dde <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d004      	beq.n	8005dde <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	0010      	movs	r0, r2
 8005ddc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2284      	movs	r2, #132	; 0x84
 8005de2:	589b      	ldr	r3, [r3, r2]
 8005de4:	2194      	movs	r1, #148	; 0x94
 8005de6:	187a      	adds	r2, r7, r1
 8005de8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	2240      	movs	r2, #64	; 0x40
 8005df2:	4013      	ands	r3, r2
 8005df4:	2b40      	cmp	r3, #64	; 0x40
 8005df6:	d004      	beq.n	8005e02 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005df8:	187b      	adds	r3, r7, r1
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2228      	movs	r2, #40	; 0x28
 8005dfe:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e00:	d047      	beq.n	8005e92 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	0018      	movs	r0, r3
 8005e06:	f000 fe17 	bl	8006a38 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	2240      	movs	r2, #64	; 0x40
 8005e12:	4013      	ands	r3, r2
 8005e14:	2b40      	cmp	r3, #64	; 0x40
 8005e16:	d137      	bne.n	8005e88 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e18:	f3ef 8310 	mrs	r3, PRIMASK
 8005e1c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005e1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e20:	2090      	movs	r0, #144	; 0x90
 8005e22:	183a      	adds	r2, r7, r0
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	2301      	movs	r3, #1
 8005e28:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e2c:	f383 8810 	msr	PRIMASK, r3
}
 8005e30:	46c0      	nop			; (mov r8, r8)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2140      	movs	r1, #64	; 0x40
 8005e3e:	438a      	bics	r2, r1
 8005e40:	609a      	str	r2, [r3, #8]
 8005e42:	183b      	adds	r3, r7, r0
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e4a:	f383 8810 	msr	PRIMASK, r3
}
 8005e4e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d012      	beq.n	8005e7e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e5c:	4a14      	ldr	r2, [pc, #80]	; (8005eb0 <HAL_UART_IRQHandler+0x2a0>)
 8005e5e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e64:	0018      	movs	r0, r3
 8005e66:	f7fe fa0b 	bl	8004280 <HAL_DMA_Abort_IT>
 8005e6a:	1e03      	subs	r3, r0, #0
 8005e6c:	d01a      	beq.n	8005ea4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e78:	0018      	movs	r0, r3
 8005e7a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e7c:	e012      	b.n	8005ea4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	0018      	movs	r0, r3
 8005e82:	f000 f9ad 	bl	80061e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e86:	e00d      	b.n	8005ea4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	0018      	movs	r0, r3
 8005e8c:	f000 f9a8 	bl	80061e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e90:	e008      	b.n	8005ea4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	0018      	movs	r0, r3
 8005e96:	f000 f9a3 	bl	80061e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2284      	movs	r2, #132	; 0x84
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005ea2:	e187      	b.n	80061b4 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea4:	46c0      	nop			; (mov r8, r8)
    return;
 8005ea6:	e185      	b.n	80061b4 <HAL_UART_IRQHandler+0x5a4>
 8005ea8:	0000080f 	.word	0x0000080f
 8005eac:	04000120 	.word	0x04000120
 8005eb0:	08006b01 	.word	0x08006b01

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d000      	beq.n	8005ebe <HAL_UART_IRQHandler+0x2ae>
 8005ebc:	e139      	b.n	8006132 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005ebe:	23a4      	movs	r3, #164	; 0xa4
 8005ec0:	18fb      	adds	r3, r7, r3
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2210      	movs	r2, #16
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	d100      	bne.n	8005ecc <HAL_UART_IRQHandler+0x2bc>
 8005eca:	e132      	b.n	8006132 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005ecc:	23a0      	movs	r3, #160	; 0xa0
 8005ece:	18fb      	adds	r3, r7, r3
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2210      	movs	r2, #16
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	d100      	bne.n	8005eda <HAL_UART_IRQHandler+0x2ca>
 8005ed8:	e12b      	b.n	8006132 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2210      	movs	r2, #16
 8005ee0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	2240      	movs	r2, #64	; 0x40
 8005eea:	4013      	ands	r3, r2
 8005eec:	2b40      	cmp	r3, #64	; 0x40
 8005eee:	d000      	beq.n	8005ef2 <HAL_UART_IRQHandler+0x2e2>
 8005ef0:	e09f      	b.n	8006032 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	217e      	movs	r1, #126	; 0x7e
 8005efc:	187b      	adds	r3, r7, r1
 8005efe:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005f00:	187b      	adds	r3, r7, r1
 8005f02:	881b      	ldrh	r3, [r3, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d100      	bne.n	8005f0a <HAL_UART_IRQHandler+0x2fa>
 8005f08:	e156      	b.n	80061b8 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2258      	movs	r2, #88	; 0x58
 8005f0e:	5a9b      	ldrh	r3, [r3, r2]
 8005f10:	187a      	adds	r2, r7, r1
 8005f12:	8812      	ldrh	r2, [r2, #0]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d300      	bcc.n	8005f1a <HAL_UART_IRQHandler+0x30a>
 8005f18:	e14e      	b.n	80061b8 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	187a      	adds	r2, r7, r1
 8005f1e:	215a      	movs	r1, #90	; 0x5a
 8005f20:	8812      	ldrh	r2, [r2, #0]
 8005f22:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	2b20      	cmp	r3, #32
 8005f2c:	d06f      	beq.n	800600e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f2e:	f3ef 8310 	mrs	r3, PRIMASK
 8005f32:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f36:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f38:	2301      	movs	r3, #1
 8005f3a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3e:	f383 8810 	msr	PRIMASK, r3
}
 8005f42:	46c0      	nop			; (mov r8, r8)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	499e      	ldr	r1, [pc, #632]	; (80061c8 <HAL_UART_IRQHandler+0x5b8>)
 8005f50:	400a      	ands	r2, r1
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f56:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5a:	f383 8810 	msr	PRIMASK, r3
}
 8005f5e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f60:	f3ef 8310 	mrs	r3, PRIMASK
 8005f64:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f68:	677b      	str	r3, [r7, #116]	; 0x74
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f70:	f383 8810 	msr	PRIMASK, r3
}
 8005f74:	46c0      	nop			; (mov r8, r8)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	689a      	ldr	r2, [r3, #8]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2101      	movs	r1, #1
 8005f82:	438a      	bics	r2, r1
 8005f84:	609a      	str	r2, [r3, #8]
 8005f86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f88:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f8c:	f383 8810 	msr	PRIMASK, r3
}
 8005f90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f92:	f3ef 8310 	mrs	r3, PRIMASK
 8005f96:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005f98:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f9a:	673b      	str	r3, [r7, #112]	; 0x70
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fa2:	f383 8810 	msr	PRIMASK, r3
}
 8005fa6:	46c0      	nop			; (mov r8, r8)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689a      	ldr	r2, [r3, #8]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2140      	movs	r1, #64	; 0x40
 8005fb4:	438a      	bics	r2, r1
 8005fb6:	609a      	str	r2, [r3, #8]
 8005fb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fba:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fbe:	f383 8810 	msr	PRIMASK, r3
}
 8005fc2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2280      	movs	r2, #128	; 0x80
 8005fc8:	2120      	movs	r1, #32
 8005fca:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8005fd6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005fd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fdc:	2301      	movs	r3, #1
 8005fde:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fe0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fe2:	f383 8810 	msr	PRIMASK, r3
}
 8005fe6:	46c0      	nop			; (mov r8, r8)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2110      	movs	r1, #16
 8005ff4:	438a      	bics	r2, r1
 8005ff6:	601a      	str	r2, [r3, #0]
 8005ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ffa:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ffe:	f383 8810 	msr	PRIMASK, r3
}
 8006002:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006008:	0018      	movs	r0, r3
 800600a:	f7fe f901 	bl	8004210 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2202      	movs	r2, #2
 8006012:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2258      	movs	r2, #88	; 0x58
 8006018:	5a9a      	ldrh	r2, [r3, r2]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	215a      	movs	r1, #90	; 0x5a
 800601e:	5a5b      	ldrh	r3, [r3, r1]
 8006020:	b29b      	uxth	r3, r3
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	b29a      	uxth	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	0011      	movs	r1, r2
 800602a:	0018      	movs	r0, r3
 800602c:	f000 f8e0 	bl	80061f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006030:	e0c2      	b.n	80061b8 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2258      	movs	r2, #88	; 0x58
 8006036:	5a99      	ldrh	r1, [r3, r2]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	225a      	movs	r2, #90	; 0x5a
 800603c:	5a9b      	ldrh	r3, [r3, r2]
 800603e:	b29a      	uxth	r2, r3
 8006040:	208e      	movs	r0, #142	; 0x8e
 8006042:	183b      	adds	r3, r7, r0
 8006044:	1a8a      	subs	r2, r1, r2
 8006046:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	225a      	movs	r2, #90	; 0x5a
 800604c:	5a9b      	ldrh	r3, [r3, r2]
 800604e:	b29b      	uxth	r3, r3
 8006050:	2b00      	cmp	r3, #0
 8006052:	d100      	bne.n	8006056 <HAL_UART_IRQHandler+0x446>
 8006054:	e0b2      	b.n	80061bc <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8006056:	183b      	adds	r3, r7, r0
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d100      	bne.n	8006060 <HAL_UART_IRQHandler+0x450>
 800605e:	e0ad      	b.n	80061bc <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006060:	f3ef 8310 	mrs	r3, PRIMASK
 8006064:	60fb      	str	r3, [r7, #12]
  return(result);
 8006066:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006068:	2488      	movs	r4, #136	; 0x88
 800606a:	193a      	adds	r2, r7, r4
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	2301      	movs	r3, #1
 8006070:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	f383 8810 	msr	PRIMASK, r3
}
 8006078:	46c0      	nop			; (mov r8, r8)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4951      	ldr	r1, [pc, #324]	; (80061cc <HAL_UART_IRQHandler+0x5bc>)
 8006086:	400a      	ands	r2, r1
 8006088:	601a      	str	r2, [r3, #0]
 800608a:	193b      	adds	r3, r7, r4
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f383 8810 	msr	PRIMASK, r3
}
 8006096:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006098:	f3ef 8310 	mrs	r3, PRIMASK
 800609c:	61bb      	str	r3, [r7, #24]
  return(result);
 800609e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a0:	2484      	movs	r4, #132	; 0x84
 80060a2:	193a      	adds	r2, r7, r4
 80060a4:	6013      	str	r3, [r2, #0]
 80060a6:	2301      	movs	r3, #1
 80060a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	f383 8810 	msr	PRIMASK, r3
}
 80060b0:	46c0      	nop			; (mov r8, r8)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	689a      	ldr	r2, [r3, #8]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2101      	movs	r1, #1
 80060be:	438a      	bics	r2, r1
 80060c0:	609a      	str	r2, [r3, #8]
 80060c2:	193b      	adds	r3, r7, r4
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	f383 8810 	msr	PRIMASK, r3
}
 80060ce:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2280      	movs	r2, #128	; 0x80
 80060d4:	2120      	movs	r1, #32
 80060d6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060e4:	f3ef 8310 	mrs	r3, PRIMASK
 80060e8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ec:	2480      	movs	r4, #128	; 0x80
 80060ee:	193a      	adds	r2, r7, r4
 80060f0:	6013      	str	r3, [r2, #0]
 80060f2:	2301      	movs	r3, #1
 80060f4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f8:	f383 8810 	msr	PRIMASK, r3
}
 80060fc:	46c0      	nop			; (mov r8, r8)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2110      	movs	r1, #16
 800610a:	438a      	bics	r2, r1
 800610c:	601a      	str	r2, [r3, #0]
 800610e:	193b      	adds	r3, r7, r4
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006116:	f383 8810 	msr	PRIMASK, r3
}
 800611a:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2202      	movs	r2, #2
 8006120:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006122:	183b      	adds	r3, r7, r0
 8006124:	881a      	ldrh	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	0011      	movs	r1, r2
 800612a:	0018      	movs	r0, r3
 800612c:	f000 f860 	bl	80061f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006130:	e044      	b.n	80061bc <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006132:	23a4      	movs	r3, #164	; 0xa4
 8006134:	18fb      	adds	r3, r7, r3
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	2380      	movs	r3, #128	; 0x80
 800613a:	035b      	lsls	r3, r3, #13
 800613c:	4013      	ands	r3, r2
 800613e:	d010      	beq.n	8006162 <HAL_UART_IRQHandler+0x552>
 8006140:	239c      	movs	r3, #156	; 0x9c
 8006142:	18fb      	adds	r3, r7, r3
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	2380      	movs	r3, #128	; 0x80
 8006148:	03db      	lsls	r3, r3, #15
 800614a:	4013      	ands	r3, r2
 800614c:	d009      	beq.n	8006162 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2280      	movs	r2, #128	; 0x80
 8006154:	0352      	lsls	r2, r2, #13
 8006156:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	0018      	movs	r0, r3
 800615c:	f000 feca 	bl	8006ef4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006160:	e02f      	b.n	80061c2 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006162:	23a4      	movs	r3, #164	; 0xa4
 8006164:	18fb      	adds	r3, r7, r3
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2280      	movs	r2, #128	; 0x80
 800616a:	4013      	ands	r3, r2
 800616c:	d00f      	beq.n	800618e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800616e:	23a0      	movs	r3, #160	; 0xa0
 8006170:	18fb      	adds	r3, r7, r3
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2280      	movs	r2, #128	; 0x80
 8006176:	4013      	ands	r3, r2
 8006178:	d009      	beq.n	800618e <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800617e:	2b00      	cmp	r3, #0
 8006180:	d01e      	beq.n	80061c0 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	0010      	movs	r0, r2
 800618a:	4798      	blx	r3
    }
    return;
 800618c:	e018      	b.n	80061c0 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800618e:	23a4      	movs	r3, #164	; 0xa4
 8006190:	18fb      	adds	r3, r7, r3
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2240      	movs	r2, #64	; 0x40
 8006196:	4013      	ands	r3, r2
 8006198:	d013      	beq.n	80061c2 <HAL_UART_IRQHandler+0x5b2>
 800619a:	23a0      	movs	r3, #160	; 0xa0
 800619c:	18fb      	adds	r3, r7, r3
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2240      	movs	r2, #64	; 0x40
 80061a2:	4013      	ands	r3, r2
 80061a4:	d00d      	beq.n	80061c2 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	0018      	movs	r0, r3
 80061aa:	f000 fcc0 	bl	8006b2e <UART_EndTransmit_IT>
    return;
 80061ae:	e008      	b.n	80061c2 <HAL_UART_IRQHandler+0x5b2>
      return;
 80061b0:	46c0      	nop			; (mov r8, r8)
 80061b2:	e006      	b.n	80061c2 <HAL_UART_IRQHandler+0x5b2>
    return;
 80061b4:	46c0      	nop			; (mov r8, r8)
 80061b6:	e004      	b.n	80061c2 <HAL_UART_IRQHandler+0x5b2>
      return;
 80061b8:	46c0      	nop			; (mov r8, r8)
 80061ba:	e002      	b.n	80061c2 <HAL_UART_IRQHandler+0x5b2>
      return;
 80061bc:	46c0      	nop			; (mov r8, r8)
 80061be:	e000      	b.n	80061c2 <HAL_UART_IRQHandler+0x5b2>
    return;
 80061c0:	46c0      	nop			; (mov r8, r8)
  }

}
 80061c2:	46bd      	mov	sp, r7
 80061c4:	b02b      	add	sp, #172	; 0xac
 80061c6:	bd90      	pop	{r4, r7, pc}
 80061c8:	fffffeff 	.word	0xfffffeff
 80061cc:	fffffedf 	.word	0xfffffedf

080061d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80061d8:	46c0      	nop			; (mov r8, r8)
 80061da:	46bd      	mov	sp, r7
 80061dc:	b002      	add	sp, #8
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80061e8:	46c0      	nop			; (mov r8, r8)
 80061ea:	46bd      	mov	sp, r7
 80061ec:	b002      	add	sp, #8
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	000a      	movs	r2, r1
 80061fa:	1cbb      	adds	r3, r7, #2
 80061fc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061fe:	46c0      	nop			; (mov r8, r8)
 8006200:	46bd      	mov	sp, r7
 8006202:	b002      	add	sp, #8
 8006204:	bd80      	pop	{r7, pc}
	...

08006208 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b088      	sub	sp, #32
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006210:	231e      	movs	r3, #30
 8006212:	18fb      	adds	r3, r7, r3
 8006214:	2200      	movs	r2, #0
 8006216:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689a      	ldr	r2, [r3, #8]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	431a      	orrs	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	431a      	orrs	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	69db      	ldr	r3, [r3, #28]
 800622c:	4313      	orrs	r3, r2
 800622e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4aaf      	ldr	r2, [pc, #700]	; (80064f4 <UART_SetConfig+0x2ec>)
 8006238:	4013      	ands	r3, r2
 800623a:	0019      	movs	r1, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	430a      	orrs	r2, r1
 8006244:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	4aaa      	ldr	r2, [pc, #680]	; (80064f8 <UART_SetConfig+0x2f0>)
 800624e:	4013      	ands	r3, r2
 8006250:	0019      	movs	r1, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68da      	ldr	r2, [r3, #12]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	430a      	orrs	r2, r1
 800625c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a1b      	ldr	r3, [r3, #32]
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	4313      	orrs	r3, r2
 800626c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	4aa1      	ldr	r2, [pc, #644]	; (80064fc <UART_SetConfig+0x2f4>)
 8006276:	4013      	ands	r3, r2
 8006278:	0019      	movs	r1, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	430a      	orrs	r2, r1
 8006282:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a9d      	ldr	r2, [pc, #628]	; (8006500 <UART_SetConfig+0x2f8>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d127      	bne.n	80062de <UART_SetConfig+0xd6>
 800628e:	4b9d      	ldr	r3, [pc, #628]	; (8006504 <UART_SetConfig+0x2fc>)
 8006290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006292:	2203      	movs	r2, #3
 8006294:	4013      	ands	r3, r2
 8006296:	2b03      	cmp	r3, #3
 8006298:	d00d      	beq.n	80062b6 <UART_SetConfig+0xae>
 800629a:	d81b      	bhi.n	80062d4 <UART_SetConfig+0xcc>
 800629c:	2b02      	cmp	r3, #2
 800629e:	d014      	beq.n	80062ca <UART_SetConfig+0xc2>
 80062a0:	d818      	bhi.n	80062d4 <UART_SetConfig+0xcc>
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d002      	beq.n	80062ac <UART_SetConfig+0xa4>
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d00a      	beq.n	80062c0 <UART_SetConfig+0xb8>
 80062aa:	e013      	b.n	80062d4 <UART_SetConfig+0xcc>
 80062ac:	231f      	movs	r3, #31
 80062ae:	18fb      	adds	r3, r7, r3
 80062b0:	2200      	movs	r2, #0
 80062b2:	701a      	strb	r2, [r3, #0]
 80062b4:	e065      	b.n	8006382 <UART_SetConfig+0x17a>
 80062b6:	231f      	movs	r3, #31
 80062b8:	18fb      	adds	r3, r7, r3
 80062ba:	2202      	movs	r2, #2
 80062bc:	701a      	strb	r2, [r3, #0]
 80062be:	e060      	b.n	8006382 <UART_SetConfig+0x17a>
 80062c0:	231f      	movs	r3, #31
 80062c2:	18fb      	adds	r3, r7, r3
 80062c4:	2204      	movs	r2, #4
 80062c6:	701a      	strb	r2, [r3, #0]
 80062c8:	e05b      	b.n	8006382 <UART_SetConfig+0x17a>
 80062ca:	231f      	movs	r3, #31
 80062cc:	18fb      	adds	r3, r7, r3
 80062ce:	2208      	movs	r2, #8
 80062d0:	701a      	strb	r2, [r3, #0]
 80062d2:	e056      	b.n	8006382 <UART_SetConfig+0x17a>
 80062d4:	231f      	movs	r3, #31
 80062d6:	18fb      	adds	r3, r7, r3
 80062d8:	2210      	movs	r2, #16
 80062da:	701a      	strb	r2, [r3, #0]
 80062dc:	e051      	b.n	8006382 <UART_SetConfig+0x17a>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a89      	ldr	r2, [pc, #548]	; (8006508 <UART_SetConfig+0x300>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d134      	bne.n	8006352 <UART_SetConfig+0x14a>
 80062e8:	4b86      	ldr	r3, [pc, #536]	; (8006504 <UART_SetConfig+0x2fc>)
 80062ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062ec:	23c0      	movs	r3, #192	; 0xc0
 80062ee:	029b      	lsls	r3, r3, #10
 80062f0:	4013      	ands	r3, r2
 80062f2:	22c0      	movs	r2, #192	; 0xc0
 80062f4:	0292      	lsls	r2, r2, #10
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d017      	beq.n	800632a <UART_SetConfig+0x122>
 80062fa:	22c0      	movs	r2, #192	; 0xc0
 80062fc:	0292      	lsls	r2, r2, #10
 80062fe:	4293      	cmp	r3, r2
 8006300:	d822      	bhi.n	8006348 <UART_SetConfig+0x140>
 8006302:	2280      	movs	r2, #128	; 0x80
 8006304:	0292      	lsls	r2, r2, #10
 8006306:	4293      	cmp	r3, r2
 8006308:	d019      	beq.n	800633e <UART_SetConfig+0x136>
 800630a:	2280      	movs	r2, #128	; 0x80
 800630c:	0292      	lsls	r2, r2, #10
 800630e:	4293      	cmp	r3, r2
 8006310:	d81a      	bhi.n	8006348 <UART_SetConfig+0x140>
 8006312:	2b00      	cmp	r3, #0
 8006314:	d004      	beq.n	8006320 <UART_SetConfig+0x118>
 8006316:	2280      	movs	r2, #128	; 0x80
 8006318:	0252      	lsls	r2, r2, #9
 800631a:	4293      	cmp	r3, r2
 800631c:	d00a      	beq.n	8006334 <UART_SetConfig+0x12c>
 800631e:	e013      	b.n	8006348 <UART_SetConfig+0x140>
 8006320:	231f      	movs	r3, #31
 8006322:	18fb      	adds	r3, r7, r3
 8006324:	2200      	movs	r2, #0
 8006326:	701a      	strb	r2, [r3, #0]
 8006328:	e02b      	b.n	8006382 <UART_SetConfig+0x17a>
 800632a:	231f      	movs	r3, #31
 800632c:	18fb      	adds	r3, r7, r3
 800632e:	2202      	movs	r2, #2
 8006330:	701a      	strb	r2, [r3, #0]
 8006332:	e026      	b.n	8006382 <UART_SetConfig+0x17a>
 8006334:	231f      	movs	r3, #31
 8006336:	18fb      	adds	r3, r7, r3
 8006338:	2204      	movs	r2, #4
 800633a:	701a      	strb	r2, [r3, #0]
 800633c:	e021      	b.n	8006382 <UART_SetConfig+0x17a>
 800633e:	231f      	movs	r3, #31
 8006340:	18fb      	adds	r3, r7, r3
 8006342:	2208      	movs	r2, #8
 8006344:	701a      	strb	r2, [r3, #0]
 8006346:	e01c      	b.n	8006382 <UART_SetConfig+0x17a>
 8006348:	231f      	movs	r3, #31
 800634a:	18fb      	adds	r3, r7, r3
 800634c:	2210      	movs	r2, #16
 800634e:	701a      	strb	r2, [r3, #0]
 8006350:	e017      	b.n	8006382 <UART_SetConfig+0x17a>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a6d      	ldr	r2, [pc, #436]	; (800650c <UART_SetConfig+0x304>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d104      	bne.n	8006366 <UART_SetConfig+0x15e>
 800635c:	231f      	movs	r3, #31
 800635e:	18fb      	adds	r3, r7, r3
 8006360:	2200      	movs	r2, #0
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	e00d      	b.n	8006382 <UART_SetConfig+0x17a>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a69      	ldr	r2, [pc, #420]	; (8006510 <UART_SetConfig+0x308>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d104      	bne.n	800637a <UART_SetConfig+0x172>
 8006370:	231f      	movs	r3, #31
 8006372:	18fb      	adds	r3, r7, r3
 8006374:	2200      	movs	r2, #0
 8006376:	701a      	strb	r2, [r3, #0]
 8006378:	e003      	b.n	8006382 <UART_SetConfig+0x17a>
 800637a:	231f      	movs	r3, #31
 800637c:	18fb      	adds	r3, r7, r3
 800637e:	2210      	movs	r2, #16
 8006380:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	69da      	ldr	r2, [r3, #28]
 8006386:	2380      	movs	r3, #128	; 0x80
 8006388:	021b      	lsls	r3, r3, #8
 800638a:	429a      	cmp	r2, r3
 800638c:	d15c      	bne.n	8006448 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 800638e:	231f      	movs	r3, #31
 8006390:	18fb      	adds	r3, r7, r3
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	2b08      	cmp	r3, #8
 8006396:	d015      	beq.n	80063c4 <UART_SetConfig+0x1bc>
 8006398:	dc18      	bgt.n	80063cc <UART_SetConfig+0x1c4>
 800639a:	2b04      	cmp	r3, #4
 800639c:	d00d      	beq.n	80063ba <UART_SetConfig+0x1b2>
 800639e:	dc15      	bgt.n	80063cc <UART_SetConfig+0x1c4>
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d002      	beq.n	80063aa <UART_SetConfig+0x1a2>
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d005      	beq.n	80063b4 <UART_SetConfig+0x1ac>
 80063a8:	e010      	b.n	80063cc <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063aa:	f7fe ff0b 	bl	80051c4 <HAL_RCC_GetPCLK1Freq>
 80063ae:	0003      	movs	r3, r0
 80063b0:	61bb      	str	r3, [r7, #24]
        break;
 80063b2:	e012      	b.n	80063da <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063b4:	4b57      	ldr	r3, [pc, #348]	; (8006514 <UART_SetConfig+0x30c>)
 80063b6:	61bb      	str	r3, [r7, #24]
        break;
 80063b8:	e00f      	b.n	80063da <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063ba:	f7fe fe87 	bl	80050cc <HAL_RCC_GetSysClockFreq>
 80063be:	0003      	movs	r3, r0
 80063c0:	61bb      	str	r3, [r7, #24]
        break;
 80063c2:	e00a      	b.n	80063da <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063c4:	2380      	movs	r3, #128	; 0x80
 80063c6:	021b      	lsls	r3, r3, #8
 80063c8:	61bb      	str	r3, [r7, #24]
        break;
 80063ca:	e006      	b.n	80063da <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80063cc:	2300      	movs	r3, #0
 80063ce:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80063d0:	231e      	movs	r3, #30
 80063d2:	18fb      	adds	r3, r7, r3
 80063d4:	2201      	movs	r2, #1
 80063d6:	701a      	strb	r2, [r3, #0]
        break;
 80063d8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d100      	bne.n	80063e2 <UART_SetConfig+0x1da>
 80063e0:	e07a      	b.n	80064d8 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	005a      	lsls	r2, r3, #1
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	085b      	lsrs	r3, r3, #1
 80063ec:	18d2      	adds	r2, r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	0019      	movs	r1, r3
 80063f4:	0010      	movs	r0, r2
 80063f6:	f7f9 fea3 	bl	8000140 <__udivsi3>
 80063fa:	0003      	movs	r3, r0
 80063fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	2b0f      	cmp	r3, #15
 8006402:	d91c      	bls.n	800643e <UART_SetConfig+0x236>
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	2380      	movs	r3, #128	; 0x80
 8006408:	025b      	lsls	r3, r3, #9
 800640a:	429a      	cmp	r2, r3
 800640c:	d217      	bcs.n	800643e <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	b29a      	uxth	r2, r3
 8006412:	200e      	movs	r0, #14
 8006414:	183b      	adds	r3, r7, r0
 8006416:	210f      	movs	r1, #15
 8006418:	438a      	bics	r2, r1
 800641a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	085b      	lsrs	r3, r3, #1
 8006420:	b29b      	uxth	r3, r3
 8006422:	2207      	movs	r2, #7
 8006424:	4013      	ands	r3, r2
 8006426:	b299      	uxth	r1, r3
 8006428:	183b      	adds	r3, r7, r0
 800642a:	183a      	adds	r2, r7, r0
 800642c:	8812      	ldrh	r2, [r2, #0]
 800642e:	430a      	orrs	r2, r1
 8006430:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	183a      	adds	r2, r7, r0
 8006438:	8812      	ldrh	r2, [r2, #0]
 800643a:	60da      	str	r2, [r3, #12]
 800643c:	e04c      	b.n	80064d8 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800643e:	231e      	movs	r3, #30
 8006440:	18fb      	adds	r3, r7, r3
 8006442:	2201      	movs	r2, #1
 8006444:	701a      	strb	r2, [r3, #0]
 8006446:	e047      	b.n	80064d8 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006448:	231f      	movs	r3, #31
 800644a:	18fb      	adds	r3, r7, r3
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	2b08      	cmp	r3, #8
 8006450:	d015      	beq.n	800647e <UART_SetConfig+0x276>
 8006452:	dc18      	bgt.n	8006486 <UART_SetConfig+0x27e>
 8006454:	2b04      	cmp	r3, #4
 8006456:	d00d      	beq.n	8006474 <UART_SetConfig+0x26c>
 8006458:	dc15      	bgt.n	8006486 <UART_SetConfig+0x27e>
 800645a:	2b00      	cmp	r3, #0
 800645c:	d002      	beq.n	8006464 <UART_SetConfig+0x25c>
 800645e:	2b02      	cmp	r3, #2
 8006460:	d005      	beq.n	800646e <UART_SetConfig+0x266>
 8006462:	e010      	b.n	8006486 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006464:	f7fe feae 	bl	80051c4 <HAL_RCC_GetPCLK1Freq>
 8006468:	0003      	movs	r3, r0
 800646a:	61bb      	str	r3, [r7, #24]
        break;
 800646c:	e012      	b.n	8006494 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800646e:	4b29      	ldr	r3, [pc, #164]	; (8006514 <UART_SetConfig+0x30c>)
 8006470:	61bb      	str	r3, [r7, #24]
        break;
 8006472:	e00f      	b.n	8006494 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006474:	f7fe fe2a 	bl	80050cc <HAL_RCC_GetSysClockFreq>
 8006478:	0003      	movs	r3, r0
 800647a:	61bb      	str	r3, [r7, #24]
        break;
 800647c:	e00a      	b.n	8006494 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800647e:	2380      	movs	r3, #128	; 0x80
 8006480:	021b      	lsls	r3, r3, #8
 8006482:	61bb      	str	r3, [r7, #24]
        break;
 8006484:	e006      	b.n	8006494 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8006486:	2300      	movs	r3, #0
 8006488:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800648a:	231e      	movs	r3, #30
 800648c:	18fb      	adds	r3, r7, r3
 800648e:	2201      	movs	r2, #1
 8006490:	701a      	strb	r2, [r3, #0]
        break;
 8006492:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d01e      	beq.n	80064d8 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	085a      	lsrs	r2, r3, #1
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	18d2      	adds	r2, r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	0019      	movs	r1, r3
 80064aa:	0010      	movs	r0, r2
 80064ac:	f7f9 fe48 	bl	8000140 <__udivsi3>
 80064b0:	0003      	movs	r3, r0
 80064b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	2b0f      	cmp	r3, #15
 80064b8:	d90a      	bls.n	80064d0 <UART_SetConfig+0x2c8>
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	2380      	movs	r3, #128	; 0x80
 80064be:	025b      	lsls	r3, r3, #9
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d205      	bcs.n	80064d0 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	60da      	str	r2, [r3, #12]
 80064ce:	e003      	b.n	80064d8 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80064d0:	231e      	movs	r3, #30
 80064d2:	18fb      	adds	r3, r7, r3
 80064d4:	2201      	movs	r2, #1
 80064d6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80064e4:	231e      	movs	r3, #30
 80064e6:	18fb      	adds	r3, r7, r3
 80064e8:	781b      	ldrb	r3, [r3, #0]
}
 80064ea:	0018      	movs	r0, r3
 80064ec:	46bd      	mov	sp, r7
 80064ee:	b008      	add	sp, #32
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	46c0      	nop			; (mov r8, r8)
 80064f4:	efff69f3 	.word	0xefff69f3
 80064f8:	ffffcfff 	.word	0xffffcfff
 80064fc:	fffff4ff 	.word	0xfffff4ff
 8006500:	40013800 	.word	0x40013800
 8006504:	40021000 	.word	0x40021000
 8006508:	40004400 	.word	0x40004400
 800650c:	40004800 	.word	0x40004800
 8006510:	40004c00 	.word	0x40004c00
 8006514:	007a1200 	.word	0x007a1200

08006518 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006524:	2201      	movs	r2, #1
 8006526:	4013      	ands	r3, r2
 8006528:	d00b      	beq.n	8006542 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	4a4a      	ldr	r2, [pc, #296]	; (800665c <UART_AdvFeatureConfig+0x144>)
 8006532:	4013      	ands	r3, r2
 8006534:	0019      	movs	r1, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	430a      	orrs	r2, r1
 8006540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006546:	2202      	movs	r2, #2
 8006548:	4013      	ands	r3, r2
 800654a:	d00b      	beq.n	8006564 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	4a43      	ldr	r2, [pc, #268]	; (8006660 <UART_AdvFeatureConfig+0x148>)
 8006554:	4013      	ands	r3, r2
 8006556:	0019      	movs	r1, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	430a      	orrs	r2, r1
 8006562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006568:	2204      	movs	r2, #4
 800656a:	4013      	ands	r3, r2
 800656c:	d00b      	beq.n	8006586 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	4a3b      	ldr	r2, [pc, #236]	; (8006664 <UART_AdvFeatureConfig+0x14c>)
 8006576:	4013      	ands	r3, r2
 8006578:	0019      	movs	r1, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	430a      	orrs	r2, r1
 8006584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658a:	2208      	movs	r2, #8
 800658c:	4013      	ands	r3, r2
 800658e:	d00b      	beq.n	80065a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	4a34      	ldr	r2, [pc, #208]	; (8006668 <UART_AdvFeatureConfig+0x150>)
 8006598:	4013      	ands	r3, r2
 800659a:	0019      	movs	r1, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	430a      	orrs	r2, r1
 80065a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ac:	2210      	movs	r2, #16
 80065ae:	4013      	ands	r3, r2
 80065b0:	d00b      	beq.n	80065ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	4a2c      	ldr	r2, [pc, #176]	; (800666c <UART_AdvFeatureConfig+0x154>)
 80065ba:	4013      	ands	r3, r2
 80065bc:	0019      	movs	r1, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ce:	2220      	movs	r2, #32
 80065d0:	4013      	ands	r3, r2
 80065d2:	d00b      	beq.n	80065ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	4a25      	ldr	r2, [pc, #148]	; (8006670 <UART_AdvFeatureConfig+0x158>)
 80065dc:	4013      	ands	r3, r2
 80065de:	0019      	movs	r1, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f0:	2240      	movs	r2, #64	; 0x40
 80065f2:	4013      	ands	r3, r2
 80065f4:	d01d      	beq.n	8006632 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	4a1d      	ldr	r2, [pc, #116]	; (8006674 <UART_AdvFeatureConfig+0x15c>)
 80065fe:	4013      	ands	r3, r2
 8006600:	0019      	movs	r1, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	430a      	orrs	r2, r1
 800660c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006612:	2380      	movs	r3, #128	; 0x80
 8006614:	035b      	lsls	r3, r3, #13
 8006616:	429a      	cmp	r2, r3
 8006618:	d10b      	bne.n	8006632 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	4a15      	ldr	r2, [pc, #84]	; (8006678 <UART_AdvFeatureConfig+0x160>)
 8006622:	4013      	ands	r3, r2
 8006624:	0019      	movs	r1, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	430a      	orrs	r2, r1
 8006630:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006636:	2280      	movs	r2, #128	; 0x80
 8006638:	4013      	ands	r3, r2
 800663a:	d00b      	beq.n	8006654 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	4a0e      	ldr	r2, [pc, #56]	; (800667c <UART_AdvFeatureConfig+0x164>)
 8006644:	4013      	ands	r3, r2
 8006646:	0019      	movs	r1, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	430a      	orrs	r2, r1
 8006652:	605a      	str	r2, [r3, #4]
  }
}
 8006654:	46c0      	nop			; (mov r8, r8)
 8006656:	46bd      	mov	sp, r7
 8006658:	b002      	add	sp, #8
 800665a:	bd80      	pop	{r7, pc}
 800665c:	fffdffff 	.word	0xfffdffff
 8006660:	fffeffff 	.word	0xfffeffff
 8006664:	fffbffff 	.word	0xfffbffff
 8006668:	ffff7fff 	.word	0xffff7fff
 800666c:	ffffefff 	.word	0xffffefff
 8006670:	ffffdfff 	.word	0xffffdfff
 8006674:	ffefffff 	.word	0xffefffff
 8006678:	ff9fffff 	.word	0xff9fffff
 800667c:	fff7ffff 	.word	0xfff7ffff

08006680 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b092      	sub	sp, #72	; 0x48
 8006684:	af02      	add	r7, sp, #8
 8006686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2284      	movs	r2, #132	; 0x84
 800668c:	2100      	movs	r1, #0
 800668e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006690:	f7fc ff70 	bl	8003574 <HAL_GetTick>
 8006694:	0003      	movs	r3, r0
 8006696:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2208      	movs	r2, #8
 80066a0:	4013      	ands	r3, r2
 80066a2:	2b08      	cmp	r3, #8
 80066a4:	d12c      	bne.n	8006700 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a8:	2280      	movs	r2, #128	; 0x80
 80066aa:	0391      	lsls	r1, r2, #14
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	4a46      	ldr	r2, [pc, #280]	; (80067c8 <UART_CheckIdleState+0x148>)
 80066b0:	9200      	str	r2, [sp, #0]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f000 f88c 	bl	80067d0 <UART_WaitOnFlagUntilTimeout>
 80066b8:	1e03      	subs	r3, r0, #0
 80066ba:	d021      	beq.n	8006700 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066bc:	f3ef 8310 	mrs	r3, PRIMASK
 80066c0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80066c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80066c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80066c6:	2301      	movs	r3, #1
 80066c8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066cc:	f383 8810 	msr	PRIMASK, r3
}
 80066d0:	46c0      	nop			; (mov r8, r8)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2180      	movs	r1, #128	; 0x80
 80066de:	438a      	bics	r2, r1
 80066e0:	601a      	str	r2, [r3, #0]
 80066e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e8:	f383 8810 	msr	PRIMASK, r3
}
 80066ec:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2220      	movs	r2, #32
 80066f2:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2278      	movs	r2, #120	; 0x78
 80066f8:	2100      	movs	r1, #0
 80066fa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e05f      	b.n	80067c0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2204      	movs	r2, #4
 8006708:	4013      	ands	r3, r2
 800670a:	2b04      	cmp	r3, #4
 800670c:	d146      	bne.n	800679c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800670e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006710:	2280      	movs	r2, #128	; 0x80
 8006712:	03d1      	lsls	r1, r2, #15
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	4a2c      	ldr	r2, [pc, #176]	; (80067c8 <UART_CheckIdleState+0x148>)
 8006718:	9200      	str	r2, [sp, #0]
 800671a:	2200      	movs	r2, #0
 800671c:	f000 f858 	bl	80067d0 <UART_WaitOnFlagUntilTimeout>
 8006720:	1e03      	subs	r3, r0, #0
 8006722:	d03b      	beq.n	800679c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006724:	f3ef 8310 	mrs	r3, PRIMASK
 8006728:	60fb      	str	r3, [r7, #12]
  return(result);
 800672a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800672c:	637b      	str	r3, [r7, #52]	; 0x34
 800672e:	2301      	movs	r3, #1
 8006730:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	f383 8810 	msr	PRIMASK, r3
}
 8006738:	46c0      	nop			; (mov r8, r8)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4921      	ldr	r1, [pc, #132]	; (80067cc <UART_CheckIdleState+0x14c>)
 8006746:	400a      	ands	r2, r1
 8006748:	601a      	str	r2, [r3, #0]
 800674a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800674c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f383 8810 	msr	PRIMASK, r3
}
 8006754:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006756:	f3ef 8310 	mrs	r3, PRIMASK
 800675a:	61bb      	str	r3, [r7, #24]
  return(result);
 800675c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800675e:	633b      	str	r3, [r7, #48]	; 0x30
 8006760:	2301      	movs	r3, #1
 8006762:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	f383 8810 	msr	PRIMASK, r3
}
 800676a:	46c0      	nop			; (mov r8, r8)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689a      	ldr	r2, [r3, #8]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2101      	movs	r1, #1
 8006778:	438a      	bics	r2, r1
 800677a:	609a      	str	r2, [r3, #8]
 800677c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006780:	6a3b      	ldr	r3, [r7, #32]
 8006782:	f383 8810 	msr	PRIMASK, r3
}
 8006786:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2280      	movs	r2, #128	; 0x80
 800678c:	2120      	movs	r1, #32
 800678e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2278      	movs	r2, #120	; 0x78
 8006794:	2100      	movs	r1, #0
 8006796:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e011      	b.n	80067c0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2220      	movs	r2, #32
 80067a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2280      	movs	r2, #128	; 0x80
 80067a6:	2120      	movs	r1, #32
 80067a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2278      	movs	r2, #120	; 0x78
 80067ba:	2100      	movs	r1, #0
 80067bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	0018      	movs	r0, r3
 80067c2:	46bd      	mov	sp, r7
 80067c4:	b010      	add	sp, #64	; 0x40
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	01ffffff 	.word	0x01ffffff
 80067cc:	fffffedf 	.word	0xfffffedf

080067d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	603b      	str	r3, [r7, #0]
 80067dc:	1dfb      	adds	r3, r7, #7
 80067de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067e0:	e04b      	b.n	800687a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	3301      	adds	r3, #1
 80067e6:	d048      	beq.n	800687a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067e8:	f7fc fec4 	bl	8003574 <HAL_GetTick>
 80067ec:	0002      	movs	r2, r0
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	69ba      	ldr	r2, [r7, #24]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d302      	bcc.n	80067fe <UART_WaitOnFlagUntilTimeout+0x2e>
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d101      	bne.n	8006802 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e04b      	b.n	800689a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2204      	movs	r2, #4
 800680a:	4013      	ands	r3, r2
 800680c:	d035      	beq.n	800687a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	69db      	ldr	r3, [r3, #28]
 8006814:	2208      	movs	r2, #8
 8006816:	4013      	ands	r3, r2
 8006818:	2b08      	cmp	r3, #8
 800681a:	d111      	bne.n	8006840 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2208      	movs	r2, #8
 8006822:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	0018      	movs	r0, r3
 8006828:	f000 f906 	bl	8006a38 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2284      	movs	r2, #132	; 0x84
 8006830:	2108      	movs	r1, #8
 8006832:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2278      	movs	r2, #120	; 0x78
 8006838:	2100      	movs	r1, #0
 800683a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e02c      	b.n	800689a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	69da      	ldr	r2, [r3, #28]
 8006846:	2380      	movs	r3, #128	; 0x80
 8006848:	011b      	lsls	r3, r3, #4
 800684a:	401a      	ands	r2, r3
 800684c:	2380      	movs	r3, #128	; 0x80
 800684e:	011b      	lsls	r3, r3, #4
 8006850:	429a      	cmp	r2, r3
 8006852:	d112      	bne.n	800687a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2280      	movs	r2, #128	; 0x80
 800685a:	0112      	lsls	r2, r2, #4
 800685c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	0018      	movs	r0, r3
 8006862:	f000 f8e9 	bl	8006a38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2284      	movs	r2, #132	; 0x84
 800686a:	2120      	movs	r1, #32
 800686c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2278      	movs	r2, #120	; 0x78
 8006872:	2100      	movs	r1, #0
 8006874:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e00f      	b.n	800689a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	69db      	ldr	r3, [r3, #28]
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	4013      	ands	r3, r2
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	425a      	negs	r2, r3
 800688a:	4153      	adcs	r3, r2
 800688c:	b2db      	uxtb	r3, r3
 800688e:	001a      	movs	r2, r3
 8006890:	1dfb      	adds	r3, r7, #7
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	429a      	cmp	r2, r3
 8006896:	d0a4      	beq.n	80067e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	0018      	movs	r0, r3
 800689c:	46bd      	mov	sp, r7
 800689e:	b004      	add	sp, #16
 80068a0:	bd80      	pop	{r7, pc}
	...

080068a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b090      	sub	sp, #64	; 0x40
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	1dbb      	adds	r3, r7, #6
 80068b0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	1dba      	adds	r2, r7, #6
 80068bc:	2158      	movs	r1, #88	; 0x58
 80068be:	8812      	ldrh	r2, [r2, #0]
 80068c0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	1dba      	adds	r2, r7, #6
 80068c6:	215a      	movs	r1, #90	; 0x5a
 80068c8:	8812      	ldrh	r2, [r2, #0]
 80068ca:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	689a      	ldr	r2, [r3, #8]
 80068d6:	2380      	movs	r3, #128	; 0x80
 80068d8:	015b      	lsls	r3, r3, #5
 80068da:	429a      	cmp	r2, r3
 80068dc:	d10d      	bne.n	80068fa <UART_Start_Receive_IT+0x56>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d104      	bne.n	80068f0 <UART_Start_Receive_IT+0x4c>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	225c      	movs	r2, #92	; 0x5c
 80068ea:	4950      	ldr	r1, [pc, #320]	; (8006a2c <UART_Start_Receive_IT+0x188>)
 80068ec:	5299      	strh	r1, [r3, r2]
 80068ee:	e02e      	b.n	800694e <UART_Start_Receive_IT+0xaa>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	225c      	movs	r2, #92	; 0x5c
 80068f4:	21ff      	movs	r1, #255	; 0xff
 80068f6:	5299      	strh	r1, [r3, r2]
 80068f8:	e029      	b.n	800694e <UART_Start_Receive_IT+0xaa>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d10d      	bne.n	800691e <UART_Start_Receive_IT+0x7a>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d104      	bne.n	8006914 <UART_Start_Receive_IT+0x70>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	225c      	movs	r2, #92	; 0x5c
 800690e:	21ff      	movs	r1, #255	; 0xff
 8006910:	5299      	strh	r1, [r3, r2]
 8006912:	e01c      	b.n	800694e <UART_Start_Receive_IT+0xaa>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	225c      	movs	r2, #92	; 0x5c
 8006918:	217f      	movs	r1, #127	; 0x7f
 800691a:	5299      	strh	r1, [r3, r2]
 800691c:	e017      	b.n	800694e <UART_Start_Receive_IT+0xaa>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	689a      	ldr	r2, [r3, #8]
 8006922:	2380      	movs	r3, #128	; 0x80
 8006924:	055b      	lsls	r3, r3, #21
 8006926:	429a      	cmp	r2, r3
 8006928:	d10d      	bne.n	8006946 <UART_Start_Receive_IT+0xa2>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d104      	bne.n	800693c <UART_Start_Receive_IT+0x98>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	225c      	movs	r2, #92	; 0x5c
 8006936:	217f      	movs	r1, #127	; 0x7f
 8006938:	5299      	strh	r1, [r3, r2]
 800693a:	e008      	b.n	800694e <UART_Start_Receive_IT+0xaa>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	225c      	movs	r2, #92	; 0x5c
 8006940:	213f      	movs	r1, #63	; 0x3f
 8006942:	5299      	strh	r1, [r3, r2]
 8006944:	e003      	b.n	800694e <UART_Start_Receive_IT+0xaa>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	225c      	movs	r2, #92	; 0x5c
 800694a:	2100      	movs	r1, #0
 800694c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2284      	movs	r2, #132	; 0x84
 8006952:	2100      	movs	r1, #0
 8006954:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2280      	movs	r2, #128	; 0x80
 800695a:	2122      	movs	r1, #34	; 0x22
 800695c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800695e:	f3ef 8310 	mrs	r3, PRIMASK
 8006962:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006964:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006966:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006968:	2301      	movs	r3, #1
 800696a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800696c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696e:	f383 8810 	msr	PRIMASK, r3
}
 8006972:	46c0      	nop			; (mov r8, r8)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	689a      	ldr	r2, [r3, #8]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2101      	movs	r1, #1
 8006980:	430a      	orrs	r2, r1
 8006982:	609a      	str	r2, [r3, #8]
 8006984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006986:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698a:	f383 8810 	msr	PRIMASK, r3
}
 800698e:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	689a      	ldr	r2, [r3, #8]
 8006994:	2380      	movs	r3, #128	; 0x80
 8006996:	015b      	lsls	r3, r3, #5
 8006998:	429a      	cmp	r2, r3
 800699a:	d107      	bne.n	80069ac <UART_Start_Receive_IT+0x108>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d103      	bne.n	80069ac <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	4a22      	ldr	r2, [pc, #136]	; (8006a30 <UART_Start_Receive_IT+0x18c>)
 80069a8:	669a      	str	r2, [r3, #104]	; 0x68
 80069aa:	e002      	b.n	80069b2 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	4a21      	ldr	r2, [pc, #132]	; (8006a34 <UART_Start_Receive_IT+0x190>)
 80069b0:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d019      	beq.n	80069ee <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069ba:	f3ef 8310 	mrs	r3, PRIMASK
 80069be:	61fb      	str	r3, [r7, #28]
  return(result);
 80069c0:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80069c2:	637b      	str	r3, [r7, #52]	; 0x34
 80069c4:	2301      	movs	r3, #1
 80069c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069c8:	6a3b      	ldr	r3, [r7, #32]
 80069ca:	f383 8810 	msr	PRIMASK, r3
}
 80069ce:	46c0      	nop			; (mov r8, r8)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2190      	movs	r1, #144	; 0x90
 80069dc:	0049      	lsls	r1, r1, #1
 80069de:	430a      	orrs	r2, r1
 80069e0:	601a      	str	r2, [r3, #0]
 80069e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e8:	f383 8810 	msr	PRIMASK, r3
}
 80069ec:	e018      	b.n	8006a20 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069ee:	f3ef 8310 	mrs	r3, PRIMASK
 80069f2:	613b      	str	r3, [r7, #16]
  return(result);
 80069f4:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80069f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80069f8:	2301      	movs	r3, #1
 80069fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	f383 8810 	msr	PRIMASK, r3
}
 8006a02:	46c0      	nop			; (mov r8, r8)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2120      	movs	r1, #32
 8006a10:	430a      	orrs	r2, r1
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a16:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	f383 8810 	msr	PRIMASK, r3
}
 8006a1e:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	0018      	movs	r0, r3
 8006a24:	46bd      	mov	sp, r7
 8006a26:	b010      	add	sp, #64	; 0x40
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	46c0      	nop			; (mov r8, r8)
 8006a2c:	000001ff 	.word	0x000001ff
 8006a30:	08006d3d 	.word	0x08006d3d
 8006a34:	08006b85 	.word	0x08006b85

08006a38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b08e      	sub	sp, #56	; 0x38
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a40:	f3ef 8310 	mrs	r3, PRIMASK
 8006a44:	617b      	str	r3, [r7, #20]
  return(result);
 8006a46:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a48:	637b      	str	r3, [r7, #52]	; 0x34
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	f383 8810 	msr	PRIMASK, r3
}
 8006a54:	46c0      	nop			; (mov r8, r8)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4926      	ldr	r1, [pc, #152]	; (8006afc <UART_EndRxTransfer+0xc4>)
 8006a62:	400a      	ands	r2, r1
 8006a64:	601a      	str	r2, [r3, #0]
 8006a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	f383 8810 	msr	PRIMASK, r3
}
 8006a70:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a72:	f3ef 8310 	mrs	r3, PRIMASK
 8006a76:	623b      	str	r3, [r7, #32]
  return(result);
 8006a78:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a7a:	633b      	str	r3, [r7, #48]	; 0x30
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a82:	f383 8810 	msr	PRIMASK, r3
}
 8006a86:	46c0      	nop			; (mov r8, r8)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	689a      	ldr	r2, [r3, #8]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2101      	movs	r1, #1
 8006a94:	438a      	bics	r2, r1
 8006a96:	609a      	str	r2, [r3, #8]
 8006a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9e:	f383 8810 	msr	PRIMASK, r3
}
 8006aa2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d118      	bne.n	8006ade <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aac:	f3ef 8310 	mrs	r3, PRIMASK
 8006ab0:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ab2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f383 8810 	msr	PRIMASK, r3
}
 8006ac0:	46c0      	nop			; (mov r8, r8)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2110      	movs	r1, #16
 8006ace:	438a      	bics	r2, r1
 8006ad0:	601a      	str	r2, [r3, #0]
 8006ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	f383 8810 	msr	PRIMASK, r3
}
 8006adc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2280      	movs	r2, #128	; 0x80
 8006ae2:	2120      	movs	r1, #32
 8006ae4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006af2:	46c0      	nop			; (mov r8, r8)
 8006af4:	46bd      	mov	sp, r7
 8006af6:	b00e      	add	sp, #56	; 0x38
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	46c0      	nop			; (mov r8, r8)
 8006afc:	fffffedf 	.word	0xfffffedf

08006b00 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	225a      	movs	r2, #90	; 0x5a
 8006b12:	2100      	movs	r1, #0
 8006b14:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2252      	movs	r2, #82	; 0x52
 8006b1a:	2100      	movs	r1, #0
 8006b1c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	0018      	movs	r0, r3
 8006b22:	f7ff fb5d 	bl	80061e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b26:	46c0      	nop			; (mov r8, r8)
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	b004      	add	sp, #16
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b086      	sub	sp, #24
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b36:	f3ef 8310 	mrs	r3, PRIMASK
 8006b3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b3c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b3e:	617b      	str	r3, [r7, #20]
 8006b40:	2301      	movs	r3, #1
 8006b42:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f383 8810 	msr	PRIMASK, r3
}
 8006b4a:	46c0      	nop			; (mov r8, r8)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2140      	movs	r1, #64	; 0x40
 8006b58:	438a      	bics	r2, r1
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	f383 8810 	msr	PRIMASK, r3
}
 8006b66:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	0018      	movs	r0, r3
 8006b78:	f7ff fb2a 	bl	80061d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b7c:	46c0      	nop			; (mov r8, r8)
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	b006      	add	sp, #24
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b094      	sub	sp, #80	; 0x50
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006b8c:	204e      	movs	r0, #78	; 0x4e
 8006b8e:	183b      	adds	r3, r7, r0
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	215c      	movs	r1, #92	; 0x5c
 8006b94:	5a52      	ldrh	r2, [r2, r1]
 8006b96:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2280      	movs	r2, #128	; 0x80
 8006b9c:	589b      	ldr	r3, [r3, r2]
 8006b9e:	2b22      	cmp	r3, #34	; 0x22
 8006ba0:	d000      	beq.n	8006ba4 <UART_RxISR_8BIT+0x20>
 8006ba2:	e0ba      	b.n	8006d1a <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	214c      	movs	r1, #76	; 0x4c
 8006baa:	187b      	adds	r3, r7, r1
 8006bac:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006bae:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006bb0:	187b      	adds	r3, r7, r1
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	183b      	adds	r3, r7, r0
 8006bb8:	881b      	ldrh	r3, [r3, #0]
 8006bba:	b2d9      	uxtb	r1, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc0:	400a      	ands	r2, r1
 8006bc2:	b2d2      	uxtb	r2, r2
 8006bc4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bca:	1c5a      	adds	r2, r3, #1
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	225a      	movs	r2, #90	; 0x5a
 8006bd4:	5a9b      	ldrh	r3, [r3, r2]
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	b299      	uxth	r1, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	225a      	movs	r2, #90	; 0x5a
 8006be0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	225a      	movs	r2, #90	; 0x5a
 8006be6:	5a9b      	ldrh	r3, [r3, r2]
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d000      	beq.n	8006bf0 <UART_RxISR_8BIT+0x6c>
 8006bee:	e09c      	b.n	8006d2a <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bf0:	f3ef 8310 	mrs	r3, PRIMASK
 8006bf4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bf8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c00:	f383 8810 	msr	PRIMASK, r3
}
 8006c04:	46c0      	nop			; (mov r8, r8)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4948      	ldr	r1, [pc, #288]	; (8006d34 <UART_RxISR_8BIT+0x1b0>)
 8006c12:	400a      	ands	r2, r1
 8006c14:	601a      	str	r2, [r3, #0]
 8006c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1c:	f383 8810 	msr	PRIMASK, r3
}
 8006c20:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c22:	f3ef 8310 	mrs	r3, PRIMASK
 8006c26:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c2a:	647b      	str	r3, [r7, #68]	; 0x44
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c32:	f383 8810 	msr	PRIMASK, r3
}
 8006c36:	46c0      	nop			; (mov r8, r8)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	689a      	ldr	r2, [r3, #8]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2101      	movs	r1, #1
 8006c44:	438a      	bics	r2, r1
 8006c46:	609a      	str	r2, [r3, #8]
 8006c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c4a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4e:	f383 8810 	msr	PRIMASK, r3
}
 8006c52:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2280      	movs	r2, #128	; 0x80
 8006c58:	2120      	movs	r1, #32
 8006c5a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	685a      	ldr	r2, [r3, #4]
 8006c6e:	2380      	movs	r3, #128	; 0x80
 8006c70:	041b      	lsls	r3, r3, #16
 8006c72:	4013      	ands	r3, r2
 8006c74:	d018      	beq.n	8006ca8 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c76:	f3ef 8310 	mrs	r3, PRIMASK
 8006c7a:	61bb      	str	r3, [r7, #24]
  return(result);
 8006c7c:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c7e:	643b      	str	r3, [r7, #64]	; 0x40
 8006c80:	2301      	movs	r3, #1
 8006c82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	f383 8810 	msr	PRIMASK, r3
}
 8006c8a:	46c0      	nop			; (mov r8, r8)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4928      	ldr	r1, [pc, #160]	; (8006d38 <UART_RxISR_8BIT+0x1b4>)
 8006c98:	400a      	ands	r2, r1
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c9e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ca0:	6a3b      	ldr	r3, [r7, #32]
 8006ca2:	f383 8810 	msr	PRIMASK, r3
}
 8006ca6:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d12f      	bne.n	8006d10 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cb6:	f3ef 8310 	mrs	r3, PRIMASK
 8006cba:	60fb      	str	r3, [r7, #12]
  return(result);
 8006cbc:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	f383 8810 	msr	PRIMASK, r3
}
 8006cca:	46c0      	nop			; (mov r8, r8)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2110      	movs	r1, #16
 8006cd8:	438a      	bics	r2, r1
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cde:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	f383 8810 	msr	PRIMASK, r3
}
 8006ce6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	69db      	ldr	r3, [r3, #28]
 8006cee:	2210      	movs	r2, #16
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	2b10      	cmp	r3, #16
 8006cf4:	d103      	bne.n	8006cfe <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2210      	movs	r2, #16
 8006cfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2258      	movs	r2, #88	; 0x58
 8006d02:	5a9a      	ldrh	r2, [r3, r2]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	0011      	movs	r1, r2
 8006d08:	0018      	movs	r0, r3
 8006d0a:	f7ff fa71 	bl	80061f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d0e:	e00c      	b.n	8006d2a <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	0018      	movs	r0, r3
 8006d14:	f7fb fe74 	bl	8002a00 <HAL_UART_RxCpltCallback>
}
 8006d18:	e007      	b.n	8006d2a <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	699a      	ldr	r2, [r3, #24]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2108      	movs	r1, #8
 8006d26:	430a      	orrs	r2, r1
 8006d28:	619a      	str	r2, [r3, #24]
}
 8006d2a:	46c0      	nop			; (mov r8, r8)
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	b014      	add	sp, #80	; 0x50
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	46c0      	nop			; (mov r8, r8)
 8006d34:	fffffedf 	.word	0xfffffedf
 8006d38:	fbffffff 	.word	0xfbffffff

08006d3c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b094      	sub	sp, #80	; 0x50
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006d44:	204e      	movs	r0, #78	; 0x4e
 8006d46:	183b      	adds	r3, r7, r0
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	215c      	movs	r1, #92	; 0x5c
 8006d4c:	5a52      	ldrh	r2, [r2, r1]
 8006d4e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2280      	movs	r2, #128	; 0x80
 8006d54:	589b      	ldr	r3, [r3, r2]
 8006d56:	2b22      	cmp	r3, #34	; 0x22
 8006d58:	d000      	beq.n	8006d5c <UART_RxISR_16BIT+0x20>
 8006d5a:	e0ba      	b.n	8006ed2 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	214c      	movs	r1, #76	; 0x4c
 8006d62:	187b      	adds	r3, r7, r1
 8006d64:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006d66:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d6c:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8006d6e:	187b      	adds	r3, r7, r1
 8006d70:	183a      	adds	r2, r7, r0
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	8812      	ldrh	r2, [r2, #0]
 8006d76:	4013      	ands	r3, r2
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d7c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d82:	1c9a      	adds	r2, r3, #2
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	225a      	movs	r2, #90	; 0x5a
 8006d8c:	5a9b      	ldrh	r3, [r3, r2]
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	3b01      	subs	r3, #1
 8006d92:	b299      	uxth	r1, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	225a      	movs	r2, #90	; 0x5a
 8006d98:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	225a      	movs	r2, #90	; 0x5a
 8006d9e:	5a9b      	ldrh	r3, [r3, r2]
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d000      	beq.n	8006da8 <UART_RxISR_16BIT+0x6c>
 8006da6:	e09c      	b.n	8006ee2 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006da8:	f3ef 8310 	mrs	r3, PRIMASK
 8006dac:	623b      	str	r3, [r7, #32]
  return(result);
 8006dae:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006db0:	647b      	str	r3, [r7, #68]	; 0x44
 8006db2:	2301      	movs	r3, #1
 8006db4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db8:	f383 8810 	msr	PRIMASK, r3
}
 8006dbc:	46c0      	nop			; (mov r8, r8)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4948      	ldr	r1, [pc, #288]	; (8006eec <UART_RxISR_16BIT+0x1b0>)
 8006dca:	400a      	ands	r2, r1
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd4:	f383 8810 	msr	PRIMASK, r3
}
 8006dd8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dda:	f3ef 8310 	mrs	r3, PRIMASK
 8006dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8006de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de2:	643b      	str	r3, [r7, #64]	; 0x40
 8006de4:	2301      	movs	r3, #1
 8006de6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dea:	f383 8810 	msr	PRIMASK, r3
}
 8006dee:	46c0      	nop			; (mov r8, r8)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	689a      	ldr	r2, [r3, #8]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2101      	movs	r1, #1
 8006dfc:	438a      	bics	r2, r1
 8006dfe:	609a      	str	r2, [r3, #8]
 8006e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e02:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e06:	f383 8810 	msr	PRIMASK, r3
}
 8006e0a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2280      	movs	r2, #128	; 0x80
 8006e10:	2120      	movs	r1, #32
 8006e12:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	2380      	movs	r3, #128	; 0x80
 8006e28:	041b      	lsls	r3, r3, #16
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	d018      	beq.n	8006e60 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8006e32:	617b      	str	r3, [r7, #20]
  return(result);
 8006e34:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e38:	2301      	movs	r3, #1
 8006e3a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	f383 8810 	msr	PRIMASK, r3
}
 8006e42:	46c0      	nop			; (mov r8, r8)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4928      	ldr	r1, [pc, #160]	; (8006ef0 <UART_RxISR_16BIT+0x1b4>)
 8006e50:	400a      	ands	r2, r1
 8006e52:	601a      	str	r2, [r3, #0]
 8006e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e56:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	f383 8810 	msr	PRIMASK, r3
}
 8006e5e:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d12f      	bne.n	8006ec8 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e6e:	f3ef 8310 	mrs	r3, PRIMASK
 8006e72:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e74:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e76:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e78:	2301      	movs	r3, #1
 8006e7a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f383 8810 	msr	PRIMASK, r3
}
 8006e82:	46c0      	nop			; (mov r8, r8)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2110      	movs	r1, #16
 8006e90:	438a      	bics	r2, r1
 8006e92:	601a      	str	r2, [r3, #0]
 8006e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	f383 8810 	msr	PRIMASK, r3
}
 8006e9e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	2210      	movs	r2, #16
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	2b10      	cmp	r3, #16
 8006eac:	d103      	bne.n	8006eb6 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2210      	movs	r2, #16
 8006eb4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2258      	movs	r2, #88	; 0x58
 8006eba:	5a9a      	ldrh	r2, [r3, r2]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	0011      	movs	r1, r2
 8006ec0:	0018      	movs	r0, r3
 8006ec2:	f7ff f995 	bl	80061f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ec6:	e00c      	b.n	8006ee2 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	0018      	movs	r0, r3
 8006ecc:	f7fb fd98 	bl	8002a00 <HAL_UART_RxCpltCallback>
}
 8006ed0:	e007      	b.n	8006ee2 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	699a      	ldr	r2, [r3, #24]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2108      	movs	r1, #8
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	619a      	str	r2, [r3, #24]
}
 8006ee2:	46c0      	nop			; (mov r8, r8)
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	b014      	add	sp, #80	; 0x50
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	46c0      	nop			; (mov r8, r8)
 8006eec:	fffffedf 	.word	0xfffffedf
 8006ef0:	fbffffff 	.word	0xfbffffff

08006ef4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006efc:	46c0      	nop			; (mov r8, r8)
 8006efe:	46bd      	mov	sp, r7
 8006f00:	b002      	add	sp, #8
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <__errno>:
 8006f04:	4b01      	ldr	r3, [pc, #4]	; (8006f0c <__errno+0x8>)
 8006f06:	6818      	ldr	r0, [r3, #0]
 8006f08:	4770      	bx	lr
 8006f0a:	46c0      	nop			; (mov r8, r8)
 8006f0c:	20000014 	.word	0x20000014

08006f10 <__libc_init_array>:
 8006f10:	b570      	push	{r4, r5, r6, lr}
 8006f12:	2600      	movs	r6, #0
 8006f14:	4d0c      	ldr	r5, [pc, #48]	; (8006f48 <__libc_init_array+0x38>)
 8006f16:	4c0d      	ldr	r4, [pc, #52]	; (8006f4c <__libc_init_array+0x3c>)
 8006f18:	1b64      	subs	r4, r4, r5
 8006f1a:	10a4      	asrs	r4, r4, #2
 8006f1c:	42a6      	cmp	r6, r4
 8006f1e:	d109      	bne.n	8006f34 <__libc_init_array+0x24>
 8006f20:	2600      	movs	r6, #0
 8006f22:	f005 f9b3 	bl	800c28c <_init>
 8006f26:	4d0a      	ldr	r5, [pc, #40]	; (8006f50 <__libc_init_array+0x40>)
 8006f28:	4c0a      	ldr	r4, [pc, #40]	; (8006f54 <__libc_init_array+0x44>)
 8006f2a:	1b64      	subs	r4, r4, r5
 8006f2c:	10a4      	asrs	r4, r4, #2
 8006f2e:	42a6      	cmp	r6, r4
 8006f30:	d105      	bne.n	8006f3e <__libc_init_array+0x2e>
 8006f32:	bd70      	pop	{r4, r5, r6, pc}
 8006f34:	00b3      	lsls	r3, r6, #2
 8006f36:	58eb      	ldr	r3, [r5, r3]
 8006f38:	4798      	blx	r3
 8006f3a:	3601      	adds	r6, #1
 8006f3c:	e7ee      	b.n	8006f1c <__libc_init_array+0xc>
 8006f3e:	00b3      	lsls	r3, r6, #2
 8006f40:	58eb      	ldr	r3, [r5, r3]
 8006f42:	4798      	blx	r3
 8006f44:	3601      	adds	r6, #1
 8006f46:	e7f2      	b.n	8006f2e <__libc_init_array+0x1e>
 8006f48:	0800c8bc 	.word	0x0800c8bc
 8006f4c:	0800c8bc 	.word	0x0800c8bc
 8006f50:	0800c8bc 	.word	0x0800c8bc
 8006f54:	0800c8c0 	.word	0x0800c8c0

08006f58 <memset>:
 8006f58:	0003      	movs	r3, r0
 8006f5a:	1882      	adds	r2, r0, r2
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d100      	bne.n	8006f62 <memset+0xa>
 8006f60:	4770      	bx	lr
 8006f62:	7019      	strb	r1, [r3, #0]
 8006f64:	3301      	adds	r3, #1
 8006f66:	e7f9      	b.n	8006f5c <memset+0x4>

08006f68 <__cvt>:
 8006f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f6a:	001e      	movs	r6, r3
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	0014      	movs	r4, r2
 8006f70:	b08b      	sub	sp, #44	; 0x2c
 8006f72:	429e      	cmp	r6, r3
 8006f74:	da04      	bge.n	8006f80 <__cvt+0x18>
 8006f76:	2180      	movs	r1, #128	; 0x80
 8006f78:	0609      	lsls	r1, r1, #24
 8006f7a:	1873      	adds	r3, r6, r1
 8006f7c:	001e      	movs	r6, r3
 8006f7e:	232d      	movs	r3, #45	; 0x2d
 8006f80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006f82:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006f84:	7013      	strb	r3, [r2, #0]
 8006f86:	2320      	movs	r3, #32
 8006f88:	2203      	movs	r2, #3
 8006f8a:	439f      	bics	r7, r3
 8006f8c:	2f46      	cmp	r7, #70	; 0x46
 8006f8e:	d007      	beq.n	8006fa0 <__cvt+0x38>
 8006f90:	003b      	movs	r3, r7
 8006f92:	3b45      	subs	r3, #69	; 0x45
 8006f94:	4259      	negs	r1, r3
 8006f96:	414b      	adcs	r3, r1
 8006f98:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006f9a:	3a01      	subs	r2, #1
 8006f9c:	18cb      	adds	r3, r1, r3
 8006f9e:	9310      	str	r3, [sp, #64]	; 0x40
 8006fa0:	ab09      	add	r3, sp, #36	; 0x24
 8006fa2:	9304      	str	r3, [sp, #16]
 8006fa4:	ab08      	add	r3, sp, #32
 8006fa6:	9303      	str	r3, [sp, #12]
 8006fa8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006faa:	9200      	str	r2, [sp, #0]
 8006fac:	9302      	str	r3, [sp, #8]
 8006fae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006fb0:	0022      	movs	r2, r4
 8006fb2:	9301      	str	r3, [sp, #4]
 8006fb4:	0033      	movs	r3, r6
 8006fb6:	f001 fe5f 	bl	8008c78 <_dtoa_r>
 8006fba:	0005      	movs	r5, r0
 8006fbc:	2f47      	cmp	r7, #71	; 0x47
 8006fbe:	d102      	bne.n	8006fc6 <__cvt+0x5e>
 8006fc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006fc2:	07db      	lsls	r3, r3, #31
 8006fc4:	d528      	bpl.n	8007018 <__cvt+0xb0>
 8006fc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006fc8:	18eb      	adds	r3, r5, r3
 8006fca:	9307      	str	r3, [sp, #28]
 8006fcc:	2f46      	cmp	r7, #70	; 0x46
 8006fce:	d114      	bne.n	8006ffa <__cvt+0x92>
 8006fd0:	782b      	ldrb	r3, [r5, #0]
 8006fd2:	2b30      	cmp	r3, #48	; 0x30
 8006fd4:	d10c      	bne.n	8006ff0 <__cvt+0x88>
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	2300      	movs	r3, #0
 8006fda:	0020      	movs	r0, r4
 8006fdc:	0031      	movs	r1, r6
 8006fde:	f7f9 fa35 	bl	800044c <__aeabi_dcmpeq>
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	d104      	bne.n	8006ff0 <__cvt+0x88>
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006fea:	1a9b      	subs	r3, r3, r2
 8006fec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006fee:	6013      	str	r3, [r2, #0]
 8006ff0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ff2:	9a07      	ldr	r2, [sp, #28]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	18d3      	adds	r3, r2, r3
 8006ff8:	9307      	str	r3, [sp, #28]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	0020      	movs	r0, r4
 8007000:	0031      	movs	r1, r6
 8007002:	f7f9 fa23 	bl	800044c <__aeabi_dcmpeq>
 8007006:	2800      	cmp	r0, #0
 8007008:	d001      	beq.n	800700e <__cvt+0xa6>
 800700a:	9b07      	ldr	r3, [sp, #28]
 800700c:	9309      	str	r3, [sp, #36]	; 0x24
 800700e:	2230      	movs	r2, #48	; 0x30
 8007010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007012:	9907      	ldr	r1, [sp, #28]
 8007014:	428b      	cmp	r3, r1
 8007016:	d306      	bcc.n	8007026 <__cvt+0xbe>
 8007018:	0028      	movs	r0, r5
 800701a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800701c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800701e:	1b5b      	subs	r3, r3, r5
 8007020:	6013      	str	r3, [r2, #0]
 8007022:	b00b      	add	sp, #44	; 0x2c
 8007024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007026:	1c59      	adds	r1, r3, #1
 8007028:	9109      	str	r1, [sp, #36]	; 0x24
 800702a:	701a      	strb	r2, [r3, #0]
 800702c:	e7f0      	b.n	8007010 <__cvt+0xa8>

0800702e <__exponent>:
 800702e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007030:	1c83      	adds	r3, r0, #2
 8007032:	b087      	sub	sp, #28
 8007034:	9303      	str	r3, [sp, #12]
 8007036:	0005      	movs	r5, r0
 8007038:	000c      	movs	r4, r1
 800703a:	232b      	movs	r3, #43	; 0x2b
 800703c:	7002      	strb	r2, [r0, #0]
 800703e:	2900      	cmp	r1, #0
 8007040:	da01      	bge.n	8007046 <__exponent+0x18>
 8007042:	424c      	negs	r4, r1
 8007044:	3302      	adds	r3, #2
 8007046:	706b      	strb	r3, [r5, #1]
 8007048:	2c09      	cmp	r4, #9
 800704a:	dd31      	ble.n	80070b0 <__exponent+0x82>
 800704c:	270a      	movs	r7, #10
 800704e:	ab04      	add	r3, sp, #16
 8007050:	1dde      	adds	r6, r3, #7
 8007052:	0020      	movs	r0, r4
 8007054:	0039      	movs	r1, r7
 8007056:	9601      	str	r6, [sp, #4]
 8007058:	f7f9 f9e2 	bl	8000420 <__aeabi_idivmod>
 800705c:	3e01      	subs	r6, #1
 800705e:	3130      	adds	r1, #48	; 0x30
 8007060:	0020      	movs	r0, r4
 8007062:	7031      	strb	r1, [r6, #0]
 8007064:	0039      	movs	r1, r7
 8007066:	9402      	str	r4, [sp, #8]
 8007068:	f7f9 f8f4 	bl	8000254 <__divsi3>
 800706c:	9b02      	ldr	r3, [sp, #8]
 800706e:	0004      	movs	r4, r0
 8007070:	2b63      	cmp	r3, #99	; 0x63
 8007072:	dcee      	bgt.n	8007052 <__exponent+0x24>
 8007074:	9b01      	ldr	r3, [sp, #4]
 8007076:	3430      	adds	r4, #48	; 0x30
 8007078:	1e9a      	subs	r2, r3, #2
 800707a:	0013      	movs	r3, r2
 800707c:	9903      	ldr	r1, [sp, #12]
 800707e:	7014      	strb	r4, [r2, #0]
 8007080:	a804      	add	r0, sp, #16
 8007082:	3007      	adds	r0, #7
 8007084:	4298      	cmp	r0, r3
 8007086:	d80e      	bhi.n	80070a6 <__exponent+0x78>
 8007088:	ab04      	add	r3, sp, #16
 800708a:	3307      	adds	r3, #7
 800708c:	2000      	movs	r0, #0
 800708e:	429a      	cmp	r2, r3
 8007090:	d804      	bhi.n	800709c <__exponent+0x6e>
 8007092:	ab04      	add	r3, sp, #16
 8007094:	3009      	adds	r0, #9
 8007096:	18c0      	adds	r0, r0, r3
 8007098:	9b01      	ldr	r3, [sp, #4]
 800709a:	1ac0      	subs	r0, r0, r3
 800709c:	9b03      	ldr	r3, [sp, #12]
 800709e:	1818      	adds	r0, r3, r0
 80070a0:	1b40      	subs	r0, r0, r5
 80070a2:	b007      	add	sp, #28
 80070a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070a6:	7818      	ldrb	r0, [r3, #0]
 80070a8:	3301      	adds	r3, #1
 80070aa:	7008      	strb	r0, [r1, #0]
 80070ac:	3101      	adds	r1, #1
 80070ae:	e7e7      	b.n	8007080 <__exponent+0x52>
 80070b0:	2330      	movs	r3, #48	; 0x30
 80070b2:	18e4      	adds	r4, r4, r3
 80070b4:	70ab      	strb	r3, [r5, #2]
 80070b6:	1d28      	adds	r0, r5, #4
 80070b8:	70ec      	strb	r4, [r5, #3]
 80070ba:	e7f1      	b.n	80070a0 <__exponent+0x72>

080070bc <_printf_float>:
 80070bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070be:	b095      	sub	sp, #84	; 0x54
 80070c0:	000c      	movs	r4, r1
 80070c2:	9209      	str	r2, [sp, #36]	; 0x24
 80070c4:	001e      	movs	r6, r3
 80070c6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80070c8:	0007      	movs	r7, r0
 80070ca:	f002 ff63 	bl	8009f94 <_localeconv_r>
 80070ce:	6803      	ldr	r3, [r0, #0]
 80070d0:	0018      	movs	r0, r3
 80070d2:	930c      	str	r3, [sp, #48]	; 0x30
 80070d4:	f7f9 f818 	bl	8000108 <strlen>
 80070d8:	2300      	movs	r3, #0
 80070da:	9312      	str	r3, [sp, #72]	; 0x48
 80070dc:	7e23      	ldrb	r3, [r4, #24]
 80070de:	2207      	movs	r2, #7
 80070e0:	930a      	str	r3, [sp, #40]	; 0x28
 80070e2:	6823      	ldr	r3, [r4, #0]
 80070e4:	900e      	str	r0, [sp, #56]	; 0x38
 80070e6:	930d      	str	r3, [sp, #52]	; 0x34
 80070e8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80070ea:	682b      	ldr	r3, [r5, #0]
 80070ec:	05c9      	lsls	r1, r1, #23
 80070ee:	d547      	bpl.n	8007180 <_printf_float+0xc4>
 80070f0:	189b      	adds	r3, r3, r2
 80070f2:	4393      	bics	r3, r2
 80070f4:	001a      	movs	r2, r3
 80070f6:	3208      	adds	r2, #8
 80070f8:	602a      	str	r2, [r5, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	64a2      	str	r2, [r4, #72]	; 0x48
 8007100:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007102:	2201      	movs	r2, #1
 8007104:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007106:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007108:	930b      	str	r3, [sp, #44]	; 0x2c
 800710a:	006b      	lsls	r3, r5, #1
 800710c:	085b      	lsrs	r3, r3, #1
 800710e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007110:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007112:	4ba7      	ldr	r3, [pc, #668]	; (80073b0 <_printf_float+0x2f4>)
 8007114:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007116:	4252      	negs	r2, r2
 8007118:	f7fb fa48 	bl	80025ac <__aeabi_dcmpun>
 800711c:	2800      	cmp	r0, #0
 800711e:	d131      	bne.n	8007184 <_printf_float+0xc8>
 8007120:	2201      	movs	r2, #1
 8007122:	4ba3      	ldr	r3, [pc, #652]	; (80073b0 <_printf_float+0x2f4>)
 8007124:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007126:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007128:	4252      	negs	r2, r2
 800712a:	f7f9 f99f 	bl	800046c <__aeabi_dcmple>
 800712e:	2800      	cmp	r0, #0
 8007130:	d128      	bne.n	8007184 <_printf_float+0xc8>
 8007132:	2200      	movs	r2, #0
 8007134:	2300      	movs	r3, #0
 8007136:	0029      	movs	r1, r5
 8007138:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800713a:	f7f9 f98d 	bl	8000458 <__aeabi_dcmplt>
 800713e:	2800      	cmp	r0, #0
 8007140:	d003      	beq.n	800714a <_printf_float+0x8e>
 8007142:	0023      	movs	r3, r4
 8007144:	222d      	movs	r2, #45	; 0x2d
 8007146:	3343      	adds	r3, #67	; 0x43
 8007148:	701a      	strb	r2, [r3, #0]
 800714a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800714c:	4d99      	ldr	r5, [pc, #612]	; (80073b4 <_printf_float+0x2f8>)
 800714e:	2b47      	cmp	r3, #71	; 0x47
 8007150:	d900      	bls.n	8007154 <_printf_float+0x98>
 8007152:	4d99      	ldr	r5, [pc, #612]	; (80073b8 <_printf_float+0x2fc>)
 8007154:	2303      	movs	r3, #3
 8007156:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007158:	6123      	str	r3, [r4, #16]
 800715a:	3301      	adds	r3, #1
 800715c:	439a      	bics	r2, r3
 800715e:	2300      	movs	r3, #0
 8007160:	6022      	str	r2, [r4, #0]
 8007162:	930b      	str	r3, [sp, #44]	; 0x2c
 8007164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007166:	0021      	movs	r1, r4
 8007168:	0038      	movs	r0, r7
 800716a:	9600      	str	r6, [sp, #0]
 800716c:	aa13      	add	r2, sp, #76	; 0x4c
 800716e:	f000 f9e7 	bl	8007540 <_printf_common>
 8007172:	1c43      	adds	r3, r0, #1
 8007174:	d000      	beq.n	8007178 <_printf_float+0xbc>
 8007176:	e0a2      	b.n	80072be <_printf_float+0x202>
 8007178:	2001      	movs	r0, #1
 800717a:	4240      	negs	r0, r0
 800717c:	b015      	add	sp, #84	; 0x54
 800717e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007180:	3307      	adds	r3, #7
 8007182:	e7b6      	b.n	80070f2 <_printf_float+0x36>
 8007184:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007186:	002b      	movs	r3, r5
 8007188:	0010      	movs	r0, r2
 800718a:	0029      	movs	r1, r5
 800718c:	f7fb fa0e 	bl	80025ac <__aeabi_dcmpun>
 8007190:	2800      	cmp	r0, #0
 8007192:	d00b      	beq.n	80071ac <_printf_float+0xf0>
 8007194:	2d00      	cmp	r5, #0
 8007196:	da03      	bge.n	80071a0 <_printf_float+0xe4>
 8007198:	0023      	movs	r3, r4
 800719a:	222d      	movs	r2, #45	; 0x2d
 800719c:	3343      	adds	r3, #67	; 0x43
 800719e:	701a      	strb	r2, [r3, #0]
 80071a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071a2:	4d86      	ldr	r5, [pc, #536]	; (80073bc <_printf_float+0x300>)
 80071a4:	2b47      	cmp	r3, #71	; 0x47
 80071a6:	d9d5      	bls.n	8007154 <_printf_float+0x98>
 80071a8:	4d85      	ldr	r5, [pc, #532]	; (80073c0 <_printf_float+0x304>)
 80071aa:	e7d3      	b.n	8007154 <_printf_float+0x98>
 80071ac:	2220      	movs	r2, #32
 80071ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80071b0:	6863      	ldr	r3, [r4, #4]
 80071b2:	4391      	bics	r1, r2
 80071b4:	910f      	str	r1, [sp, #60]	; 0x3c
 80071b6:	1c5a      	adds	r2, r3, #1
 80071b8:	d149      	bne.n	800724e <_printf_float+0x192>
 80071ba:	3307      	adds	r3, #7
 80071bc:	6063      	str	r3, [r4, #4]
 80071be:	2380      	movs	r3, #128	; 0x80
 80071c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80071c2:	00db      	lsls	r3, r3, #3
 80071c4:	4313      	orrs	r3, r2
 80071c6:	2200      	movs	r2, #0
 80071c8:	9206      	str	r2, [sp, #24]
 80071ca:	aa12      	add	r2, sp, #72	; 0x48
 80071cc:	9205      	str	r2, [sp, #20]
 80071ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071d0:	a908      	add	r1, sp, #32
 80071d2:	9204      	str	r2, [sp, #16]
 80071d4:	aa11      	add	r2, sp, #68	; 0x44
 80071d6:	9203      	str	r2, [sp, #12]
 80071d8:	2223      	movs	r2, #35	; 0x23
 80071da:	6023      	str	r3, [r4, #0]
 80071dc:	9301      	str	r3, [sp, #4]
 80071de:	6863      	ldr	r3, [r4, #4]
 80071e0:	1852      	adds	r2, r2, r1
 80071e2:	9202      	str	r2, [sp, #8]
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	0038      	movs	r0, r7
 80071e8:	002b      	movs	r3, r5
 80071ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80071ec:	f7ff febc 	bl	8006f68 <__cvt>
 80071f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071f2:	0005      	movs	r5, r0
 80071f4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80071f6:	2b47      	cmp	r3, #71	; 0x47
 80071f8:	d108      	bne.n	800720c <_printf_float+0x150>
 80071fa:	1ccb      	adds	r3, r1, #3
 80071fc:	db02      	blt.n	8007204 <_printf_float+0x148>
 80071fe:	6863      	ldr	r3, [r4, #4]
 8007200:	4299      	cmp	r1, r3
 8007202:	dd48      	ble.n	8007296 <_printf_float+0x1da>
 8007204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007206:	3b02      	subs	r3, #2
 8007208:	b2db      	uxtb	r3, r3
 800720a:	930a      	str	r3, [sp, #40]	; 0x28
 800720c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800720e:	2b65      	cmp	r3, #101	; 0x65
 8007210:	d824      	bhi.n	800725c <_printf_float+0x1a0>
 8007212:	0020      	movs	r0, r4
 8007214:	001a      	movs	r2, r3
 8007216:	3901      	subs	r1, #1
 8007218:	3050      	adds	r0, #80	; 0x50
 800721a:	9111      	str	r1, [sp, #68]	; 0x44
 800721c:	f7ff ff07 	bl	800702e <__exponent>
 8007220:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007222:	900b      	str	r0, [sp, #44]	; 0x2c
 8007224:	1813      	adds	r3, r2, r0
 8007226:	6123      	str	r3, [r4, #16]
 8007228:	2a01      	cmp	r2, #1
 800722a:	dc02      	bgt.n	8007232 <_printf_float+0x176>
 800722c:	6822      	ldr	r2, [r4, #0]
 800722e:	07d2      	lsls	r2, r2, #31
 8007230:	d501      	bpl.n	8007236 <_printf_float+0x17a>
 8007232:	3301      	adds	r3, #1
 8007234:	6123      	str	r3, [r4, #16]
 8007236:	2323      	movs	r3, #35	; 0x23
 8007238:	aa08      	add	r2, sp, #32
 800723a:	189b      	adds	r3, r3, r2
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d100      	bne.n	8007244 <_printf_float+0x188>
 8007242:	e78f      	b.n	8007164 <_printf_float+0xa8>
 8007244:	0023      	movs	r3, r4
 8007246:	222d      	movs	r2, #45	; 0x2d
 8007248:	3343      	adds	r3, #67	; 0x43
 800724a:	701a      	strb	r2, [r3, #0]
 800724c:	e78a      	b.n	8007164 <_printf_float+0xa8>
 800724e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007250:	2a47      	cmp	r2, #71	; 0x47
 8007252:	d1b4      	bne.n	80071be <_printf_float+0x102>
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1b2      	bne.n	80071be <_printf_float+0x102>
 8007258:	3301      	adds	r3, #1
 800725a:	e7af      	b.n	80071bc <_printf_float+0x100>
 800725c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800725e:	2b66      	cmp	r3, #102	; 0x66
 8007260:	d11b      	bne.n	800729a <_printf_float+0x1de>
 8007262:	6863      	ldr	r3, [r4, #4]
 8007264:	2900      	cmp	r1, #0
 8007266:	dd0d      	ble.n	8007284 <_printf_float+0x1c8>
 8007268:	6121      	str	r1, [r4, #16]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d102      	bne.n	8007274 <_printf_float+0x1b8>
 800726e:	6822      	ldr	r2, [r4, #0]
 8007270:	07d2      	lsls	r2, r2, #31
 8007272:	d502      	bpl.n	800727a <_printf_float+0x1be>
 8007274:	3301      	adds	r3, #1
 8007276:	1859      	adds	r1, r3, r1
 8007278:	6121      	str	r1, [r4, #16]
 800727a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800727c:	65a3      	str	r3, [r4, #88]	; 0x58
 800727e:	2300      	movs	r3, #0
 8007280:	930b      	str	r3, [sp, #44]	; 0x2c
 8007282:	e7d8      	b.n	8007236 <_printf_float+0x17a>
 8007284:	2b00      	cmp	r3, #0
 8007286:	d103      	bne.n	8007290 <_printf_float+0x1d4>
 8007288:	2201      	movs	r2, #1
 800728a:	6821      	ldr	r1, [r4, #0]
 800728c:	4211      	tst	r1, r2
 800728e:	d000      	beq.n	8007292 <_printf_float+0x1d6>
 8007290:	1c9a      	adds	r2, r3, #2
 8007292:	6122      	str	r2, [r4, #16]
 8007294:	e7f1      	b.n	800727a <_printf_float+0x1be>
 8007296:	2367      	movs	r3, #103	; 0x67
 8007298:	930a      	str	r3, [sp, #40]	; 0x28
 800729a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800729c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800729e:	4293      	cmp	r3, r2
 80072a0:	db06      	blt.n	80072b0 <_printf_float+0x1f4>
 80072a2:	6822      	ldr	r2, [r4, #0]
 80072a4:	6123      	str	r3, [r4, #16]
 80072a6:	07d2      	lsls	r2, r2, #31
 80072a8:	d5e7      	bpl.n	800727a <_printf_float+0x1be>
 80072aa:	3301      	adds	r3, #1
 80072ac:	6123      	str	r3, [r4, #16]
 80072ae:	e7e4      	b.n	800727a <_printf_float+0x1be>
 80072b0:	2101      	movs	r1, #1
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	dc01      	bgt.n	80072ba <_printf_float+0x1fe>
 80072b6:	1849      	adds	r1, r1, r1
 80072b8:	1ac9      	subs	r1, r1, r3
 80072ba:	1852      	adds	r2, r2, r1
 80072bc:	e7e9      	b.n	8007292 <_printf_float+0x1d6>
 80072be:	6822      	ldr	r2, [r4, #0]
 80072c0:	0553      	lsls	r3, r2, #21
 80072c2:	d407      	bmi.n	80072d4 <_printf_float+0x218>
 80072c4:	6923      	ldr	r3, [r4, #16]
 80072c6:	002a      	movs	r2, r5
 80072c8:	0038      	movs	r0, r7
 80072ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072cc:	47b0      	blx	r6
 80072ce:	1c43      	adds	r3, r0, #1
 80072d0:	d128      	bne.n	8007324 <_printf_float+0x268>
 80072d2:	e751      	b.n	8007178 <_printf_float+0xbc>
 80072d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072d6:	2b65      	cmp	r3, #101	; 0x65
 80072d8:	d800      	bhi.n	80072dc <_printf_float+0x220>
 80072da:	e0e1      	b.n	80074a0 <_printf_float+0x3e4>
 80072dc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80072de:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80072e0:	2200      	movs	r2, #0
 80072e2:	2300      	movs	r3, #0
 80072e4:	f7f9 f8b2 	bl	800044c <__aeabi_dcmpeq>
 80072e8:	2800      	cmp	r0, #0
 80072ea:	d031      	beq.n	8007350 <_printf_float+0x294>
 80072ec:	2301      	movs	r3, #1
 80072ee:	0038      	movs	r0, r7
 80072f0:	4a34      	ldr	r2, [pc, #208]	; (80073c4 <_printf_float+0x308>)
 80072f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072f4:	47b0      	blx	r6
 80072f6:	1c43      	adds	r3, r0, #1
 80072f8:	d100      	bne.n	80072fc <_printf_float+0x240>
 80072fa:	e73d      	b.n	8007178 <_printf_float+0xbc>
 80072fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007300:	4293      	cmp	r3, r2
 8007302:	db02      	blt.n	800730a <_printf_float+0x24e>
 8007304:	6823      	ldr	r3, [r4, #0]
 8007306:	07db      	lsls	r3, r3, #31
 8007308:	d50c      	bpl.n	8007324 <_printf_float+0x268>
 800730a:	0038      	movs	r0, r7
 800730c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800730e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007310:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007312:	47b0      	blx	r6
 8007314:	2500      	movs	r5, #0
 8007316:	1c43      	adds	r3, r0, #1
 8007318:	d100      	bne.n	800731c <_printf_float+0x260>
 800731a:	e72d      	b.n	8007178 <_printf_float+0xbc>
 800731c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800731e:	3b01      	subs	r3, #1
 8007320:	42ab      	cmp	r3, r5
 8007322:	dc0a      	bgt.n	800733a <_printf_float+0x27e>
 8007324:	6823      	ldr	r3, [r4, #0]
 8007326:	079b      	lsls	r3, r3, #30
 8007328:	d500      	bpl.n	800732c <_printf_float+0x270>
 800732a:	e106      	b.n	800753a <_printf_float+0x47e>
 800732c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800732e:	68e0      	ldr	r0, [r4, #12]
 8007330:	4298      	cmp	r0, r3
 8007332:	db00      	blt.n	8007336 <_printf_float+0x27a>
 8007334:	e722      	b.n	800717c <_printf_float+0xc0>
 8007336:	0018      	movs	r0, r3
 8007338:	e720      	b.n	800717c <_printf_float+0xc0>
 800733a:	0022      	movs	r2, r4
 800733c:	2301      	movs	r3, #1
 800733e:	0038      	movs	r0, r7
 8007340:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007342:	321a      	adds	r2, #26
 8007344:	47b0      	blx	r6
 8007346:	1c43      	adds	r3, r0, #1
 8007348:	d100      	bne.n	800734c <_printf_float+0x290>
 800734a:	e715      	b.n	8007178 <_printf_float+0xbc>
 800734c:	3501      	adds	r5, #1
 800734e:	e7e5      	b.n	800731c <_printf_float+0x260>
 8007350:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007352:	2b00      	cmp	r3, #0
 8007354:	dc38      	bgt.n	80073c8 <_printf_float+0x30c>
 8007356:	2301      	movs	r3, #1
 8007358:	0038      	movs	r0, r7
 800735a:	4a1a      	ldr	r2, [pc, #104]	; (80073c4 <_printf_float+0x308>)
 800735c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800735e:	47b0      	blx	r6
 8007360:	1c43      	adds	r3, r0, #1
 8007362:	d100      	bne.n	8007366 <_printf_float+0x2aa>
 8007364:	e708      	b.n	8007178 <_printf_float+0xbc>
 8007366:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007368:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800736a:	4313      	orrs	r3, r2
 800736c:	d102      	bne.n	8007374 <_printf_float+0x2b8>
 800736e:	6823      	ldr	r3, [r4, #0]
 8007370:	07db      	lsls	r3, r3, #31
 8007372:	d5d7      	bpl.n	8007324 <_printf_float+0x268>
 8007374:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007376:	0038      	movs	r0, r7
 8007378:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800737a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800737c:	47b0      	blx	r6
 800737e:	1c43      	adds	r3, r0, #1
 8007380:	d100      	bne.n	8007384 <_printf_float+0x2c8>
 8007382:	e6f9      	b.n	8007178 <_printf_float+0xbc>
 8007384:	2300      	movs	r3, #0
 8007386:	930a      	str	r3, [sp, #40]	; 0x28
 8007388:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800738a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800738c:	425b      	negs	r3, r3
 800738e:	4293      	cmp	r3, r2
 8007390:	dc01      	bgt.n	8007396 <_printf_float+0x2da>
 8007392:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007394:	e797      	b.n	80072c6 <_printf_float+0x20a>
 8007396:	0022      	movs	r2, r4
 8007398:	2301      	movs	r3, #1
 800739a:	0038      	movs	r0, r7
 800739c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800739e:	321a      	adds	r2, #26
 80073a0:	47b0      	blx	r6
 80073a2:	1c43      	adds	r3, r0, #1
 80073a4:	d100      	bne.n	80073a8 <_printf_float+0x2ec>
 80073a6:	e6e7      	b.n	8007178 <_printf_float+0xbc>
 80073a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073aa:	3301      	adds	r3, #1
 80073ac:	e7eb      	b.n	8007386 <_printf_float+0x2ca>
 80073ae:	46c0      	nop			; (mov r8, r8)
 80073b0:	7fefffff 	.word	0x7fefffff
 80073b4:	0800c404 	.word	0x0800c404
 80073b8:	0800c408 	.word	0x0800c408
 80073bc:	0800c40c 	.word	0x0800c40c
 80073c0:	0800c410 	.word	0x0800c410
 80073c4:	0800c809 	.word	0x0800c809
 80073c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80073ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073cc:	920a      	str	r2, [sp, #40]	; 0x28
 80073ce:	429a      	cmp	r2, r3
 80073d0:	dd00      	ble.n	80073d4 <_printf_float+0x318>
 80073d2:	930a      	str	r3, [sp, #40]	; 0x28
 80073d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	dc3c      	bgt.n	8007454 <_printf_float+0x398>
 80073da:	2300      	movs	r3, #0
 80073dc:	930d      	str	r3, [sp, #52]	; 0x34
 80073de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073e0:	43db      	mvns	r3, r3
 80073e2:	17db      	asrs	r3, r3, #31
 80073e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80073e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80073ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80073ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073ee:	4013      	ands	r3, r2
 80073f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073f6:	4293      	cmp	r3, r2
 80073f8:	dc34      	bgt.n	8007464 <_printf_float+0x3a8>
 80073fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80073fe:	4293      	cmp	r3, r2
 8007400:	db3d      	blt.n	800747e <_printf_float+0x3c2>
 8007402:	6823      	ldr	r3, [r4, #0]
 8007404:	07db      	lsls	r3, r3, #31
 8007406:	d43a      	bmi.n	800747e <_printf_float+0x3c2>
 8007408:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800740a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800740c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	1a52      	subs	r2, r2, r1
 8007412:	920a      	str	r2, [sp, #40]	; 0x28
 8007414:	429a      	cmp	r2, r3
 8007416:	dd00      	ble.n	800741a <_printf_float+0x35e>
 8007418:	930a      	str	r3, [sp, #40]	; 0x28
 800741a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800741c:	2b00      	cmp	r3, #0
 800741e:	dc36      	bgt.n	800748e <_printf_float+0x3d2>
 8007420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007422:	2500      	movs	r5, #0
 8007424:	43db      	mvns	r3, r3
 8007426:	17db      	asrs	r3, r3, #31
 8007428:	930b      	str	r3, [sp, #44]	; 0x2c
 800742a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800742c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800742e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007430:	1a9b      	subs	r3, r3, r2
 8007432:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007434:	400a      	ands	r2, r1
 8007436:	1a9b      	subs	r3, r3, r2
 8007438:	42ab      	cmp	r3, r5
 800743a:	dc00      	bgt.n	800743e <_printf_float+0x382>
 800743c:	e772      	b.n	8007324 <_printf_float+0x268>
 800743e:	0022      	movs	r2, r4
 8007440:	2301      	movs	r3, #1
 8007442:	0038      	movs	r0, r7
 8007444:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007446:	321a      	adds	r2, #26
 8007448:	47b0      	blx	r6
 800744a:	1c43      	adds	r3, r0, #1
 800744c:	d100      	bne.n	8007450 <_printf_float+0x394>
 800744e:	e693      	b.n	8007178 <_printf_float+0xbc>
 8007450:	3501      	adds	r5, #1
 8007452:	e7ea      	b.n	800742a <_printf_float+0x36e>
 8007454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007456:	002a      	movs	r2, r5
 8007458:	0038      	movs	r0, r7
 800745a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800745c:	47b0      	blx	r6
 800745e:	1c43      	adds	r3, r0, #1
 8007460:	d1bb      	bne.n	80073da <_printf_float+0x31e>
 8007462:	e689      	b.n	8007178 <_printf_float+0xbc>
 8007464:	0022      	movs	r2, r4
 8007466:	2301      	movs	r3, #1
 8007468:	0038      	movs	r0, r7
 800746a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800746c:	321a      	adds	r2, #26
 800746e:	47b0      	blx	r6
 8007470:	1c43      	adds	r3, r0, #1
 8007472:	d100      	bne.n	8007476 <_printf_float+0x3ba>
 8007474:	e680      	b.n	8007178 <_printf_float+0xbc>
 8007476:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007478:	3301      	adds	r3, #1
 800747a:	930d      	str	r3, [sp, #52]	; 0x34
 800747c:	e7b3      	b.n	80073e6 <_printf_float+0x32a>
 800747e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007480:	0038      	movs	r0, r7
 8007482:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007484:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007486:	47b0      	blx	r6
 8007488:	1c43      	adds	r3, r0, #1
 800748a:	d1bd      	bne.n	8007408 <_printf_float+0x34c>
 800748c:	e674      	b.n	8007178 <_printf_float+0xbc>
 800748e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007490:	0038      	movs	r0, r7
 8007492:	18ea      	adds	r2, r5, r3
 8007494:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007498:	47b0      	blx	r6
 800749a:	1c43      	adds	r3, r0, #1
 800749c:	d1c0      	bne.n	8007420 <_printf_float+0x364>
 800749e:	e66b      	b.n	8007178 <_printf_float+0xbc>
 80074a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	dc02      	bgt.n	80074ac <_printf_float+0x3f0>
 80074a6:	2301      	movs	r3, #1
 80074a8:	421a      	tst	r2, r3
 80074aa:	d034      	beq.n	8007516 <_printf_float+0x45a>
 80074ac:	2301      	movs	r3, #1
 80074ae:	002a      	movs	r2, r5
 80074b0:	0038      	movs	r0, r7
 80074b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074b4:	47b0      	blx	r6
 80074b6:	1c43      	adds	r3, r0, #1
 80074b8:	d100      	bne.n	80074bc <_printf_float+0x400>
 80074ba:	e65d      	b.n	8007178 <_printf_float+0xbc>
 80074bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074be:	0038      	movs	r0, r7
 80074c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074c4:	47b0      	blx	r6
 80074c6:	1c43      	adds	r3, r0, #1
 80074c8:	d100      	bne.n	80074cc <_printf_float+0x410>
 80074ca:	e655      	b.n	8007178 <_printf_float+0xbc>
 80074cc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80074ce:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80074d0:	2200      	movs	r2, #0
 80074d2:	2300      	movs	r3, #0
 80074d4:	f7f8 ffba 	bl	800044c <__aeabi_dcmpeq>
 80074d8:	2800      	cmp	r0, #0
 80074da:	d11a      	bne.n	8007512 <_printf_float+0x456>
 80074dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80074de:	1c6a      	adds	r2, r5, #1
 80074e0:	3b01      	subs	r3, #1
 80074e2:	0038      	movs	r0, r7
 80074e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074e6:	47b0      	blx	r6
 80074e8:	1c43      	adds	r3, r0, #1
 80074ea:	d10e      	bne.n	800750a <_printf_float+0x44e>
 80074ec:	e644      	b.n	8007178 <_printf_float+0xbc>
 80074ee:	0022      	movs	r2, r4
 80074f0:	2301      	movs	r3, #1
 80074f2:	0038      	movs	r0, r7
 80074f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074f6:	321a      	adds	r2, #26
 80074f8:	47b0      	blx	r6
 80074fa:	1c43      	adds	r3, r0, #1
 80074fc:	d100      	bne.n	8007500 <_printf_float+0x444>
 80074fe:	e63b      	b.n	8007178 <_printf_float+0xbc>
 8007500:	3501      	adds	r5, #1
 8007502:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007504:	3b01      	subs	r3, #1
 8007506:	42ab      	cmp	r3, r5
 8007508:	dcf1      	bgt.n	80074ee <_printf_float+0x432>
 800750a:	0022      	movs	r2, r4
 800750c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800750e:	3250      	adds	r2, #80	; 0x50
 8007510:	e6da      	b.n	80072c8 <_printf_float+0x20c>
 8007512:	2500      	movs	r5, #0
 8007514:	e7f5      	b.n	8007502 <_printf_float+0x446>
 8007516:	002a      	movs	r2, r5
 8007518:	e7e3      	b.n	80074e2 <_printf_float+0x426>
 800751a:	0022      	movs	r2, r4
 800751c:	2301      	movs	r3, #1
 800751e:	0038      	movs	r0, r7
 8007520:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007522:	3219      	adds	r2, #25
 8007524:	47b0      	blx	r6
 8007526:	1c43      	adds	r3, r0, #1
 8007528:	d100      	bne.n	800752c <_printf_float+0x470>
 800752a:	e625      	b.n	8007178 <_printf_float+0xbc>
 800752c:	3501      	adds	r5, #1
 800752e:	68e3      	ldr	r3, [r4, #12]
 8007530:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007532:	1a9b      	subs	r3, r3, r2
 8007534:	42ab      	cmp	r3, r5
 8007536:	dcf0      	bgt.n	800751a <_printf_float+0x45e>
 8007538:	e6f8      	b.n	800732c <_printf_float+0x270>
 800753a:	2500      	movs	r5, #0
 800753c:	e7f7      	b.n	800752e <_printf_float+0x472>
 800753e:	46c0      	nop			; (mov r8, r8)

08007540 <_printf_common>:
 8007540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007542:	0015      	movs	r5, r2
 8007544:	9301      	str	r3, [sp, #4]
 8007546:	688a      	ldr	r2, [r1, #8]
 8007548:	690b      	ldr	r3, [r1, #16]
 800754a:	000c      	movs	r4, r1
 800754c:	9000      	str	r0, [sp, #0]
 800754e:	4293      	cmp	r3, r2
 8007550:	da00      	bge.n	8007554 <_printf_common+0x14>
 8007552:	0013      	movs	r3, r2
 8007554:	0022      	movs	r2, r4
 8007556:	602b      	str	r3, [r5, #0]
 8007558:	3243      	adds	r2, #67	; 0x43
 800755a:	7812      	ldrb	r2, [r2, #0]
 800755c:	2a00      	cmp	r2, #0
 800755e:	d001      	beq.n	8007564 <_printf_common+0x24>
 8007560:	3301      	adds	r3, #1
 8007562:	602b      	str	r3, [r5, #0]
 8007564:	6823      	ldr	r3, [r4, #0]
 8007566:	069b      	lsls	r3, r3, #26
 8007568:	d502      	bpl.n	8007570 <_printf_common+0x30>
 800756a:	682b      	ldr	r3, [r5, #0]
 800756c:	3302      	adds	r3, #2
 800756e:	602b      	str	r3, [r5, #0]
 8007570:	6822      	ldr	r2, [r4, #0]
 8007572:	2306      	movs	r3, #6
 8007574:	0017      	movs	r7, r2
 8007576:	401f      	ands	r7, r3
 8007578:	421a      	tst	r2, r3
 800757a:	d027      	beq.n	80075cc <_printf_common+0x8c>
 800757c:	0023      	movs	r3, r4
 800757e:	3343      	adds	r3, #67	; 0x43
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	1e5a      	subs	r2, r3, #1
 8007584:	4193      	sbcs	r3, r2
 8007586:	6822      	ldr	r2, [r4, #0]
 8007588:	0692      	lsls	r2, r2, #26
 800758a:	d430      	bmi.n	80075ee <_printf_common+0xae>
 800758c:	0022      	movs	r2, r4
 800758e:	9901      	ldr	r1, [sp, #4]
 8007590:	9800      	ldr	r0, [sp, #0]
 8007592:	9e08      	ldr	r6, [sp, #32]
 8007594:	3243      	adds	r2, #67	; 0x43
 8007596:	47b0      	blx	r6
 8007598:	1c43      	adds	r3, r0, #1
 800759a:	d025      	beq.n	80075e8 <_printf_common+0xa8>
 800759c:	2306      	movs	r3, #6
 800759e:	6820      	ldr	r0, [r4, #0]
 80075a0:	682a      	ldr	r2, [r5, #0]
 80075a2:	68e1      	ldr	r1, [r4, #12]
 80075a4:	2500      	movs	r5, #0
 80075a6:	4003      	ands	r3, r0
 80075a8:	2b04      	cmp	r3, #4
 80075aa:	d103      	bne.n	80075b4 <_printf_common+0x74>
 80075ac:	1a8d      	subs	r5, r1, r2
 80075ae:	43eb      	mvns	r3, r5
 80075b0:	17db      	asrs	r3, r3, #31
 80075b2:	401d      	ands	r5, r3
 80075b4:	68a3      	ldr	r3, [r4, #8]
 80075b6:	6922      	ldr	r2, [r4, #16]
 80075b8:	4293      	cmp	r3, r2
 80075ba:	dd01      	ble.n	80075c0 <_printf_common+0x80>
 80075bc:	1a9b      	subs	r3, r3, r2
 80075be:	18ed      	adds	r5, r5, r3
 80075c0:	2700      	movs	r7, #0
 80075c2:	42bd      	cmp	r5, r7
 80075c4:	d120      	bne.n	8007608 <_printf_common+0xc8>
 80075c6:	2000      	movs	r0, #0
 80075c8:	e010      	b.n	80075ec <_printf_common+0xac>
 80075ca:	3701      	adds	r7, #1
 80075cc:	68e3      	ldr	r3, [r4, #12]
 80075ce:	682a      	ldr	r2, [r5, #0]
 80075d0:	1a9b      	subs	r3, r3, r2
 80075d2:	42bb      	cmp	r3, r7
 80075d4:	ddd2      	ble.n	800757c <_printf_common+0x3c>
 80075d6:	0022      	movs	r2, r4
 80075d8:	2301      	movs	r3, #1
 80075da:	9901      	ldr	r1, [sp, #4]
 80075dc:	9800      	ldr	r0, [sp, #0]
 80075de:	9e08      	ldr	r6, [sp, #32]
 80075e0:	3219      	adds	r2, #25
 80075e2:	47b0      	blx	r6
 80075e4:	1c43      	adds	r3, r0, #1
 80075e6:	d1f0      	bne.n	80075ca <_printf_common+0x8a>
 80075e8:	2001      	movs	r0, #1
 80075ea:	4240      	negs	r0, r0
 80075ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80075ee:	2030      	movs	r0, #48	; 0x30
 80075f0:	18e1      	adds	r1, r4, r3
 80075f2:	3143      	adds	r1, #67	; 0x43
 80075f4:	7008      	strb	r0, [r1, #0]
 80075f6:	0021      	movs	r1, r4
 80075f8:	1c5a      	adds	r2, r3, #1
 80075fa:	3145      	adds	r1, #69	; 0x45
 80075fc:	7809      	ldrb	r1, [r1, #0]
 80075fe:	18a2      	adds	r2, r4, r2
 8007600:	3243      	adds	r2, #67	; 0x43
 8007602:	3302      	adds	r3, #2
 8007604:	7011      	strb	r1, [r2, #0]
 8007606:	e7c1      	b.n	800758c <_printf_common+0x4c>
 8007608:	0022      	movs	r2, r4
 800760a:	2301      	movs	r3, #1
 800760c:	9901      	ldr	r1, [sp, #4]
 800760e:	9800      	ldr	r0, [sp, #0]
 8007610:	9e08      	ldr	r6, [sp, #32]
 8007612:	321a      	adds	r2, #26
 8007614:	47b0      	blx	r6
 8007616:	1c43      	adds	r3, r0, #1
 8007618:	d0e6      	beq.n	80075e8 <_printf_common+0xa8>
 800761a:	3701      	adds	r7, #1
 800761c:	e7d1      	b.n	80075c2 <_printf_common+0x82>
	...

08007620 <_printf_i>:
 8007620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007622:	b08b      	sub	sp, #44	; 0x2c
 8007624:	9206      	str	r2, [sp, #24]
 8007626:	000a      	movs	r2, r1
 8007628:	3243      	adds	r2, #67	; 0x43
 800762a:	9307      	str	r3, [sp, #28]
 800762c:	9005      	str	r0, [sp, #20]
 800762e:	9204      	str	r2, [sp, #16]
 8007630:	7e0a      	ldrb	r2, [r1, #24]
 8007632:	000c      	movs	r4, r1
 8007634:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007636:	2a78      	cmp	r2, #120	; 0x78
 8007638:	d807      	bhi.n	800764a <_printf_i+0x2a>
 800763a:	2a62      	cmp	r2, #98	; 0x62
 800763c:	d809      	bhi.n	8007652 <_printf_i+0x32>
 800763e:	2a00      	cmp	r2, #0
 8007640:	d100      	bne.n	8007644 <_printf_i+0x24>
 8007642:	e0c1      	b.n	80077c8 <_printf_i+0x1a8>
 8007644:	2a58      	cmp	r2, #88	; 0x58
 8007646:	d100      	bne.n	800764a <_printf_i+0x2a>
 8007648:	e08c      	b.n	8007764 <_printf_i+0x144>
 800764a:	0026      	movs	r6, r4
 800764c:	3642      	adds	r6, #66	; 0x42
 800764e:	7032      	strb	r2, [r6, #0]
 8007650:	e022      	b.n	8007698 <_printf_i+0x78>
 8007652:	0010      	movs	r0, r2
 8007654:	3863      	subs	r0, #99	; 0x63
 8007656:	2815      	cmp	r0, #21
 8007658:	d8f7      	bhi.n	800764a <_printf_i+0x2a>
 800765a:	f7f8 fd67 	bl	800012c <__gnu_thumb1_case_shi>
 800765e:	0016      	.short	0x0016
 8007660:	fff6001f 	.word	0xfff6001f
 8007664:	fff6fff6 	.word	0xfff6fff6
 8007668:	001ffff6 	.word	0x001ffff6
 800766c:	fff6fff6 	.word	0xfff6fff6
 8007670:	fff6fff6 	.word	0xfff6fff6
 8007674:	003600a8 	.word	0x003600a8
 8007678:	fff6009a 	.word	0xfff6009a
 800767c:	00b9fff6 	.word	0x00b9fff6
 8007680:	0036fff6 	.word	0x0036fff6
 8007684:	fff6fff6 	.word	0xfff6fff6
 8007688:	009e      	.short	0x009e
 800768a:	0026      	movs	r6, r4
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	3642      	adds	r6, #66	; 0x42
 8007690:	1d11      	adds	r1, r2, #4
 8007692:	6019      	str	r1, [r3, #0]
 8007694:	6813      	ldr	r3, [r2, #0]
 8007696:	7033      	strb	r3, [r6, #0]
 8007698:	2301      	movs	r3, #1
 800769a:	e0a7      	b.n	80077ec <_printf_i+0x1cc>
 800769c:	6808      	ldr	r0, [r1, #0]
 800769e:	6819      	ldr	r1, [r3, #0]
 80076a0:	1d0a      	adds	r2, r1, #4
 80076a2:	0605      	lsls	r5, r0, #24
 80076a4:	d50b      	bpl.n	80076be <_printf_i+0x9e>
 80076a6:	680d      	ldr	r5, [r1, #0]
 80076a8:	601a      	str	r2, [r3, #0]
 80076aa:	2d00      	cmp	r5, #0
 80076ac:	da03      	bge.n	80076b6 <_printf_i+0x96>
 80076ae:	232d      	movs	r3, #45	; 0x2d
 80076b0:	9a04      	ldr	r2, [sp, #16]
 80076b2:	426d      	negs	r5, r5
 80076b4:	7013      	strb	r3, [r2, #0]
 80076b6:	4b61      	ldr	r3, [pc, #388]	; (800783c <_printf_i+0x21c>)
 80076b8:	270a      	movs	r7, #10
 80076ba:	9303      	str	r3, [sp, #12]
 80076bc:	e01b      	b.n	80076f6 <_printf_i+0xd6>
 80076be:	680d      	ldr	r5, [r1, #0]
 80076c0:	601a      	str	r2, [r3, #0]
 80076c2:	0641      	lsls	r1, r0, #25
 80076c4:	d5f1      	bpl.n	80076aa <_printf_i+0x8a>
 80076c6:	b22d      	sxth	r5, r5
 80076c8:	e7ef      	b.n	80076aa <_printf_i+0x8a>
 80076ca:	680d      	ldr	r5, [r1, #0]
 80076cc:	6819      	ldr	r1, [r3, #0]
 80076ce:	1d08      	adds	r0, r1, #4
 80076d0:	6018      	str	r0, [r3, #0]
 80076d2:	062e      	lsls	r6, r5, #24
 80076d4:	d501      	bpl.n	80076da <_printf_i+0xba>
 80076d6:	680d      	ldr	r5, [r1, #0]
 80076d8:	e003      	b.n	80076e2 <_printf_i+0xc2>
 80076da:	066d      	lsls	r5, r5, #25
 80076dc:	d5fb      	bpl.n	80076d6 <_printf_i+0xb6>
 80076de:	680d      	ldr	r5, [r1, #0]
 80076e0:	b2ad      	uxth	r5, r5
 80076e2:	4b56      	ldr	r3, [pc, #344]	; (800783c <_printf_i+0x21c>)
 80076e4:	2708      	movs	r7, #8
 80076e6:	9303      	str	r3, [sp, #12]
 80076e8:	2a6f      	cmp	r2, #111	; 0x6f
 80076ea:	d000      	beq.n	80076ee <_printf_i+0xce>
 80076ec:	3702      	adds	r7, #2
 80076ee:	0023      	movs	r3, r4
 80076f0:	2200      	movs	r2, #0
 80076f2:	3343      	adds	r3, #67	; 0x43
 80076f4:	701a      	strb	r2, [r3, #0]
 80076f6:	6863      	ldr	r3, [r4, #4]
 80076f8:	60a3      	str	r3, [r4, #8]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	db03      	blt.n	8007706 <_printf_i+0xe6>
 80076fe:	2204      	movs	r2, #4
 8007700:	6821      	ldr	r1, [r4, #0]
 8007702:	4391      	bics	r1, r2
 8007704:	6021      	str	r1, [r4, #0]
 8007706:	2d00      	cmp	r5, #0
 8007708:	d102      	bne.n	8007710 <_printf_i+0xf0>
 800770a:	9e04      	ldr	r6, [sp, #16]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00c      	beq.n	800772a <_printf_i+0x10a>
 8007710:	9e04      	ldr	r6, [sp, #16]
 8007712:	0028      	movs	r0, r5
 8007714:	0039      	movs	r1, r7
 8007716:	f7f8 fd99 	bl	800024c <__aeabi_uidivmod>
 800771a:	9b03      	ldr	r3, [sp, #12]
 800771c:	3e01      	subs	r6, #1
 800771e:	5c5b      	ldrb	r3, [r3, r1]
 8007720:	7033      	strb	r3, [r6, #0]
 8007722:	002b      	movs	r3, r5
 8007724:	0005      	movs	r5, r0
 8007726:	429f      	cmp	r7, r3
 8007728:	d9f3      	bls.n	8007712 <_printf_i+0xf2>
 800772a:	2f08      	cmp	r7, #8
 800772c:	d109      	bne.n	8007742 <_printf_i+0x122>
 800772e:	6823      	ldr	r3, [r4, #0]
 8007730:	07db      	lsls	r3, r3, #31
 8007732:	d506      	bpl.n	8007742 <_printf_i+0x122>
 8007734:	6863      	ldr	r3, [r4, #4]
 8007736:	6922      	ldr	r2, [r4, #16]
 8007738:	4293      	cmp	r3, r2
 800773a:	dc02      	bgt.n	8007742 <_printf_i+0x122>
 800773c:	2330      	movs	r3, #48	; 0x30
 800773e:	3e01      	subs	r6, #1
 8007740:	7033      	strb	r3, [r6, #0]
 8007742:	9b04      	ldr	r3, [sp, #16]
 8007744:	1b9b      	subs	r3, r3, r6
 8007746:	6123      	str	r3, [r4, #16]
 8007748:	9b07      	ldr	r3, [sp, #28]
 800774a:	0021      	movs	r1, r4
 800774c:	9300      	str	r3, [sp, #0]
 800774e:	9805      	ldr	r0, [sp, #20]
 8007750:	9b06      	ldr	r3, [sp, #24]
 8007752:	aa09      	add	r2, sp, #36	; 0x24
 8007754:	f7ff fef4 	bl	8007540 <_printf_common>
 8007758:	1c43      	adds	r3, r0, #1
 800775a:	d14c      	bne.n	80077f6 <_printf_i+0x1d6>
 800775c:	2001      	movs	r0, #1
 800775e:	4240      	negs	r0, r0
 8007760:	b00b      	add	sp, #44	; 0x2c
 8007762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007764:	3145      	adds	r1, #69	; 0x45
 8007766:	700a      	strb	r2, [r1, #0]
 8007768:	4a34      	ldr	r2, [pc, #208]	; (800783c <_printf_i+0x21c>)
 800776a:	9203      	str	r2, [sp, #12]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	6821      	ldr	r1, [r4, #0]
 8007770:	ca20      	ldmia	r2!, {r5}
 8007772:	601a      	str	r2, [r3, #0]
 8007774:	0608      	lsls	r0, r1, #24
 8007776:	d516      	bpl.n	80077a6 <_printf_i+0x186>
 8007778:	07cb      	lsls	r3, r1, #31
 800777a:	d502      	bpl.n	8007782 <_printf_i+0x162>
 800777c:	2320      	movs	r3, #32
 800777e:	4319      	orrs	r1, r3
 8007780:	6021      	str	r1, [r4, #0]
 8007782:	2710      	movs	r7, #16
 8007784:	2d00      	cmp	r5, #0
 8007786:	d1b2      	bne.n	80076ee <_printf_i+0xce>
 8007788:	2320      	movs	r3, #32
 800778a:	6822      	ldr	r2, [r4, #0]
 800778c:	439a      	bics	r2, r3
 800778e:	6022      	str	r2, [r4, #0]
 8007790:	e7ad      	b.n	80076ee <_printf_i+0xce>
 8007792:	2220      	movs	r2, #32
 8007794:	6809      	ldr	r1, [r1, #0]
 8007796:	430a      	orrs	r2, r1
 8007798:	6022      	str	r2, [r4, #0]
 800779a:	0022      	movs	r2, r4
 800779c:	2178      	movs	r1, #120	; 0x78
 800779e:	3245      	adds	r2, #69	; 0x45
 80077a0:	7011      	strb	r1, [r2, #0]
 80077a2:	4a27      	ldr	r2, [pc, #156]	; (8007840 <_printf_i+0x220>)
 80077a4:	e7e1      	b.n	800776a <_printf_i+0x14a>
 80077a6:	0648      	lsls	r0, r1, #25
 80077a8:	d5e6      	bpl.n	8007778 <_printf_i+0x158>
 80077aa:	b2ad      	uxth	r5, r5
 80077ac:	e7e4      	b.n	8007778 <_printf_i+0x158>
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	680d      	ldr	r5, [r1, #0]
 80077b2:	1d10      	adds	r0, r2, #4
 80077b4:	6949      	ldr	r1, [r1, #20]
 80077b6:	6018      	str	r0, [r3, #0]
 80077b8:	6813      	ldr	r3, [r2, #0]
 80077ba:	062e      	lsls	r6, r5, #24
 80077bc:	d501      	bpl.n	80077c2 <_printf_i+0x1a2>
 80077be:	6019      	str	r1, [r3, #0]
 80077c0:	e002      	b.n	80077c8 <_printf_i+0x1a8>
 80077c2:	066d      	lsls	r5, r5, #25
 80077c4:	d5fb      	bpl.n	80077be <_printf_i+0x19e>
 80077c6:	8019      	strh	r1, [r3, #0]
 80077c8:	2300      	movs	r3, #0
 80077ca:	9e04      	ldr	r6, [sp, #16]
 80077cc:	6123      	str	r3, [r4, #16]
 80077ce:	e7bb      	b.n	8007748 <_printf_i+0x128>
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	1d11      	adds	r1, r2, #4
 80077d4:	6019      	str	r1, [r3, #0]
 80077d6:	6816      	ldr	r6, [r2, #0]
 80077d8:	2100      	movs	r1, #0
 80077da:	0030      	movs	r0, r6
 80077dc:	6862      	ldr	r2, [r4, #4]
 80077de:	f002 fc0d 	bl	8009ffc <memchr>
 80077e2:	2800      	cmp	r0, #0
 80077e4:	d001      	beq.n	80077ea <_printf_i+0x1ca>
 80077e6:	1b80      	subs	r0, r0, r6
 80077e8:	6060      	str	r0, [r4, #4]
 80077ea:	6863      	ldr	r3, [r4, #4]
 80077ec:	6123      	str	r3, [r4, #16]
 80077ee:	2300      	movs	r3, #0
 80077f0:	9a04      	ldr	r2, [sp, #16]
 80077f2:	7013      	strb	r3, [r2, #0]
 80077f4:	e7a8      	b.n	8007748 <_printf_i+0x128>
 80077f6:	6923      	ldr	r3, [r4, #16]
 80077f8:	0032      	movs	r2, r6
 80077fa:	9906      	ldr	r1, [sp, #24]
 80077fc:	9805      	ldr	r0, [sp, #20]
 80077fe:	9d07      	ldr	r5, [sp, #28]
 8007800:	47a8      	blx	r5
 8007802:	1c43      	adds	r3, r0, #1
 8007804:	d0aa      	beq.n	800775c <_printf_i+0x13c>
 8007806:	6823      	ldr	r3, [r4, #0]
 8007808:	079b      	lsls	r3, r3, #30
 800780a:	d415      	bmi.n	8007838 <_printf_i+0x218>
 800780c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800780e:	68e0      	ldr	r0, [r4, #12]
 8007810:	4298      	cmp	r0, r3
 8007812:	daa5      	bge.n	8007760 <_printf_i+0x140>
 8007814:	0018      	movs	r0, r3
 8007816:	e7a3      	b.n	8007760 <_printf_i+0x140>
 8007818:	0022      	movs	r2, r4
 800781a:	2301      	movs	r3, #1
 800781c:	9906      	ldr	r1, [sp, #24]
 800781e:	9805      	ldr	r0, [sp, #20]
 8007820:	9e07      	ldr	r6, [sp, #28]
 8007822:	3219      	adds	r2, #25
 8007824:	47b0      	blx	r6
 8007826:	1c43      	adds	r3, r0, #1
 8007828:	d098      	beq.n	800775c <_printf_i+0x13c>
 800782a:	3501      	adds	r5, #1
 800782c:	68e3      	ldr	r3, [r4, #12]
 800782e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007830:	1a9b      	subs	r3, r3, r2
 8007832:	42ab      	cmp	r3, r5
 8007834:	dcf0      	bgt.n	8007818 <_printf_i+0x1f8>
 8007836:	e7e9      	b.n	800780c <_printf_i+0x1ec>
 8007838:	2500      	movs	r5, #0
 800783a:	e7f7      	b.n	800782c <_printf_i+0x20c>
 800783c:	0800c414 	.word	0x0800c414
 8007840:	0800c425 	.word	0x0800c425

08007844 <_scanf_float>:
 8007844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007846:	b08b      	sub	sp, #44	; 0x2c
 8007848:	0015      	movs	r5, r2
 800784a:	9001      	str	r0, [sp, #4]
 800784c:	22ae      	movs	r2, #174	; 0xae
 800784e:	2000      	movs	r0, #0
 8007850:	9306      	str	r3, [sp, #24]
 8007852:	688b      	ldr	r3, [r1, #8]
 8007854:	000e      	movs	r6, r1
 8007856:	1e59      	subs	r1, r3, #1
 8007858:	0052      	lsls	r2, r2, #1
 800785a:	9005      	str	r0, [sp, #20]
 800785c:	4291      	cmp	r1, r2
 800785e:	d905      	bls.n	800786c <_scanf_float+0x28>
 8007860:	3b5e      	subs	r3, #94	; 0x5e
 8007862:	3bff      	subs	r3, #255	; 0xff
 8007864:	9305      	str	r3, [sp, #20]
 8007866:	235e      	movs	r3, #94	; 0x5e
 8007868:	33ff      	adds	r3, #255	; 0xff
 800786a:	60b3      	str	r3, [r6, #8]
 800786c:	23f0      	movs	r3, #240	; 0xf0
 800786e:	6832      	ldr	r2, [r6, #0]
 8007870:	00db      	lsls	r3, r3, #3
 8007872:	4313      	orrs	r3, r2
 8007874:	6033      	str	r3, [r6, #0]
 8007876:	0033      	movs	r3, r6
 8007878:	2400      	movs	r4, #0
 800787a:	331c      	adds	r3, #28
 800787c:	001f      	movs	r7, r3
 800787e:	9303      	str	r3, [sp, #12]
 8007880:	9402      	str	r4, [sp, #8]
 8007882:	9408      	str	r4, [sp, #32]
 8007884:	9407      	str	r4, [sp, #28]
 8007886:	9400      	str	r4, [sp, #0]
 8007888:	9404      	str	r4, [sp, #16]
 800788a:	68b2      	ldr	r2, [r6, #8]
 800788c:	2a00      	cmp	r2, #0
 800788e:	d00a      	beq.n	80078a6 <_scanf_float+0x62>
 8007890:	682b      	ldr	r3, [r5, #0]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	2b4e      	cmp	r3, #78	; 0x4e
 8007896:	d844      	bhi.n	8007922 <_scanf_float+0xde>
 8007898:	0018      	movs	r0, r3
 800789a:	2b40      	cmp	r3, #64	; 0x40
 800789c:	d82c      	bhi.n	80078f8 <_scanf_float+0xb4>
 800789e:	382b      	subs	r0, #43	; 0x2b
 80078a0:	b2c1      	uxtb	r1, r0
 80078a2:	290e      	cmp	r1, #14
 80078a4:	d92a      	bls.n	80078fc <_scanf_float+0xb8>
 80078a6:	9b00      	ldr	r3, [sp, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d003      	beq.n	80078b4 <_scanf_float+0x70>
 80078ac:	6832      	ldr	r2, [r6, #0]
 80078ae:	4ba4      	ldr	r3, [pc, #656]	; (8007b40 <_scanf_float+0x2fc>)
 80078b0:	4013      	ands	r3, r2
 80078b2:	6033      	str	r3, [r6, #0]
 80078b4:	9b02      	ldr	r3, [sp, #8]
 80078b6:	3b01      	subs	r3, #1
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d900      	bls.n	80078be <_scanf_float+0x7a>
 80078bc:	e0f9      	b.n	8007ab2 <_scanf_float+0x26e>
 80078be:	24be      	movs	r4, #190	; 0xbe
 80078c0:	0064      	lsls	r4, r4, #1
 80078c2:	9b03      	ldr	r3, [sp, #12]
 80078c4:	429f      	cmp	r7, r3
 80078c6:	d900      	bls.n	80078ca <_scanf_float+0x86>
 80078c8:	e0e9      	b.n	8007a9e <_scanf_float+0x25a>
 80078ca:	2301      	movs	r3, #1
 80078cc:	9302      	str	r3, [sp, #8]
 80078ce:	e185      	b.n	8007bdc <_scanf_float+0x398>
 80078d0:	0018      	movs	r0, r3
 80078d2:	3861      	subs	r0, #97	; 0x61
 80078d4:	280d      	cmp	r0, #13
 80078d6:	d8e6      	bhi.n	80078a6 <_scanf_float+0x62>
 80078d8:	f7f8 fc28 	bl	800012c <__gnu_thumb1_case_shi>
 80078dc:	ffe50083 	.word	0xffe50083
 80078e0:	ffe5ffe5 	.word	0xffe5ffe5
 80078e4:	00a200b6 	.word	0x00a200b6
 80078e8:	ffe5ffe5 	.word	0xffe5ffe5
 80078ec:	ffe50089 	.word	0xffe50089
 80078f0:	ffe5ffe5 	.word	0xffe5ffe5
 80078f4:	0065ffe5 	.word	0x0065ffe5
 80078f8:	3841      	subs	r0, #65	; 0x41
 80078fa:	e7eb      	b.n	80078d4 <_scanf_float+0x90>
 80078fc:	280e      	cmp	r0, #14
 80078fe:	d8d2      	bhi.n	80078a6 <_scanf_float+0x62>
 8007900:	f7f8 fc14 	bl	800012c <__gnu_thumb1_case_shi>
 8007904:	ffd1004b 	.word	0xffd1004b
 8007908:	0098004b 	.word	0x0098004b
 800790c:	0020ffd1 	.word	0x0020ffd1
 8007910:	00400040 	.word	0x00400040
 8007914:	00400040 	.word	0x00400040
 8007918:	00400040 	.word	0x00400040
 800791c:	00400040 	.word	0x00400040
 8007920:	0040      	.short	0x0040
 8007922:	2b6e      	cmp	r3, #110	; 0x6e
 8007924:	d809      	bhi.n	800793a <_scanf_float+0xf6>
 8007926:	2b60      	cmp	r3, #96	; 0x60
 8007928:	d8d2      	bhi.n	80078d0 <_scanf_float+0x8c>
 800792a:	2b54      	cmp	r3, #84	; 0x54
 800792c:	d07d      	beq.n	8007a2a <_scanf_float+0x1e6>
 800792e:	2b59      	cmp	r3, #89	; 0x59
 8007930:	d1b9      	bne.n	80078a6 <_scanf_float+0x62>
 8007932:	2c07      	cmp	r4, #7
 8007934:	d1b7      	bne.n	80078a6 <_scanf_float+0x62>
 8007936:	2408      	movs	r4, #8
 8007938:	e02c      	b.n	8007994 <_scanf_float+0x150>
 800793a:	2b74      	cmp	r3, #116	; 0x74
 800793c:	d075      	beq.n	8007a2a <_scanf_float+0x1e6>
 800793e:	2b79      	cmp	r3, #121	; 0x79
 8007940:	d0f7      	beq.n	8007932 <_scanf_float+0xee>
 8007942:	e7b0      	b.n	80078a6 <_scanf_float+0x62>
 8007944:	6831      	ldr	r1, [r6, #0]
 8007946:	05c8      	lsls	r0, r1, #23
 8007948:	d51c      	bpl.n	8007984 <_scanf_float+0x140>
 800794a:	2380      	movs	r3, #128	; 0x80
 800794c:	4399      	bics	r1, r3
 800794e:	9b00      	ldr	r3, [sp, #0]
 8007950:	6031      	str	r1, [r6, #0]
 8007952:	3301      	adds	r3, #1
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	9b05      	ldr	r3, [sp, #20]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d003      	beq.n	8007964 <_scanf_float+0x120>
 800795c:	3b01      	subs	r3, #1
 800795e:	3201      	adds	r2, #1
 8007960:	9305      	str	r3, [sp, #20]
 8007962:	60b2      	str	r2, [r6, #8]
 8007964:	68b3      	ldr	r3, [r6, #8]
 8007966:	3b01      	subs	r3, #1
 8007968:	60b3      	str	r3, [r6, #8]
 800796a:	6933      	ldr	r3, [r6, #16]
 800796c:	3301      	adds	r3, #1
 800796e:	6133      	str	r3, [r6, #16]
 8007970:	686b      	ldr	r3, [r5, #4]
 8007972:	3b01      	subs	r3, #1
 8007974:	606b      	str	r3, [r5, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	dc00      	bgt.n	800797c <_scanf_float+0x138>
 800797a:	e086      	b.n	8007a8a <_scanf_float+0x246>
 800797c:	682b      	ldr	r3, [r5, #0]
 800797e:	3301      	adds	r3, #1
 8007980:	602b      	str	r3, [r5, #0]
 8007982:	e782      	b.n	800788a <_scanf_float+0x46>
 8007984:	9a02      	ldr	r2, [sp, #8]
 8007986:	1912      	adds	r2, r2, r4
 8007988:	2a00      	cmp	r2, #0
 800798a:	d18c      	bne.n	80078a6 <_scanf_float+0x62>
 800798c:	4a6d      	ldr	r2, [pc, #436]	; (8007b44 <_scanf_float+0x300>)
 800798e:	6831      	ldr	r1, [r6, #0]
 8007990:	400a      	ands	r2, r1
 8007992:	6032      	str	r2, [r6, #0]
 8007994:	703b      	strb	r3, [r7, #0]
 8007996:	3701      	adds	r7, #1
 8007998:	e7e4      	b.n	8007964 <_scanf_float+0x120>
 800799a:	2180      	movs	r1, #128	; 0x80
 800799c:	6832      	ldr	r2, [r6, #0]
 800799e:	420a      	tst	r2, r1
 80079a0:	d081      	beq.n	80078a6 <_scanf_float+0x62>
 80079a2:	438a      	bics	r2, r1
 80079a4:	e7f5      	b.n	8007992 <_scanf_float+0x14e>
 80079a6:	9a02      	ldr	r2, [sp, #8]
 80079a8:	2a00      	cmp	r2, #0
 80079aa:	d10f      	bne.n	80079cc <_scanf_float+0x188>
 80079ac:	9a00      	ldr	r2, [sp, #0]
 80079ae:	2a00      	cmp	r2, #0
 80079b0:	d10f      	bne.n	80079d2 <_scanf_float+0x18e>
 80079b2:	6832      	ldr	r2, [r6, #0]
 80079b4:	21e0      	movs	r1, #224	; 0xe0
 80079b6:	0010      	movs	r0, r2
 80079b8:	00c9      	lsls	r1, r1, #3
 80079ba:	4008      	ands	r0, r1
 80079bc:	4288      	cmp	r0, r1
 80079be:	d108      	bne.n	80079d2 <_scanf_float+0x18e>
 80079c0:	4961      	ldr	r1, [pc, #388]	; (8007b48 <_scanf_float+0x304>)
 80079c2:	400a      	ands	r2, r1
 80079c4:	6032      	str	r2, [r6, #0]
 80079c6:	2201      	movs	r2, #1
 80079c8:	9202      	str	r2, [sp, #8]
 80079ca:	e7e3      	b.n	8007994 <_scanf_float+0x150>
 80079cc:	9a02      	ldr	r2, [sp, #8]
 80079ce:	2a02      	cmp	r2, #2
 80079d0:	d059      	beq.n	8007a86 <_scanf_float+0x242>
 80079d2:	2c01      	cmp	r4, #1
 80079d4:	d002      	beq.n	80079dc <_scanf_float+0x198>
 80079d6:	2c04      	cmp	r4, #4
 80079d8:	d000      	beq.n	80079dc <_scanf_float+0x198>
 80079da:	e764      	b.n	80078a6 <_scanf_float+0x62>
 80079dc:	3401      	adds	r4, #1
 80079de:	b2e4      	uxtb	r4, r4
 80079e0:	e7d8      	b.n	8007994 <_scanf_float+0x150>
 80079e2:	9a02      	ldr	r2, [sp, #8]
 80079e4:	2a01      	cmp	r2, #1
 80079e6:	d000      	beq.n	80079ea <_scanf_float+0x1a6>
 80079e8:	e75d      	b.n	80078a6 <_scanf_float+0x62>
 80079ea:	2202      	movs	r2, #2
 80079ec:	e7ec      	b.n	80079c8 <_scanf_float+0x184>
 80079ee:	2c00      	cmp	r4, #0
 80079f0:	d110      	bne.n	8007a14 <_scanf_float+0x1d0>
 80079f2:	9a00      	ldr	r2, [sp, #0]
 80079f4:	2a00      	cmp	r2, #0
 80079f6:	d000      	beq.n	80079fa <_scanf_float+0x1b6>
 80079f8:	e758      	b.n	80078ac <_scanf_float+0x68>
 80079fa:	6832      	ldr	r2, [r6, #0]
 80079fc:	21e0      	movs	r1, #224	; 0xe0
 80079fe:	0010      	movs	r0, r2
 8007a00:	00c9      	lsls	r1, r1, #3
 8007a02:	4008      	ands	r0, r1
 8007a04:	4288      	cmp	r0, r1
 8007a06:	d000      	beq.n	8007a0a <_scanf_float+0x1c6>
 8007a08:	e754      	b.n	80078b4 <_scanf_float+0x70>
 8007a0a:	494f      	ldr	r1, [pc, #316]	; (8007b48 <_scanf_float+0x304>)
 8007a0c:	3401      	adds	r4, #1
 8007a0e:	400a      	ands	r2, r1
 8007a10:	6032      	str	r2, [r6, #0]
 8007a12:	e7bf      	b.n	8007994 <_scanf_float+0x150>
 8007a14:	21fd      	movs	r1, #253	; 0xfd
 8007a16:	1ee2      	subs	r2, r4, #3
 8007a18:	420a      	tst	r2, r1
 8007a1a:	d000      	beq.n	8007a1e <_scanf_float+0x1da>
 8007a1c:	e743      	b.n	80078a6 <_scanf_float+0x62>
 8007a1e:	e7dd      	b.n	80079dc <_scanf_float+0x198>
 8007a20:	2c02      	cmp	r4, #2
 8007a22:	d000      	beq.n	8007a26 <_scanf_float+0x1e2>
 8007a24:	e73f      	b.n	80078a6 <_scanf_float+0x62>
 8007a26:	2403      	movs	r4, #3
 8007a28:	e7b4      	b.n	8007994 <_scanf_float+0x150>
 8007a2a:	2c06      	cmp	r4, #6
 8007a2c:	d000      	beq.n	8007a30 <_scanf_float+0x1ec>
 8007a2e:	e73a      	b.n	80078a6 <_scanf_float+0x62>
 8007a30:	2407      	movs	r4, #7
 8007a32:	e7af      	b.n	8007994 <_scanf_float+0x150>
 8007a34:	6832      	ldr	r2, [r6, #0]
 8007a36:	0591      	lsls	r1, r2, #22
 8007a38:	d400      	bmi.n	8007a3c <_scanf_float+0x1f8>
 8007a3a:	e734      	b.n	80078a6 <_scanf_float+0x62>
 8007a3c:	4943      	ldr	r1, [pc, #268]	; (8007b4c <_scanf_float+0x308>)
 8007a3e:	400a      	ands	r2, r1
 8007a40:	6032      	str	r2, [r6, #0]
 8007a42:	9a00      	ldr	r2, [sp, #0]
 8007a44:	9204      	str	r2, [sp, #16]
 8007a46:	e7a5      	b.n	8007994 <_scanf_float+0x150>
 8007a48:	21a0      	movs	r1, #160	; 0xa0
 8007a4a:	2080      	movs	r0, #128	; 0x80
 8007a4c:	6832      	ldr	r2, [r6, #0]
 8007a4e:	00c9      	lsls	r1, r1, #3
 8007a50:	4011      	ands	r1, r2
 8007a52:	00c0      	lsls	r0, r0, #3
 8007a54:	4281      	cmp	r1, r0
 8007a56:	d006      	beq.n	8007a66 <_scanf_float+0x222>
 8007a58:	4202      	tst	r2, r0
 8007a5a:	d100      	bne.n	8007a5e <_scanf_float+0x21a>
 8007a5c:	e723      	b.n	80078a6 <_scanf_float+0x62>
 8007a5e:	9900      	ldr	r1, [sp, #0]
 8007a60:	2900      	cmp	r1, #0
 8007a62:	d100      	bne.n	8007a66 <_scanf_float+0x222>
 8007a64:	e726      	b.n	80078b4 <_scanf_float+0x70>
 8007a66:	0591      	lsls	r1, r2, #22
 8007a68:	d404      	bmi.n	8007a74 <_scanf_float+0x230>
 8007a6a:	9900      	ldr	r1, [sp, #0]
 8007a6c:	9804      	ldr	r0, [sp, #16]
 8007a6e:	9708      	str	r7, [sp, #32]
 8007a70:	1a09      	subs	r1, r1, r0
 8007a72:	9107      	str	r1, [sp, #28]
 8007a74:	4934      	ldr	r1, [pc, #208]	; (8007b48 <_scanf_float+0x304>)
 8007a76:	400a      	ands	r2, r1
 8007a78:	21c0      	movs	r1, #192	; 0xc0
 8007a7a:	0049      	lsls	r1, r1, #1
 8007a7c:	430a      	orrs	r2, r1
 8007a7e:	6032      	str	r2, [r6, #0]
 8007a80:	2200      	movs	r2, #0
 8007a82:	9200      	str	r2, [sp, #0]
 8007a84:	e786      	b.n	8007994 <_scanf_float+0x150>
 8007a86:	2203      	movs	r2, #3
 8007a88:	e79e      	b.n	80079c8 <_scanf_float+0x184>
 8007a8a:	23c0      	movs	r3, #192	; 0xc0
 8007a8c:	005b      	lsls	r3, r3, #1
 8007a8e:	0029      	movs	r1, r5
 8007a90:	58f3      	ldr	r3, [r6, r3]
 8007a92:	9801      	ldr	r0, [sp, #4]
 8007a94:	4798      	blx	r3
 8007a96:	2800      	cmp	r0, #0
 8007a98:	d100      	bne.n	8007a9c <_scanf_float+0x258>
 8007a9a:	e6f6      	b.n	800788a <_scanf_float+0x46>
 8007a9c:	e703      	b.n	80078a6 <_scanf_float+0x62>
 8007a9e:	3f01      	subs	r7, #1
 8007aa0:	5933      	ldr	r3, [r6, r4]
 8007aa2:	002a      	movs	r2, r5
 8007aa4:	7839      	ldrb	r1, [r7, #0]
 8007aa6:	9801      	ldr	r0, [sp, #4]
 8007aa8:	4798      	blx	r3
 8007aaa:	6933      	ldr	r3, [r6, #16]
 8007aac:	3b01      	subs	r3, #1
 8007aae:	6133      	str	r3, [r6, #16]
 8007ab0:	e707      	b.n	80078c2 <_scanf_float+0x7e>
 8007ab2:	1e63      	subs	r3, r4, #1
 8007ab4:	2b06      	cmp	r3, #6
 8007ab6:	d80e      	bhi.n	8007ad6 <_scanf_float+0x292>
 8007ab8:	9702      	str	r7, [sp, #8]
 8007aba:	2c02      	cmp	r4, #2
 8007abc:	d920      	bls.n	8007b00 <_scanf_float+0x2bc>
 8007abe:	1be3      	subs	r3, r4, r7
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	9305      	str	r3, [sp, #20]
 8007ac4:	9b02      	ldr	r3, [sp, #8]
 8007ac6:	9a05      	ldr	r2, [sp, #20]
 8007ac8:	189b      	adds	r3, r3, r2
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	2b03      	cmp	r3, #3
 8007ace:	d827      	bhi.n	8007b20 <_scanf_float+0x2dc>
 8007ad0:	3c03      	subs	r4, #3
 8007ad2:	b2e4      	uxtb	r4, r4
 8007ad4:	1b3f      	subs	r7, r7, r4
 8007ad6:	6833      	ldr	r3, [r6, #0]
 8007ad8:	05da      	lsls	r2, r3, #23
 8007ada:	d554      	bpl.n	8007b86 <_scanf_float+0x342>
 8007adc:	055b      	lsls	r3, r3, #21
 8007ade:	d537      	bpl.n	8007b50 <_scanf_float+0x30c>
 8007ae0:	24be      	movs	r4, #190	; 0xbe
 8007ae2:	0064      	lsls	r4, r4, #1
 8007ae4:	9b03      	ldr	r3, [sp, #12]
 8007ae6:	429f      	cmp	r7, r3
 8007ae8:	d800      	bhi.n	8007aec <_scanf_float+0x2a8>
 8007aea:	e6ee      	b.n	80078ca <_scanf_float+0x86>
 8007aec:	3f01      	subs	r7, #1
 8007aee:	5933      	ldr	r3, [r6, r4]
 8007af0:	002a      	movs	r2, r5
 8007af2:	7839      	ldrb	r1, [r7, #0]
 8007af4:	9801      	ldr	r0, [sp, #4]
 8007af6:	4798      	blx	r3
 8007af8:	6933      	ldr	r3, [r6, #16]
 8007afa:	3b01      	subs	r3, #1
 8007afc:	6133      	str	r3, [r6, #16]
 8007afe:	e7f1      	b.n	8007ae4 <_scanf_float+0x2a0>
 8007b00:	24be      	movs	r4, #190	; 0xbe
 8007b02:	0064      	lsls	r4, r4, #1
 8007b04:	9b03      	ldr	r3, [sp, #12]
 8007b06:	429f      	cmp	r7, r3
 8007b08:	d800      	bhi.n	8007b0c <_scanf_float+0x2c8>
 8007b0a:	e6de      	b.n	80078ca <_scanf_float+0x86>
 8007b0c:	3f01      	subs	r7, #1
 8007b0e:	5933      	ldr	r3, [r6, r4]
 8007b10:	002a      	movs	r2, r5
 8007b12:	7839      	ldrb	r1, [r7, #0]
 8007b14:	9801      	ldr	r0, [sp, #4]
 8007b16:	4798      	blx	r3
 8007b18:	6933      	ldr	r3, [r6, #16]
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	6133      	str	r3, [r6, #16]
 8007b1e:	e7f1      	b.n	8007b04 <_scanf_float+0x2c0>
 8007b20:	9b02      	ldr	r3, [sp, #8]
 8007b22:	002a      	movs	r2, r5
 8007b24:	3b01      	subs	r3, #1
 8007b26:	7819      	ldrb	r1, [r3, #0]
 8007b28:	9302      	str	r3, [sp, #8]
 8007b2a:	23be      	movs	r3, #190	; 0xbe
 8007b2c:	005b      	lsls	r3, r3, #1
 8007b2e:	58f3      	ldr	r3, [r6, r3]
 8007b30:	9801      	ldr	r0, [sp, #4]
 8007b32:	9309      	str	r3, [sp, #36]	; 0x24
 8007b34:	4798      	blx	r3
 8007b36:	6933      	ldr	r3, [r6, #16]
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	6133      	str	r3, [r6, #16]
 8007b3c:	e7c2      	b.n	8007ac4 <_scanf_float+0x280>
 8007b3e:	46c0      	nop			; (mov r8, r8)
 8007b40:	fffffeff 	.word	0xfffffeff
 8007b44:	fffffe7f 	.word	0xfffffe7f
 8007b48:	fffff87f 	.word	0xfffff87f
 8007b4c:	fffffd7f 	.word	0xfffffd7f
 8007b50:	6933      	ldr	r3, [r6, #16]
 8007b52:	1e7c      	subs	r4, r7, #1
 8007b54:	7821      	ldrb	r1, [r4, #0]
 8007b56:	3b01      	subs	r3, #1
 8007b58:	6133      	str	r3, [r6, #16]
 8007b5a:	2965      	cmp	r1, #101	; 0x65
 8007b5c:	d00c      	beq.n	8007b78 <_scanf_float+0x334>
 8007b5e:	2945      	cmp	r1, #69	; 0x45
 8007b60:	d00a      	beq.n	8007b78 <_scanf_float+0x334>
 8007b62:	23be      	movs	r3, #190	; 0xbe
 8007b64:	005b      	lsls	r3, r3, #1
 8007b66:	58f3      	ldr	r3, [r6, r3]
 8007b68:	002a      	movs	r2, r5
 8007b6a:	9801      	ldr	r0, [sp, #4]
 8007b6c:	4798      	blx	r3
 8007b6e:	6933      	ldr	r3, [r6, #16]
 8007b70:	1ebc      	subs	r4, r7, #2
 8007b72:	3b01      	subs	r3, #1
 8007b74:	7821      	ldrb	r1, [r4, #0]
 8007b76:	6133      	str	r3, [r6, #16]
 8007b78:	23be      	movs	r3, #190	; 0xbe
 8007b7a:	005b      	lsls	r3, r3, #1
 8007b7c:	002a      	movs	r2, r5
 8007b7e:	58f3      	ldr	r3, [r6, r3]
 8007b80:	9801      	ldr	r0, [sp, #4]
 8007b82:	4798      	blx	r3
 8007b84:	0027      	movs	r7, r4
 8007b86:	6832      	ldr	r2, [r6, #0]
 8007b88:	2310      	movs	r3, #16
 8007b8a:	0011      	movs	r1, r2
 8007b8c:	4019      	ands	r1, r3
 8007b8e:	9102      	str	r1, [sp, #8]
 8007b90:	421a      	tst	r2, r3
 8007b92:	d158      	bne.n	8007c46 <_scanf_float+0x402>
 8007b94:	23c0      	movs	r3, #192	; 0xc0
 8007b96:	7039      	strb	r1, [r7, #0]
 8007b98:	6832      	ldr	r2, [r6, #0]
 8007b9a:	00db      	lsls	r3, r3, #3
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	2280      	movs	r2, #128	; 0x80
 8007ba0:	00d2      	lsls	r2, r2, #3
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d11d      	bne.n	8007be2 <_scanf_float+0x39e>
 8007ba6:	9b04      	ldr	r3, [sp, #16]
 8007ba8:	9a00      	ldr	r2, [sp, #0]
 8007baa:	9900      	ldr	r1, [sp, #0]
 8007bac:	1a9a      	subs	r2, r3, r2
 8007bae:	428b      	cmp	r3, r1
 8007bb0:	d124      	bne.n	8007bfc <_scanf_float+0x3b8>
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	9903      	ldr	r1, [sp, #12]
 8007bb6:	9801      	ldr	r0, [sp, #4]
 8007bb8:	f000 ff12 	bl	80089e0 <_strtod_r>
 8007bbc:	9b06      	ldr	r3, [sp, #24]
 8007bbe:	000d      	movs	r5, r1
 8007bc0:	6831      	ldr	r1, [r6, #0]
 8007bc2:	0004      	movs	r4, r0
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	078a      	lsls	r2, r1, #30
 8007bc8:	d525      	bpl.n	8007c16 <_scanf_float+0x3d2>
 8007bca:	1d1a      	adds	r2, r3, #4
 8007bcc:	9906      	ldr	r1, [sp, #24]
 8007bce:	600a      	str	r2, [r1, #0]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	601c      	str	r4, [r3, #0]
 8007bd4:	605d      	str	r5, [r3, #4]
 8007bd6:	68f3      	ldr	r3, [r6, #12]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	60f3      	str	r3, [r6, #12]
 8007bdc:	9802      	ldr	r0, [sp, #8]
 8007bde:	b00b      	add	sp, #44	; 0x2c
 8007be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007be2:	9b07      	ldr	r3, [sp, #28]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d0e4      	beq.n	8007bb2 <_scanf_float+0x36e>
 8007be8:	9b08      	ldr	r3, [sp, #32]
 8007bea:	9a02      	ldr	r2, [sp, #8]
 8007bec:	1c59      	adds	r1, r3, #1
 8007bee:	9801      	ldr	r0, [sp, #4]
 8007bf0:	230a      	movs	r3, #10
 8007bf2:	f000 ff8b 	bl	8008b0c <_strtol_r>
 8007bf6:	9b07      	ldr	r3, [sp, #28]
 8007bf8:	9f08      	ldr	r7, [sp, #32]
 8007bfa:	1ac2      	subs	r2, r0, r3
 8007bfc:	0033      	movs	r3, r6
 8007bfe:	3370      	adds	r3, #112	; 0x70
 8007c00:	33ff      	adds	r3, #255	; 0xff
 8007c02:	429f      	cmp	r7, r3
 8007c04:	d302      	bcc.n	8007c0c <_scanf_float+0x3c8>
 8007c06:	0037      	movs	r7, r6
 8007c08:	376f      	adds	r7, #111	; 0x6f
 8007c0a:	37ff      	adds	r7, #255	; 0xff
 8007c0c:	0038      	movs	r0, r7
 8007c0e:	490f      	ldr	r1, [pc, #60]	; (8007c4c <_scanf_float+0x408>)
 8007c10:	f000 f824 	bl	8007c5c <siprintf>
 8007c14:	e7cd      	b.n	8007bb2 <_scanf_float+0x36e>
 8007c16:	1d1a      	adds	r2, r3, #4
 8007c18:	0749      	lsls	r1, r1, #29
 8007c1a:	d4d7      	bmi.n	8007bcc <_scanf_float+0x388>
 8007c1c:	9906      	ldr	r1, [sp, #24]
 8007c1e:	0020      	movs	r0, r4
 8007c20:	600a      	str	r2, [r1, #0]
 8007c22:	681f      	ldr	r7, [r3, #0]
 8007c24:	0022      	movs	r2, r4
 8007c26:	002b      	movs	r3, r5
 8007c28:	0029      	movs	r1, r5
 8007c2a:	f7fa fcbf 	bl	80025ac <__aeabi_dcmpun>
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	d004      	beq.n	8007c3c <_scanf_float+0x3f8>
 8007c32:	4807      	ldr	r0, [pc, #28]	; (8007c50 <_scanf_float+0x40c>)
 8007c34:	f000 f80e 	bl	8007c54 <nanf>
 8007c38:	6038      	str	r0, [r7, #0]
 8007c3a:	e7cc      	b.n	8007bd6 <_scanf_float+0x392>
 8007c3c:	0020      	movs	r0, r4
 8007c3e:	0029      	movs	r1, r5
 8007c40:	f7fa fda6 	bl	8002790 <__aeabi_d2f>
 8007c44:	e7f8      	b.n	8007c38 <_scanf_float+0x3f4>
 8007c46:	2300      	movs	r3, #0
 8007c48:	e640      	b.n	80078cc <_scanf_float+0x88>
 8007c4a:	46c0      	nop			; (mov r8, r8)
 8007c4c:	0800c436 	.word	0x0800c436
 8007c50:	0800c85b 	.word	0x0800c85b

08007c54 <nanf>:
 8007c54:	4800      	ldr	r0, [pc, #0]	; (8007c58 <nanf+0x4>)
 8007c56:	4770      	bx	lr
 8007c58:	7fc00000 	.word	0x7fc00000

08007c5c <siprintf>:
 8007c5c:	b40e      	push	{r1, r2, r3}
 8007c5e:	b500      	push	{lr}
 8007c60:	490b      	ldr	r1, [pc, #44]	; (8007c90 <siprintf+0x34>)
 8007c62:	b09c      	sub	sp, #112	; 0x70
 8007c64:	ab1d      	add	r3, sp, #116	; 0x74
 8007c66:	9002      	str	r0, [sp, #8]
 8007c68:	9006      	str	r0, [sp, #24]
 8007c6a:	9107      	str	r1, [sp, #28]
 8007c6c:	9104      	str	r1, [sp, #16]
 8007c6e:	4809      	ldr	r0, [pc, #36]	; (8007c94 <siprintf+0x38>)
 8007c70:	4909      	ldr	r1, [pc, #36]	; (8007c98 <siprintf+0x3c>)
 8007c72:	cb04      	ldmia	r3!, {r2}
 8007c74:	9105      	str	r1, [sp, #20]
 8007c76:	6800      	ldr	r0, [r0, #0]
 8007c78:	a902      	add	r1, sp, #8
 8007c7a:	9301      	str	r3, [sp, #4]
 8007c7c:	f003 f80c 	bl	800ac98 <_svfiprintf_r>
 8007c80:	2300      	movs	r3, #0
 8007c82:	9a02      	ldr	r2, [sp, #8]
 8007c84:	7013      	strb	r3, [r2, #0]
 8007c86:	b01c      	add	sp, #112	; 0x70
 8007c88:	bc08      	pop	{r3}
 8007c8a:	b003      	add	sp, #12
 8007c8c:	4718      	bx	r3
 8007c8e:	46c0      	nop			; (mov r8, r8)
 8007c90:	7fffffff 	.word	0x7fffffff
 8007c94:	20000014 	.word	0x20000014
 8007c98:	ffff0208 	.word	0xffff0208

08007c9c <siscanf>:
 8007c9c:	b40e      	push	{r1, r2, r3}
 8007c9e:	b530      	push	{r4, r5, lr}
 8007ca0:	2381      	movs	r3, #129	; 0x81
 8007ca2:	b09c      	sub	sp, #112	; 0x70
 8007ca4:	466a      	mov	r2, sp
 8007ca6:	ac1f      	add	r4, sp, #124	; 0x7c
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	cc20      	ldmia	r4!, {r5}
 8007cac:	8293      	strh	r3, [r2, #20]
 8007cae:	9002      	str	r0, [sp, #8]
 8007cb0:	9006      	str	r0, [sp, #24]
 8007cb2:	f7f8 fa29 	bl	8000108 <strlen>
 8007cb6:	4b0b      	ldr	r3, [pc, #44]	; (8007ce4 <siscanf+0x48>)
 8007cb8:	466a      	mov	r2, sp
 8007cba:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	9003      	str	r0, [sp, #12]
 8007cc0:	9007      	str	r0, [sp, #28]
 8007cc2:	4809      	ldr	r0, [pc, #36]	; (8007ce8 <siscanf+0x4c>)
 8007cc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cc6:	9314      	str	r3, [sp, #80]	; 0x50
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	82d3      	strh	r3, [r2, #22]
 8007ccc:	a902      	add	r1, sp, #8
 8007cce:	0023      	movs	r3, r4
 8007cd0:	002a      	movs	r2, r5
 8007cd2:	6800      	ldr	r0, [r0, #0]
 8007cd4:	9401      	str	r4, [sp, #4]
 8007cd6:	f003 f93b 	bl	800af50 <__ssvfiscanf_r>
 8007cda:	b01c      	add	sp, #112	; 0x70
 8007cdc:	bc30      	pop	{r4, r5}
 8007cde:	bc08      	pop	{r3}
 8007ce0:	b003      	add	sp, #12
 8007ce2:	4718      	bx	r3
 8007ce4:	08007d15 	.word	0x08007d15
 8007ce8:	20000014 	.word	0x20000014

08007cec <__sread>:
 8007cec:	b570      	push	{r4, r5, r6, lr}
 8007cee:	000c      	movs	r4, r1
 8007cf0:	250e      	movs	r5, #14
 8007cf2:	5f49      	ldrsh	r1, [r1, r5]
 8007cf4:	f003 fc0c 	bl	800b510 <_read_r>
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	db03      	blt.n	8007d04 <__sread+0x18>
 8007cfc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007cfe:	181b      	adds	r3, r3, r0
 8007d00:	6563      	str	r3, [r4, #84]	; 0x54
 8007d02:	bd70      	pop	{r4, r5, r6, pc}
 8007d04:	89a3      	ldrh	r3, [r4, #12]
 8007d06:	4a02      	ldr	r2, [pc, #8]	; (8007d10 <__sread+0x24>)
 8007d08:	4013      	ands	r3, r2
 8007d0a:	81a3      	strh	r3, [r4, #12]
 8007d0c:	e7f9      	b.n	8007d02 <__sread+0x16>
 8007d0e:	46c0      	nop			; (mov r8, r8)
 8007d10:	ffffefff 	.word	0xffffefff

08007d14 <__seofread>:
 8007d14:	2000      	movs	r0, #0
 8007d16:	4770      	bx	lr

08007d18 <__swrite>:
 8007d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d1a:	001f      	movs	r7, r3
 8007d1c:	898b      	ldrh	r3, [r1, #12]
 8007d1e:	0005      	movs	r5, r0
 8007d20:	000c      	movs	r4, r1
 8007d22:	0016      	movs	r6, r2
 8007d24:	05db      	lsls	r3, r3, #23
 8007d26:	d505      	bpl.n	8007d34 <__swrite+0x1c>
 8007d28:	230e      	movs	r3, #14
 8007d2a:	5ec9      	ldrsh	r1, [r1, r3]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	2302      	movs	r3, #2
 8007d30:	f002 f934 	bl	8009f9c <_lseek_r>
 8007d34:	89a3      	ldrh	r3, [r4, #12]
 8007d36:	4a05      	ldr	r2, [pc, #20]	; (8007d4c <__swrite+0x34>)
 8007d38:	0028      	movs	r0, r5
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	81a3      	strh	r3, [r4, #12]
 8007d3e:	0032      	movs	r2, r6
 8007d40:	230e      	movs	r3, #14
 8007d42:	5ee1      	ldrsh	r1, [r4, r3]
 8007d44:	003b      	movs	r3, r7
 8007d46:	f000 fee5 	bl	8008b14 <_write_r>
 8007d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d4c:	ffffefff 	.word	0xffffefff

08007d50 <__sseek>:
 8007d50:	b570      	push	{r4, r5, r6, lr}
 8007d52:	000c      	movs	r4, r1
 8007d54:	250e      	movs	r5, #14
 8007d56:	5f49      	ldrsh	r1, [r1, r5]
 8007d58:	f002 f920 	bl	8009f9c <_lseek_r>
 8007d5c:	89a3      	ldrh	r3, [r4, #12]
 8007d5e:	1c42      	adds	r2, r0, #1
 8007d60:	d103      	bne.n	8007d6a <__sseek+0x1a>
 8007d62:	4a05      	ldr	r2, [pc, #20]	; (8007d78 <__sseek+0x28>)
 8007d64:	4013      	ands	r3, r2
 8007d66:	81a3      	strh	r3, [r4, #12]
 8007d68:	bd70      	pop	{r4, r5, r6, pc}
 8007d6a:	2280      	movs	r2, #128	; 0x80
 8007d6c:	0152      	lsls	r2, r2, #5
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	81a3      	strh	r3, [r4, #12]
 8007d72:	6560      	str	r0, [r4, #84]	; 0x54
 8007d74:	e7f8      	b.n	8007d68 <__sseek+0x18>
 8007d76:	46c0      	nop			; (mov r8, r8)
 8007d78:	ffffefff 	.word	0xffffefff

08007d7c <__sclose>:
 8007d7c:	b510      	push	{r4, lr}
 8007d7e:	230e      	movs	r3, #14
 8007d80:	5ec9      	ldrsh	r1, [r1, r3]
 8007d82:	f000 fedb 	bl	8008b3c <_close_r>
 8007d86:	bd10      	pop	{r4, pc}

08007d88 <sulp>:
 8007d88:	b570      	push	{r4, r5, r6, lr}
 8007d8a:	0016      	movs	r6, r2
 8007d8c:	000d      	movs	r5, r1
 8007d8e:	f002 fccd 	bl	800a72c <__ulp>
 8007d92:	2e00      	cmp	r6, #0
 8007d94:	d00d      	beq.n	8007db2 <sulp+0x2a>
 8007d96:	236b      	movs	r3, #107	; 0x6b
 8007d98:	006a      	lsls	r2, r5, #1
 8007d9a:	0d52      	lsrs	r2, r2, #21
 8007d9c:	1a9b      	subs	r3, r3, r2
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	dd07      	ble.n	8007db2 <sulp+0x2a>
 8007da2:	2400      	movs	r4, #0
 8007da4:	4a03      	ldr	r2, [pc, #12]	; (8007db4 <sulp+0x2c>)
 8007da6:	051b      	lsls	r3, r3, #20
 8007da8:	189d      	adds	r5, r3, r2
 8007daa:	002b      	movs	r3, r5
 8007dac:	0022      	movs	r2, r4
 8007dae:	f7f9 fdff 	bl	80019b0 <__aeabi_dmul>
 8007db2:	bd70      	pop	{r4, r5, r6, pc}
 8007db4:	3ff00000 	.word	0x3ff00000

08007db8 <_strtod_l>:
 8007db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dba:	001d      	movs	r5, r3
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	b0a5      	sub	sp, #148	; 0x94
 8007dc0:	9320      	str	r3, [sp, #128]	; 0x80
 8007dc2:	4bac      	ldr	r3, [pc, #688]	; (8008074 <_strtod_l+0x2bc>)
 8007dc4:	9005      	str	r0, [sp, #20]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	9108      	str	r1, [sp, #32]
 8007dca:	0018      	movs	r0, r3
 8007dcc:	9307      	str	r3, [sp, #28]
 8007dce:	921b      	str	r2, [sp, #108]	; 0x6c
 8007dd0:	f7f8 f99a 	bl	8000108 <strlen>
 8007dd4:	2600      	movs	r6, #0
 8007dd6:	0004      	movs	r4, r0
 8007dd8:	2700      	movs	r7, #0
 8007dda:	9b08      	ldr	r3, [sp, #32]
 8007ddc:	931f      	str	r3, [sp, #124]	; 0x7c
 8007dde:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007de0:	7813      	ldrb	r3, [r2, #0]
 8007de2:	2b2b      	cmp	r3, #43	; 0x2b
 8007de4:	d058      	beq.n	8007e98 <_strtod_l+0xe0>
 8007de6:	d844      	bhi.n	8007e72 <_strtod_l+0xba>
 8007de8:	2b0d      	cmp	r3, #13
 8007dea:	d83d      	bhi.n	8007e68 <_strtod_l+0xb0>
 8007dec:	2b08      	cmp	r3, #8
 8007dee:	d83d      	bhi.n	8007e6c <_strtod_l+0xb4>
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d047      	beq.n	8007e84 <_strtod_l+0xcc>
 8007df4:	2300      	movs	r3, #0
 8007df6:	930e      	str	r3, [sp, #56]	; 0x38
 8007df8:	2200      	movs	r2, #0
 8007dfa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007dfc:	920a      	str	r2, [sp, #40]	; 0x28
 8007dfe:	9306      	str	r3, [sp, #24]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	2b30      	cmp	r3, #48	; 0x30
 8007e04:	d000      	beq.n	8007e08 <_strtod_l+0x50>
 8007e06:	e07f      	b.n	8007f08 <_strtod_l+0x150>
 8007e08:	9b06      	ldr	r3, [sp, #24]
 8007e0a:	3220      	adds	r2, #32
 8007e0c:	785b      	ldrb	r3, [r3, #1]
 8007e0e:	4393      	bics	r3, r2
 8007e10:	2b58      	cmp	r3, #88	; 0x58
 8007e12:	d000      	beq.n	8007e16 <_strtod_l+0x5e>
 8007e14:	e06e      	b.n	8007ef4 <_strtod_l+0x13c>
 8007e16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e18:	9502      	str	r5, [sp, #8]
 8007e1a:	9301      	str	r3, [sp, #4]
 8007e1c:	ab20      	add	r3, sp, #128	; 0x80
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	4a95      	ldr	r2, [pc, #596]	; (8008078 <_strtod_l+0x2c0>)
 8007e22:	ab21      	add	r3, sp, #132	; 0x84
 8007e24:	9805      	ldr	r0, [sp, #20]
 8007e26:	a91f      	add	r1, sp, #124	; 0x7c
 8007e28:	f001 fdaa 	bl	8009980 <__gethex>
 8007e2c:	2307      	movs	r3, #7
 8007e2e:	0005      	movs	r5, r0
 8007e30:	0004      	movs	r4, r0
 8007e32:	401d      	ands	r5, r3
 8007e34:	4218      	tst	r0, r3
 8007e36:	d006      	beq.n	8007e46 <_strtod_l+0x8e>
 8007e38:	2d06      	cmp	r5, #6
 8007e3a:	d12f      	bne.n	8007e9c <_strtod_l+0xe4>
 8007e3c:	9b06      	ldr	r3, [sp, #24]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	931f      	str	r3, [sp, #124]	; 0x7c
 8007e42:	2300      	movs	r3, #0
 8007e44:	930e      	str	r3, [sp, #56]	; 0x38
 8007e46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d002      	beq.n	8007e52 <_strtod_l+0x9a>
 8007e4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e4e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007e50:	601a      	str	r2, [r3, #0]
 8007e52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d01c      	beq.n	8007e92 <_strtod_l+0xda>
 8007e58:	2380      	movs	r3, #128	; 0x80
 8007e5a:	0032      	movs	r2, r6
 8007e5c:	061b      	lsls	r3, r3, #24
 8007e5e:	18fb      	adds	r3, r7, r3
 8007e60:	0010      	movs	r0, r2
 8007e62:	0019      	movs	r1, r3
 8007e64:	b025      	add	sp, #148	; 0x94
 8007e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e68:	2b20      	cmp	r3, #32
 8007e6a:	d1c3      	bne.n	8007df4 <_strtod_l+0x3c>
 8007e6c:	3201      	adds	r2, #1
 8007e6e:	921f      	str	r2, [sp, #124]	; 0x7c
 8007e70:	e7b5      	b.n	8007dde <_strtod_l+0x26>
 8007e72:	2b2d      	cmp	r3, #45	; 0x2d
 8007e74:	d1be      	bne.n	8007df4 <_strtod_l+0x3c>
 8007e76:	3b2c      	subs	r3, #44	; 0x2c
 8007e78:	930e      	str	r3, [sp, #56]	; 0x38
 8007e7a:	1c53      	adds	r3, r2, #1
 8007e7c:	931f      	str	r3, [sp, #124]	; 0x7c
 8007e7e:	7853      	ldrb	r3, [r2, #1]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1b9      	bne.n	8007df8 <_strtod_l+0x40>
 8007e84:	9b08      	ldr	r3, [sp, #32]
 8007e86:	931f      	str	r3, [sp, #124]	; 0x7c
 8007e88:	2300      	movs	r3, #0
 8007e8a:	930e      	str	r3, [sp, #56]	; 0x38
 8007e8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d1dc      	bne.n	8007e4c <_strtod_l+0x94>
 8007e92:	0032      	movs	r2, r6
 8007e94:	003b      	movs	r3, r7
 8007e96:	e7e3      	b.n	8007e60 <_strtod_l+0xa8>
 8007e98:	2300      	movs	r3, #0
 8007e9a:	e7ed      	b.n	8007e78 <_strtod_l+0xc0>
 8007e9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007e9e:	2a00      	cmp	r2, #0
 8007ea0:	d007      	beq.n	8007eb2 <_strtod_l+0xfa>
 8007ea2:	2135      	movs	r1, #53	; 0x35
 8007ea4:	a822      	add	r0, sp, #136	; 0x88
 8007ea6:	f002 fd42 	bl	800a92e <__copybits>
 8007eaa:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007eac:	9805      	ldr	r0, [sp, #20]
 8007eae:	f002 f8fd 	bl	800a0ac <_Bfree>
 8007eb2:	1e68      	subs	r0, r5, #1
 8007eb4:	2804      	cmp	r0, #4
 8007eb6:	d806      	bhi.n	8007ec6 <_strtod_l+0x10e>
 8007eb8:	f7f8 f92e 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007ebc:	1816030b 	.word	0x1816030b
 8007ec0:	0b          	.byte	0x0b
 8007ec1:	00          	.byte	0x00
 8007ec2:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8007ec4:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8007ec6:	0723      	lsls	r3, r4, #28
 8007ec8:	d5bd      	bpl.n	8007e46 <_strtod_l+0x8e>
 8007eca:	2380      	movs	r3, #128	; 0x80
 8007ecc:	061b      	lsls	r3, r3, #24
 8007ece:	431f      	orrs	r7, r3
 8007ed0:	e7b9      	b.n	8007e46 <_strtod_l+0x8e>
 8007ed2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ed4:	4a69      	ldr	r2, [pc, #420]	; (800807c <_strtod_l+0x2c4>)
 8007ed6:	496a      	ldr	r1, [pc, #424]	; (8008080 <_strtod_l+0x2c8>)
 8007ed8:	401a      	ands	r2, r3
 8007eda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007edc:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8007ede:	185b      	adds	r3, r3, r1
 8007ee0:	051b      	lsls	r3, r3, #20
 8007ee2:	431a      	orrs	r2, r3
 8007ee4:	0017      	movs	r7, r2
 8007ee6:	e7ee      	b.n	8007ec6 <_strtod_l+0x10e>
 8007ee8:	4f66      	ldr	r7, [pc, #408]	; (8008084 <_strtod_l+0x2cc>)
 8007eea:	e7ec      	b.n	8007ec6 <_strtod_l+0x10e>
 8007eec:	2601      	movs	r6, #1
 8007eee:	4f66      	ldr	r7, [pc, #408]	; (8008088 <_strtod_l+0x2d0>)
 8007ef0:	4276      	negs	r6, r6
 8007ef2:	e7e8      	b.n	8007ec6 <_strtod_l+0x10e>
 8007ef4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007ef6:	1c5a      	adds	r2, r3, #1
 8007ef8:	921f      	str	r2, [sp, #124]	; 0x7c
 8007efa:	785b      	ldrb	r3, [r3, #1]
 8007efc:	2b30      	cmp	r3, #48	; 0x30
 8007efe:	d0f9      	beq.n	8007ef4 <_strtod_l+0x13c>
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d0a0      	beq.n	8007e46 <_strtod_l+0x8e>
 8007f04:	2301      	movs	r3, #1
 8007f06:	930a      	str	r3, [sp, #40]	; 0x28
 8007f08:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007f0a:	220a      	movs	r2, #10
 8007f0c:	9310      	str	r3, [sp, #64]	; 0x40
 8007f0e:	2300      	movs	r3, #0
 8007f10:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f12:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f14:	9309      	str	r3, [sp, #36]	; 0x24
 8007f16:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8007f18:	7805      	ldrb	r5, [r0, #0]
 8007f1a:	002b      	movs	r3, r5
 8007f1c:	3b30      	subs	r3, #48	; 0x30
 8007f1e:	b2d9      	uxtb	r1, r3
 8007f20:	2909      	cmp	r1, #9
 8007f22:	d927      	bls.n	8007f74 <_strtod_l+0x1bc>
 8007f24:	0022      	movs	r2, r4
 8007f26:	9907      	ldr	r1, [sp, #28]
 8007f28:	f003 fb5a 	bl	800b5e0 <strncmp>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	d033      	beq.n	8007f98 <_strtod_l+0x1e0>
 8007f30:	2000      	movs	r0, #0
 8007f32:	002b      	movs	r3, r5
 8007f34:	4684      	mov	ip, r0
 8007f36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f38:	900c      	str	r0, [sp, #48]	; 0x30
 8007f3a:	9206      	str	r2, [sp, #24]
 8007f3c:	2220      	movs	r2, #32
 8007f3e:	0019      	movs	r1, r3
 8007f40:	4391      	bics	r1, r2
 8007f42:	000a      	movs	r2, r1
 8007f44:	2100      	movs	r1, #0
 8007f46:	9107      	str	r1, [sp, #28]
 8007f48:	2a45      	cmp	r2, #69	; 0x45
 8007f4a:	d000      	beq.n	8007f4e <_strtod_l+0x196>
 8007f4c:	e0c5      	b.n	80080da <_strtod_l+0x322>
 8007f4e:	9b06      	ldr	r3, [sp, #24]
 8007f50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f52:	4303      	orrs	r3, r0
 8007f54:	4313      	orrs	r3, r2
 8007f56:	428b      	cmp	r3, r1
 8007f58:	d094      	beq.n	8007e84 <_strtod_l+0xcc>
 8007f5a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007f5c:	9308      	str	r3, [sp, #32]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	931f      	str	r3, [sp, #124]	; 0x7c
 8007f62:	9b08      	ldr	r3, [sp, #32]
 8007f64:	785b      	ldrb	r3, [r3, #1]
 8007f66:	2b2b      	cmp	r3, #43	; 0x2b
 8007f68:	d076      	beq.n	8008058 <_strtod_l+0x2a0>
 8007f6a:	000c      	movs	r4, r1
 8007f6c:	2b2d      	cmp	r3, #45	; 0x2d
 8007f6e:	d179      	bne.n	8008064 <_strtod_l+0x2ac>
 8007f70:	2401      	movs	r4, #1
 8007f72:	e072      	b.n	800805a <_strtod_l+0x2a2>
 8007f74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f76:	2908      	cmp	r1, #8
 8007f78:	dc09      	bgt.n	8007f8e <_strtod_l+0x1d6>
 8007f7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f7c:	4351      	muls	r1, r2
 8007f7e:	185b      	adds	r3, r3, r1
 8007f80:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f84:	3001      	adds	r0, #1
 8007f86:	3301      	adds	r3, #1
 8007f88:	9309      	str	r3, [sp, #36]	; 0x24
 8007f8a:	901f      	str	r0, [sp, #124]	; 0x7c
 8007f8c:	e7c3      	b.n	8007f16 <_strtod_l+0x15e>
 8007f8e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007f90:	4351      	muls	r1, r2
 8007f92:	185b      	adds	r3, r3, r1
 8007f94:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f96:	e7f4      	b.n	8007f82 <_strtod_l+0x1ca>
 8007f98:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007f9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f9c:	191c      	adds	r4, r3, r4
 8007f9e:	941f      	str	r4, [sp, #124]	; 0x7c
 8007fa0:	7823      	ldrb	r3, [r4, #0]
 8007fa2:	2a00      	cmp	r2, #0
 8007fa4:	d039      	beq.n	800801a <_strtod_l+0x262>
 8007fa6:	900c      	str	r0, [sp, #48]	; 0x30
 8007fa8:	9206      	str	r2, [sp, #24]
 8007faa:	001a      	movs	r2, r3
 8007fac:	3a30      	subs	r2, #48	; 0x30
 8007fae:	2a09      	cmp	r2, #9
 8007fb0:	d912      	bls.n	8007fd8 <_strtod_l+0x220>
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	4694      	mov	ip, r2
 8007fb6:	e7c1      	b.n	8007f3c <_strtod_l+0x184>
 8007fb8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007fba:	3001      	adds	r0, #1
 8007fbc:	1c5a      	adds	r2, r3, #1
 8007fbe:	921f      	str	r2, [sp, #124]	; 0x7c
 8007fc0:	785b      	ldrb	r3, [r3, #1]
 8007fc2:	2b30      	cmp	r3, #48	; 0x30
 8007fc4:	d0f8      	beq.n	8007fb8 <_strtod_l+0x200>
 8007fc6:	001a      	movs	r2, r3
 8007fc8:	3a31      	subs	r2, #49	; 0x31
 8007fca:	2a08      	cmp	r2, #8
 8007fcc:	d83f      	bhi.n	800804e <_strtod_l+0x296>
 8007fce:	900c      	str	r0, [sp, #48]	; 0x30
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007fd4:	9006      	str	r0, [sp, #24]
 8007fd6:	9210      	str	r2, [sp, #64]	; 0x40
 8007fd8:	001a      	movs	r2, r3
 8007fda:	1c41      	adds	r1, r0, #1
 8007fdc:	3a30      	subs	r2, #48	; 0x30
 8007fde:	2b30      	cmp	r3, #48	; 0x30
 8007fe0:	d015      	beq.n	800800e <_strtod_l+0x256>
 8007fe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fe4:	185b      	adds	r3, r3, r1
 8007fe6:	210a      	movs	r1, #10
 8007fe8:	930c      	str	r3, [sp, #48]	; 0x30
 8007fea:	9b06      	ldr	r3, [sp, #24]
 8007fec:	18c4      	adds	r4, r0, r3
 8007fee:	42a3      	cmp	r3, r4
 8007ff0:	d115      	bne.n	800801e <_strtod_l+0x266>
 8007ff2:	9906      	ldr	r1, [sp, #24]
 8007ff4:	9b06      	ldr	r3, [sp, #24]
 8007ff6:	3101      	adds	r1, #1
 8007ff8:	1809      	adds	r1, r1, r0
 8007ffa:	181b      	adds	r3, r3, r0
 8007ffc:	9106      	str	r1, [sp, #24]
 8007ffe:	2b08      	cmp	r3, #8
 8008000:	dc1b      	bgt.n	800803a <_strtod_l+0x282>
 8008002:	230a      	movs	r3, #10
 8008004:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008006:	434b      	muls	r3, r1
 8008008:	2100      	movs	r1, #0
 800800a:	18d3      	adds	r3, r2, r3
 800800c:	930b      	str	r3, [sp, #44]	; 0x2c
 800800e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008010:	0008      	movs	r0, r1
 8008012:	1c5a      	adds	r2, r3, #1
 8008014:	921f      	str	r2, [sp, #124]	; 0x7c
 8008016:	785b      	ldrb	r3, [r3, #1]
 8008018:	e7c7      	b.n	8007faa <_strtod_l+0x1f2>
 800801a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800801c:	e7d1      	b.n	8007fc2 <_strtod_l+0x20a>
 800801e:	2b08      	cmp	r3, #8
 8008020:	dc04      	bgt.n	800802c <_strtod_l+0x274>
 8008022:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008024:	434d      	muls	r5, r1
 8008026:	950b      	str	r5, [sp, #44]	; 0x2c
 8008028:	3301      	adds	r3, #1
 800802a:	e7e0      	b.n	8007fee <_strtod_l+0x236>
 800802c:	1c5d      	adds	r5, r3, #1
 800802e:	2d10      	cmp	r5, #16
 8008030:	dcfa      	bgt.n	8008028 <_strtod_l+0x270>
 8008032:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008034:	434d      	muls	r5, r1
 8008036:	950f      	str	r5, [sp, #60]	; 0x3c
 8008038:	e7f6      	b.n	8008028 <_strtod_l+0x270>
 800803a:	9b06      	ldr	r3, [sp, #24]
 800803c:	2100      	movs	r1, #0
 800803e:	2b10      	cmp	r3, #16
 8008040:	dce5      	bgt.n	800800e <_strtod_l+0x256>
 8008042:	230a      	movs	r3, #10
 8008044:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008046:	4343      	muls	r3, r0
 8008048:	18d3      	adds	r3, r2, r3
 800804a:	930f      	str	r3, [sp, #60]	; 0x3c
 800804c:	e7df      	b.n	800800e <_strtod_l+0x256>
 800804e:	2200      	movs	r2, #0
 8008050:	920c      	str	r2, [sp, #48]	; 0x30
 8008052:	9206      	str	r2, [sp, #24]
 8008054:	3201      	adds	r2, #1
 8008056:	e7ad      	b.n	8007fb4 <_strtod_l+0x1fc>
 8008058:	2400      	movs	r4, #0
 800805a:	9b08      	ldr	r3, [sp, #32]
 800805c:	3302      	adds	r3, #2
 800805e:	931f      	str	r3, [sp, #124]	; 0x7c
 8008060:	9b08      	ldr	r3, [sp, #32]
 8008062:	789b      	ldrb	r3, [r3, #2]
 8008064:	001a      	movs	r2, r3
 8008066:	3a30      	subs	r2, #48	; 0x30
 8008068:	2a09      	cmp	r2, #9
 800806a:	d913      	bls.n	8008094 <_strtod_l+0x2dc>
 800806c:	9a08      	ldr	r2, [sp, #32]
 800806e:	921f      	str	r2, [sp, #124]	; 0x7c
 8008070:	2200      	movs	r2, #0
 8008072:	e031      	b.n	80080d8 <_strtod_l+0x320>
 8008074:	0800c688 	.word	0x0800c688
 8008078:	0800c43c 	.word	0x0800c43c
 800807c:	ffefffff 	.word	0xffefffff
 8008080:	00000433 	.word	0x00000433
 8008084:	7ff00000 	.word	0x7ff00000
 8008088:	7fffffff 	.word	0x7fffffff
 800808c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800808e:	1c5a      	adds	r2, r3, #1
 8008090:	921f      	str	r2, [sp, #124]	; 0x7c
 8008092:	785b      	ldrb	r3, [r3, #1]
 8008094:	2b30      	cmp	r3, #48	; 0x30
 8008096:	d0f9      	beq.n	800808c <_strtod_l+0x2d4>
 8008098:	2200      	movs	r2, #0
 800809a:	9207      	str	r2, [sp, #28]
 800809c:	001a      	movs	r2, r3
 800809e:	3a31      	subs	r2, #49	; 0x31
 80080a0:	2a08      	cmp	r2, #8
 80080a2:	d81a      	bhi.n	80080da <_strtod_l+0x322>
 80080a4:	3b30      	subs	r3, #48	; 0x30
 80080a6:	001a      	movs	r2, r3
 80080a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80080aa:	9307      	str	r3, [sp, #28]
 80080ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80080ae:	1c59      	adds	r1, r3, #1
 80080b0:	911f      	str	r1, [sp, #124]	; 0x7c
 80080b2:	785b      	ldrb	r3, [r3, #1]
 80080b4:	001d      	movs	r5, r3
 80080b6:	3d30      	subs	r5, #48	; 0x30
 80080b8:	2d09      	cmp	r5, #9
 80080ba:	d939      	bls.n	8008130 <_strtod_l+0x378>
 80080bc:	9d07      	ldr	r5, [sp, #28]
 80080be:	1b49      	subs	r1, r1, r5
 80080c0:	4db0      	ldr	r5, [pc, #704]	; (8008384 <_strtod_l+0x5cc>)
 80080c2:	9507      	str	r5, [sp, #28]
 80080c4:	2908      	cmp	r1, #8
 80080c6:	dc03      	bgt.n	80080d0 <_strtod_l+0x318>
 80080c8:	9207      	str	r2, [sp, #28]
 80080ca:	42aa      	cmp	r2, r5
 80080cc:	dd00      	ble.n	80080d0 <_strtod_l+0x318>
 80080ce:	9507      	str	r5, [sp, #28]
 80080d0:	2c00      	cmp	r4, #0
 80080d2:	d002      	beq.n	80080da <_strtod_l+0x322>
 80080d4:	9a07      	ldr	r2, [sp, #28]
 80080d6:	4252      	negs	r2, r2
 80080d8:	9207      	str	r2, [sp, #28]
 80080da:	9a06      	ldr	r2, [sp, #24]
 80080dc:	2a00      	cmp	r2, #0
 80080de:	d14b      	bne.n	8008178 <_strtod_l+0x3c0>
 80080e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080e2:	4310      	orrs	r0, r2
 80080e4:	d000      	beq.n	80080e8 <_strtod_l+0x330>
 80080e6:	e6ae      	b.n	8007e46 <_strtod_l+0x8e>
 80080e8:	4662      	mov	r2, ip
 80080ea:	2a00      	cmp	r2, #0
 80080ec:	d000      	beq.n	80080f0 <_strtod_l+0x338>
 80080ee:	e6c9      	b.n	8007e84 <_strtod_l+0xcc>
 80080f0:	2b69      	cmp	r3, #105	; 0x69
 80080f2:	d025      	beq.n	8008140 <_strtod_l+0x388>
 80080f4:	dc21      	bgt.n	800813a <_strtod_l+0x382>
 80080f6:	2b49      	cmp	r3, #73	; 0x49
 80080f8:	d022      	beq.n	8008140 <_strtod_l+0x388>
 80080fa:	2b4e      	cmp	r3, #78	; 0x4e
 80080fc:	d000      	beq.n	8008100 <_strtod_l+0x348>
 80080fe:	e6c1      	b.n	8007e84 <_strtod_l+0xcc>
 8008100:	49a1      	ldr	r1, [pc, #644]	; (8008388 <_strtod_l+0x5d0>)
 8008102:	a81f      	add	r0, sp, #124	; 0x7c
 8008104:	f001 fe8a 	bl	8009e1c <__match>
 8008108:	2800      	cmp	r0, #0
 800810a:	d100      	bne.n	800810e <_strtod_l+0x356>
 800810c:	e6ba      	b.n	8007e84 <_strtod_l+0xcc>
 800810e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	2b28      	cmp	r3, #40	; 0x28
 8008114:	d12a      	bne.n	800816c <_strtod_l+0x3b4>
 8008116:	499d      	ldr	r1, [pc, #628]	; (800838c <_strtod_l+0x5d4>)
 8008118:	aa22      	add	r2, sp, #136	; 0x88
 800811a:	a81f      	add	r0, sp, #124	; 0x7c
 800811c:	f001 fe92 	bl	8009e44 <__hexnan>
 8008120:	2805      	cmp	r0, #5
 8008122:	d123      	bne.n	800816c <_strtod_l+0x3b4>
 8008124:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008126:	4a9a      	ldr	r2, [pc, #616]	; (8008390 <_strtod_l+0x5d8>)
 8008128:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800812a:	431a      	orrs	r2, r3
 800812c:	0017      	movs	r7, r2
 800812e:	e68a      	b.n	8007e46 <_strtod_l+0x8e>
 8008130:	210a      	movs	r1, #10
 8008132:	434a      	muls	r2, r1
 8008134:	18d2      	adds	r2, r2, r3
 8008136:	3a30      	subs	r2, #48	; 0x30
 8008138:	e7b8      	b.n	80080ac <_strtod_l+0x2f4>
 800813a:	2b6e      	cmp	r3, #110	; 0x6e
 800813c:	d0e0      	beq.n	8008100 <_strtod_l+0x348>
 800813e:	e6a1      	b.n	8007e84 <_strtod_l+0xcc>
 8008140:	4994      	ldr	r1, [pc, #592]	; (8008394 <_strtod_l+0x5dc>)
 8008142:	a81f      	add	r0, sp, #124	; 0x7c
 8008144:	f001 fe6a 	bl	8009e1c <__match>
 8008148:	2800      	cmp	r0, #0
 800814a:	d100      	bne.n	800814e <_strtod_l+0x396>
 800814c:	e69a      	b.n	8007e84 <_strtod_l+0xcc>
 800814e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008150:	4991      	ldr	r1, [pc, #580]	; (8008398 <_strtod_l+0x5e0>)
 8008152:	3b01      	subs	r3, #1
 8008154:	a81f      	add	r0, sp, #124	; 0x7c
 8008156:	931f      	str	r3, [sp, #124]	; 0x7c
 8008158:	f001 fe60 	bl	8009e1c <__match>
 800815c:	2800      	cmp	r0, #0
 800815e:	d102      	bne.n	8008166 <_strtod_l+0x3ae>
 8008160:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008162:	3301      	adds	r3, #1
 8008164:	931f      	str	r3, [sp, #124]	; 0x7c
 8008166:	2600      	movs	r6, #0
 8008168:	4f89      	ldr	r7, [pc, #548]	; (8008390 <_strtod_l+0x5d8>)
 800816a:	e66c      	b.n	8007e46 <_strtod_l+0x8e>
 800816c:	488b      	ldr	r0, [pc, #556]	; (800839c <_strtod_l+0x5e4>)
 800816e:	f003 f9e3 	bl	800b538 <nan>
 8008172:	0006      	movs	r6, r0
 8008174:	000f      	movs	r7, r1
 8008176:	e666      	b.n	8007e46 <_strtod_l+0x8e>
 8008178:	9b07      	ldr	r3, [sp, #28]
 800817a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800817c:	1a9b      	subs	r3, r3, r2
 800817e:	930a      	str	r3, [sp, #40]	; 0x28
 8008180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008182:	2b00      	cmp	r3, #0
 8008184:	d101      	bne.n	800818a <_strtod_l+0x3d2>
 8008186:	9b06      	ldr	r3, [sp, #24]
 8008188:	9309      	str	r3, [sp, #36]	; 0x24
 800818a:	9c06      	ldr	r4, [sp, #24]
 800818c:	2c10      	cmp	r4, #16
 800818e:	dd00      	ble.n	8008192 <_strtod_l+0x3da>
 8008190:	2410      	movs	r4, #16
 8008192:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008194:	f7fa fa8e 	bl	80026b4 <__aeabi_ui2d>
 8008198:	9b06      	ldr	r3, [sp, #24]
 800819a:	0006      	movs	r6, r0
 800819c:	000f      	movs	r7, r1
 800819e:	2b09      	cmp	r3, #9
 80081a0:	dd15      	ble.n	80081ce <_strtod_l+0x416>
 80081a2:	0022      	movs	r2, r4
 80081a4:	4b7e      	ldr	r3, [pc, #504]	; (80083a0 <_strtod_l+0x5e8>)
 80081a6:	3a09      	subs	r2, #9
 80081a8:	00d2      	lsls	r2, r2, #3
 80081aa:	189b      	adds	r3, r3, r2
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	f7f9 fbfe 	bl	80019b0 <__aeabi_dmul>
 80081b4:	0006      	movs	r6, r0
 80081b6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80081b8:	000f      	movs	r7, r1
 80081ba:	f7fa fa7b 	bl	80026b4 <__aeabi_ui2d>
 80081be:	0002      	movs	r2, r0
 80081c0:	000b      	movs	r3, r1
 80081c2:	0030      	movs	r0, r6
 80081c4:	0039      	movs	r1, r7
 80081c6:	f7f8 fcb5 	bl	8000b34 <__aeabi_dadd>
 80081ca:	0006      	movs	r6, r0
 80081cc:	000f      	movs	r7, r1
 80081ce:	9b06      	ldr	r3, [sp, #24]
 80081d0:	2b0f      	cmp	r3, #15
 80081d2:	dc39      	bgt.n	8008248 <_strtod_l+0x490>
 80081d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d100      	bne.n	80081dc <_strtod_l+0x424>
 80081da:	e634      	b.n	8007e46 <_strtod_l+0x8e>
 80081dc:	dd24      	ble.n	8008228 <_strtod_l+0x470>
 80081de:	2b16      	cmp	r3, #22
 80081e0:	dc09      	bgt.n	80081f6 <_strtod_l+0x43e>
 80081e2:	496f      	ldr	r1, [pc, #444]	; (80083a0 <_strtod_l+0x5e8>)
 80081e4:	00db      	lsls	r3, r3, #3
 80081e6:	18c9      	adds	r1, r1, r3
 80081e8:	0032      	movs	r2, r6
 80081ea:	6808      	ldr	r0, [r1, #0]
 80081ec:	6849      	ldr	r1, [r1, #4]
 80081ee:	003b      	movs	r3, r7
 80081f0:	f7f9 fbde 	bl	80019b0 <__aeabi_dmul>
 80081f4:	e7bd      	b.n	8008172 <_strtod_l+0x3ba>
 80081f6:	2325      	movs	r3, #37	; 0x25
 80081f8:	9a06      	ldr	r2, [sp, #24]
 80081fa:	1a9b      	subs	r3, r3, r2
 80081fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081fe:	4293      	cmp	r3, r2
 8008200:	db22      	blt.n	8008248 <_strtod_l+0x490>
 8008202:	240f      	movs	r4, #15
 8008204:	9b06      	ldr	r3, [sp, #24]
 8008206:	4d66      	ldr	r5, [pc, #408]	; (80083a0 <_strtod_l+0x5e8>)
 8008208:	1ae4      	subs	r4, r4, r3
 800820a:	00e1      	lsls	r1, r4, #3
 800820c:	1869      	adds	r1, r5, r1
 800820e:	0032      	movs	r2, r6
 8008210:	6808      	ldr	r0, [r1, #0]
 8008212:	6849      	ldr	r1, [r1, #4]
 8008214:	003b      	movs	r3, r7
 8008216:	f7f9 fbcb 	bl	80019b0 <__aeabi_dmul>
 800821a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800821c:	1b1c      	subs	r4, r3, r4
 800821e:	00e4      	lsls	r4, r4, #3
 8008220:	192c      	adds	r4, r5, r4
 8008222:	6822      	ldr	r2, [r4, #0]
 8008224:	6863      	ldr	r3, [r4, #4]
 8008226:	e7e3      	b.n	80081f0 <_strtod_l+0x438>
 8008228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800822a:	3316      	adds	r3, #22
 800822c:	db0c      	blt.n	8008248 <_strtod_l+0x490>
 800822e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008230:	9a07      	ldr	r2, [sp, #28]
 8008232:	0030      	movs	r0, r6
 8008234:	1a9a      	subs	r2, r3, r2
 8008236:	4b5a      	ldr	r3, [pc, #360]	; (80083a0 <_strtod_l+0x5e8>)
 8008238:	00d2      	lsls	r2, r2, #3
 800823a:	189b      	adds	r3, r3, r2
 800823c:	0039      	movs	r1, r7
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	f7f8 ffb3 	bl	80011ac <__aeabi_ddiv>
 8008246:	e794      	b.n	8008172 <_strtod_l+0x3ba>
 8008248:	9b06      	ldr	r3, [sp, #24]
 800824a:	1b1c      	subs	r4, r3, r4
 800824c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800824e:	18e4      	adds	r4, r4, r3
 8008250:	2c00      	cmp	r4, #0
 8008252:	dd72      	ble.n	800833a <_strtod_l+0x582>
 8008254:	230f      	movs	r3, #15
 8008256:	0021      	movs	r1, r4
 8008258:	4019      	ands	r1, r3
 800825a:	421c      	tst	r4, r3
 800825c:	d00a      	beq.n	8008274 <_strtod_l+0x4bc>
 800825e:	00cb      	lsls	r3, r1, #3
 8008260:	494f      	ldr	r1, [pc, #316]	; (80083a0 <_strtod_l+0x5e8>)
 8008262:	0032      	movs	r2, r6
 8008264:	18c9      	adds	r1, r1, r3
 8008266:	6808      	ldr	r0, [r1, #0]
 8008268:	6849      	ldr	r1, [r1, #4]
 800826a:	003b      	movs	r3, r7
 800826c:	f7f9 fba0 	bl	80019b0 <__aeabi_dmul>
 8008270:	0006      	movs	r6, r0
 8008272:	000f      	movs	r7, r1
 8008274:	230f      	movs	r3, #15
 8008276:	439c      	bics	r4, r3
 8008278:	d04a      	beq.n	8008310 <_strtod_l+0x558>
 800827a:	3326      	adds	r3, #38	; 0x26
 800827c:	33ff      	adds	r3, #255	; 0xff
 800827e:	429c      	cmp	r4, r3
 8008280:	dd22      	ble.n	80082c8 <_strtod_l+0x510>
 8008282:	2300      	movs	r3, #0
 8008284:	9306      	str	r3, [sp, #24]
 8008286:	9307      	str	r3, [sp, #28]
 8008288:	930b      	str	r3, [sp, #44]	; 0x2c
 800828a:	9309      	str	r3, [sp, #36]	; 0x24
 800828c:	2322      	movs	r3, #34	; 0x22
 800828e:	2600      	movs	r6, #0
 8008290:	9a05      	ldr	r2, [sp, #20]
 8008292:	4f3f      	ldr	r7, [pc, #252]	; (8008390 <_strtod_l+0x5d8>)
 8008294:	6013      	str	r3, [r2, #0]
 8008296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008298:	42b3      	cmp	r3, r6
 800829a:	d100      	bne.n	800829e <_strtod_l+0x4e6>
 800829c:	e5d3      	b.n	8007e46 <_strtod_l+0x8e>
 800829e:	9920      	ldr	r1, [sp, #128]	; 0x80
 80082a0:	9805      	ldr	r0, [sp, #20]
 80082a2:	f001 ff03 	bl	800a0ac <_Bfree>
 80082a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082a8:	9805      	ldr	r0, [sp, #20]
 80082aa:	f001 feff 	bl	800a0ac <_Bfree>
 80082ae:	9907      	ldr	r1, [sp, #28]
 80082b0:	9805      	ldr	r0, [sp, #20]
 80082b2:	f001 fefb 	bl	800a0ac <_Bfree>
 80082b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082b8:	9805      	ldr	r0, [sp, #20]
 80082ba:	f001 fef7 	bl	800a0ac <_Bfree>
 80082be:	9906      	ldr	r1, [sp, #24]
 80082c0:	9805      	ldr	r0, [sp, #20]
 80082c2:	f001 fef3 	bl	800a0ac <_Bfree>
 80082c6:	e5be      	b.n	8007e46 <_strtod_l+0x8e>
 80082c8:	2300      	movs	r3, #0
 80082ca:	0030      	movs	r0, r6
 80082cc:	0039      	movs	r1, r7
 80082ce:	4d35      	ldr	r5, [pc, #212]	; (80083a4 <_strtod_l+0x5ec>)
 80082d0:	1124      	asrs	r4, r4, #4
 80082d2:	9308      	str	r3, [sp, #32]
 80082d4:	2c01      	cmp	r4, #1
 80082d6:	dc1e      	bgt.n	8008316 <_strtod_l+0x55e>
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d001      	beq.n	80082e0 <_strtod_l+0x528>
 80082dc:	0006      	movs	r6, r0
 80082de:	000f      	movs	r7, r1
 80082e0:	4b31      	ldr	r3, [pc, #196]	; (80083a8 <_strtod_l+0x5f0>)
 80082e2:	0032      	movs	r2, r6
 80082e4:	18ff      	adds	r7, r7, r3
 80082e6:	9b08      	ldr	r3, [sp, #32]
 80082e8:	00dd      	lsls	r5, r3, #3
 80082ea:	4b2e      	ldr	r3, [pc, #184]	; (80083a4 <_strtod_l+0x5ec>)
 80082ec:	195d      	adds	r5, r3, r5
 80082ee:	6828      	ldr	r0, [r5, #0]
 80082f0:	6869      	ldr	r1, [r5, #4]
 80082f2:	003b      	movs	r3, r7
 80082f4:	f7f9 fb5c 	bl	80019b0 <__aeabi_dmul>
 80082f8:	4b25      	ldr	r3, [pc, #148]	; (8008390 <_strtod_l+0x5d8>)
 80082fa:	4a2c      	ldr	r2, [pc, #176]	; (80083ac <_strtod_l+0x5f4>)
 80082fc:	0006      	movs	r6, r0
 80082fe:	400b      	ands	r3, r1
 8008300:	4293      	cmp	r3, r2
 8008302:	d8be      	bhi.n	8008282 <_strtod_l+0x4ca>
 8008304:	4a2a      	ldr	r2, [pc, #168]	; (80083b0 <_strtod_l+0x5f8>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d913      	bls.n	8008332 <_strtod_l+0x57a>
 800830a:	2601      	movs	r6, #1
 800830c:	4f29      	ldr	r7, [pc, #164]	; (80083b4 <_strtod_l+0x5fc>)
 800830e:	4276      	negs	r6, r6
 8008310:	2300      	movs	r3, #0
 8008312:	9308      	str	r3, [sp, #32]
 8008314:	e087      	b.n	8008426 <_strtod_l+0x66e>
 8008316:	2201      	movs	r2, #1
 8008318:	4214      	tst	r4, r2
 800831a:	d004      	beq.n	8008326 <_strtod_l+0x56e>
 800831c:	682a      	ldr	r2, [r5, #0]
 800831e:	686b      	ldr	r3, [r5, #4]
 8008320:	f7f9 fb46 	bl	80019b0 <__aeabi_dmul>
 8008324:	2301      	movs	r3, #1
 8008326:	9a08      	ldr	r2, [sp, #32]
 8008328:	1064      	asrs	r4, r4, #1
 800832a:	3201      	adds	r2, #1
 800832c:	9208      	str	r2, [sp, #32]
 800832e:	3508      	adds	r5, #8
 8008330:	e7d0      	b.n	80082d4 <_strtod_l+0x51c>
 8008332:	23d4      	movs	r3, #212	; 0xd4
 8008334:	049b      	lsls	r3, r3, #18
 8008336:	18cf      	adds	r7, r1, r3
 8008338:	e7ea      	b.n	8008310 <_strtod_l+0x558>
 800833a:	2c00      	cmp	r4, #0
 800833c:	d0e8      	beq.n	8008310 <_strtod_l+0x558>
 800833e:	4264      	negs	r4, r4
 8008340:	220f      	movs	r2, #15
 8008342:	0023      	movs	r3, r4
 8008344:	4013      	ands	r3, r2
 8008346:	4214      	tst	r4, r2
 8008348:	d00a      	beq.n	8008360 <_strtod_l+0x5a8>
 800834a:	00da      	lsls	r2, r3, #3
 800834c:	4b14      	ldr	r3, [pc, #80]	; (80083a0 <_strtod_l+0x5e8>)
 800834e:	0030      	movs	r0, r6
 8008350:	189b      	adds	r3, r3, r2
 8008352:	0039      	movs	r1, r7
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	f7f8 ff28 	bl	80011ac <__aeabi_ddiv>
 800835c:	0006      	movs	r6, r0
 800835e:	000f      	movs	r7, r1
 8008360:	1124      	asrs	r4, r4, #4
 8008362:	d0d5      	beq.n	8008310 <_strtod_l+0x558>
 8008364:	2c1f      	cmp	r4, #31
 8008366:	dd27      	ble.n	80083b8 <_strtod_l+0x600>
 8008368:	2300      	movs	r3, #0
 800836a:	9306      	str	r3, [sp, #24]
 800836c:	9307      	str	r3, [sp, #28]
 800836e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008370:	9309      	str	r3, [sp, #36]	; 0x24
 8008372:	2322      	movs	r3, #34	; 0x22
 8008374:	9a05      	ldr	r2, [sp, #20]
 8008376:	2600      	movs	r6, #0
 8008378:	6013      	str	r3, [r2, #0]
 800837a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800837c:	2700      	movs	r7, #0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d18d      	bne.n	800829e <_strtod_l+0x4e6>
 8008382:	e560      	b.n	8007e46 <_strtod_l+0x8e>
 8008384:	00004e1f 	.word	0x00004e1f
 8008388:	0800c411 	.word	0x0800c411
 800838c:	0800c450 	.word	0x0800c450
 8008390:	7ff00000 	.word	0x7ff00000
 8008394:	0800c409 	.word	0x0800c409
 8008398:	0800c594 	.word	0x0800c594
 800839c:	0800c85b 	.word	0x0800c85b
 80083a0:	0800c720 	.word	0x0800c720
 80083a4:	0800c6f8 	.word	0x0800c6f8
 80083a8:	fcb00000 	.word	0xfcb00000
 80083ac:	7ca00000 	.word	0x7ca00000
 80083b0:	7c900000 	.word	0x7c900000
 80083b4:	7fefffff 	.word	0x7fefffff
 80083b8:	2310      	movs	r3, #16
 80083ba:	0022      	movs	r2, r4
 80083bc:	401a      	ands	r2, r3
 80083be:	9208      	str	r2, [sp, #32]
 80083c0:	421c      	tst	r4, r3
 80083c2:	d001      	beq.n	80083c8 <_strtod_l+0x610>
 80083c4:	335a      	adds	r3, #90	; 0x5a
 80083c6:	9308      	str	r3, [sp, #32]
 80083c8:	0030      	movs	r0, r6
 80083ca:	0039      	movs	r1, r7
 80083cc:	2300      	movs	r3, #0
 80083ce:	4dc5      	ldr	r5, [pc, #788]	; (80086e4 <_strtod_l+0x92c>)
 80083d0:	2201      	movs	r2, #1
 80083d2:	4214      	tst	r4, r2
 80083d4:	d004      	beq.n	80083e0 <_strtod_l+0x628>
 80083d6:	682a      	ldr	r2, [r5, #0]
 80083d8:	686b      	ldr	r3, [r5, #4]
 80083da:	f7f9 fae9 	bl	80019b0 <__aeabi_dmul>
 80083de:	2301      	movs	r3, #1
 80083e0:	1064      	asrs	r4, r4, #1
 80083e2:	3508      	adds	r5, #8
 80083e4:	2c00      	cmp	r4, #0
 80083e6:	d1f3      	bne.n	80083d0 <_strtod_l+0x618>
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d001      	beq.n	80083f0 <_strtod_l+0x638>
 80083ec:	0006      	movs	r6, r0
 80083ee:	000f      	movs	r7, r1
 80083f0:	9b08      	ldr	r3, [sp, #32]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00f      	beq.n	8008416 <_strtod_l+0x65e>
 80083f6:	236b      	movs	r3, #107	; 0x6b
 80083f8:	007a      	lsls	r2, r7, #1
 80083fa:	0d52      	lsrs	r2, r2, #21
 80083fc:	0039      	movs	r1, r7
 80083fe:	1a9b      	subs	r3, r3, r2
 8008400:	2b00      	cmp	r3, #0
 8008402:	dd08      	ble.n	8008416 <_strtod_l+0x65e>
 8008404:	2b1f      	cmp	r3, #31
 8008406:	dc00      	bgt.n	800840a <_strtod_l+0x652>
 8008408:	e124      	b.n	8008654 <_strtod_l+0x89c>
 800840a:	2600      	movs	r6, #0
 800840c:	2b34      	cmp	r3, #52	; 0x34
 800840e:	dc00      	bgt.n	8008412 <_strtod_l+0x65a>
 8008410:	e119      	b.n	8008646 <_strtod_l+0x88e>
 8008412:	27dc      	movs	r7, #220	; 0xdc
 8008414:	04bf      	lsls	r7, r7, #18
 8008416:	2200      	movs	r2, #0
 8008418:	2300      	movs	r3, #0
 800841a:	0030      	movs	r0, r6
 800841c:	0039      	movs	r1, r7
 800841e:	f7f8 f815 	bl	800044c <__aeabi_dcmpeq>
 8008422:	2800      	cmp	r0, #0
 8008424:	d1a0      	bne.n	8008368 <_strtod_l+0x5b0>
 8008426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008428:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800842a:	9300      	str	r3, [sp, #0]
 800842c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800842e:	9b06      	ldr	r3, [sp, #24]
 8008430:	9805      	ldr	r0, [sp, #20]
 8008432:	f001 fea3 	bl	800a17c <__s2b>
 8008436:	900b      	str	r0, [sp, #44]	; 0x2c
 8008438:	2800      	cmp	r0, #0
 800843a:	d100      	bne.n	800843e <_strtod_l+0x686>
 800843c:	e721      	b.n	8008282 <_strtod_l+0x4ca>
 800843e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008440:	9907      	ldr	r1, [sp, #28]
 8008442:	17da      	asrs	r2, r3, #31
 8008444:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008446:	1a5b      	subs	r3, r3, r1
 8008448:	401a      	ands	r2, r3
 800844a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800844c:	9215      	str	r2, [sp, #84]	; 0x54
 800844e:	43db      	mvns	r3, r3
 8008450:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008452:	17db      	asrs	r3, r3, #31
 8008454:	401a      	ands	r2, r3
 8008456:	2300      	movs	r3, #0
 8008458:	921a      	str	r2, [sp, #104]	; 0x68
 800845a:	9306      	str	r3, [sp, #24]
 800845c:	9307      	str	r3, [sp, #28]
 800845e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008460:	9805      	ldr	r0, [sp, #20]
 8008462:	6859      	ldr	r1, [r3, #4]
 8008464:	f001 fdde 	bl	800a024 <_Balloc>
 8008468:	9009      	str	r0, [sp, #36]	; 0x24
 800846a:	2800      	cmp	r0, #0
 800846c:	d100      	bne.n	8008470 <_strtod_l+0x6b8>
 800846e:	e70d      	b.n	800828c <_strtod_l+0x4d4>
 8008470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008472:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	310c      	adds	r1, #12
 8008478:	1c9a      	adds	r2, r3, #2
 800847a:	0092      	lsls	r2, r2, #2
 800847c:	300c      	adds	r0, #12
 800847e:	930c      	str	r3, [sp, #48]	; 0x30
 8008480:	f001 fdc7 	bl	800a012 <memcpy>
 8008484:	ab22      	add	r3, sp, #136	; 0x88
 8008486:	9301      	str	r3, [sp, #4]
 8008488:	ab21      	add	r3, sp, #132	; 0x84
 800848a:	9300      	str	r3, [sp, #0]
 800848c:	0032      	movs	r2, r6
 800848e:	003b      	movs	r3, r7
 8008490:	9805      	ldr	r0, [sp, #20]
 8008492:	9612      	str	r6, [sp, #72]	; 0x48
 8008494:	9713      	str	r7, [sp, #76]	; 0x4c
 8008496:	f002 f9bd 	bl	800a814 <__d2b>
 800849a:	9020      	str	r0, [sp, #128]	; 0x80
 800849c:	2800      	cmp	r0, #0
 800849e:	d100      	bne.n	80084a2 <_strtod_l+0x6ea>
 80084a0:	e6f4      	b.n	800828c <_strtod_l+0x4d4>
 80084a2:	2101      	movs	r1, #1
 80084a4:	9805      	ldr	r0, [sp, #20]
 80084a6:	f001 fefd 	bl	800a2a4 <__i2b>
 80084aa:	9007      	str	r0, [sp, #28]
 80084ac:	2800      	cmp	r0, #0
 80084ae:	d100      	bne.n	80084b2 <_strtod_l+0x6fa>
 80084b0:	e6ec      	b.n	800828c <_strtod_l+0x4d4>
 80084b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084b4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80084b6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80084b8:	1ad4      	subs	r4, r2, r3
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	db01      	blt.n	80084c2 <_strtod_l+0x70a>
 80084be:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80084c0:	195d      	adds	r5, r3, r5
 80084c2:	9908      	ldr	r1, [sp, #32]
 80084c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80084c6:	1a5b      	subs	r3, r3, r1
 80084c8:	2136      	movs	r1, #54	; 0x36
 80084ca:	189b      	adds	r3, r3, r2
 80084cc:	1a8a      	subs	r2, r1, r2
 80084ce:	4986      	ldr	r1, [pc, #536]	; (80086e8 <_strtod_l+0x930>)
 80084d0:	2001      	movs	r0, #1
 80084d2:	468c      	mov	ip, r1
 80084d4:	2100      	movs	r1, #0
 80084d6:	3b01      	subs	r3, #1
 80084d8:	9110      	str	r1, [sp, #64]	; 0x40
 80084da:	9014      	str	r0, [sp, #80]	; 0x50
 80084dc:	4563      	cmp	r3, ip
 80084de:	da07      	bge.n	80084f0 <_strtod_l+0x738>
 80084e0:	4661      	mov	r1, ip
 80084e2:	1ac9      	subs	r1, r1, r3
 80084e4:	1a52      	subs	r2, r2, r1
 80084e6:	291f      	cmp	r1, #31
 80084e8:	dd00      	ble.n	80084ec <_strtod_l+0x734>
 80084ea:	e0b8      	b.n	800865e <_strtod_l+0x8a6>
 80084ec:	4088      	lsls	r0, r1
 80084ee:	9014      	str	r0, [sp, #80]	; 0x50
 80084f0:	18ab      	adds	r3, r5, r2
 80084f2:	930c      	str	r3, [sp, #48]	; 0x30
 80084f4:	18a4      	adds	r4, r4, r2
 80084f6:	9b08      	ldr	r3, [sp, #32]
 80084f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084fa:	191c      	adds	r4, r3, r4
 80084fc:	002b      	movs	r3, r5
 80084fe:	4295      	cmp	r5, r2
 8008500:	dd00      	ble.n	8008504 <_strtod_l+0x74c>
 8008502:	0013      	movs	r3, r2
 8008504:	42a3      	cmp	r3, r4
 8008506:	dd00      	ble.n	800850a <_strtod_l+0x752>
 8008508:	0023      	movs	r3, r4
 800850a:	2b00      	cmp	r3, #0
 800850c:	dd04      	ble.n	8008518 <_strtod_l+0x760>
 800850e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008510:	1ae4      	subs	r4, r4, r3
 8008512:	1ad2      	subs	r2, r2, r3
 8008514:	920c      	str	r2, [sp, #48]	; 0x30
 8008516:	1aed      	subs	r5, r5, r3
 8008518:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800851a:	2b00      	cmp	r3, #0
 800851c:	dd17      	ble.n	800854e <_strtod_l+0x796>
 800851e:	001a      	movs	r2, r3
 8008520:	9907      	ldr	r1, [sp, #28]
 8008522:	9805      	ldr	r0, [sp, #20]
 8008524:	f001 ff84 	bl	800a430 <__pow5mult>
 8008528:	9007      	str	r0, [sp, #28]
 800852a:	2800      	cmp	r0, #0
 800852c:	d100      	bne.n	8008530 <_strtod_l+0x778>
 800852e:	e6ad      	b.n	800828c <_strtod_l+0x4d4>
 8008530:	0001      	movs	r1, r0
 8008532:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008534:	9805      	ldr	r0, [sp, #20]
 8008536:	f001 fecb 	bl	800a2d0 <__multiply>
 800853a:	900f      	str	r0, [sp, #60]	; 0x3c
 800853c:	2800      	cmp	r0, #0
 800853e:	d100      	bne.n	8008542 <_strtod_l+0x78a>
 8008540:	e6a4      	b.n	800828c <_strtod_l+0x4d4>
 8008542:	9920      	ldr	r1, [sp, #128]	; 0x80
 8008544:	9805      	ldr	r0, [sp, #20]
 8008546:	f001 fdb1 	bl	800a0ac <_Bfree>
 800854a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800854c:	9320      	str	r3, [sp, #128]	; 0x80
 800854e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008550:	2b00      	cmp	r3, #0
 8008552:	dd00      	ble.n	8008556 <_strtod_l+0x79e>
 8008554:	e089      	b.n	800866a <_strtod_l+0x8b2>
 8008556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008558:	2b00      	cmp	r3, #0
 800855a:	dd08      	ble.n	800856e <_strtod_l+0x7b6>
 800855c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800855e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008560:	9805      	ldr	r0, [sp, #20]
 8008562:	f001 ff65 	bl	800a430 <__pow5mult>
 8008566:	9009      	str	r0, [sp, #36]	; 0x24
 8008568:	2800      	cmp	r0, #0
 800856a:	d100      	bne.n	800856e <_strtod_l+0x7b6>
 800856c:	e68e      	b.n	800828c <_strtod_l+0x4d4>
 800856e:	2c00      	cmp	r4, #0
 8008570:	dd08      	ble.n	8008584 <_strtod_l+0x7cc>
 8008572:	0022      	movs	r2, r4
 8008574:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008576:	9805      	ldr	r0, [sp, #20]
 8008578:	f001 ffb6 	bl	800a4e8 <__lshift>
 800857c:	9009      	str	r0, [sp, #36]	; 0x24
 800857e:	2800      	cmp	r0, #0
 8008580:	d100      	bne.n	8008584 <_strtod_l+0x7cc>
 8008582:	e683      	b.n	800828c <_strtod_l+0x4d4>
 8008584:	2d00      	cmp	r5, #0
 8008586:	dd08      	ble.n	800859a <_strtod_l+0x7e2>
 8008588:	002a      	movs	r2, r5
 800858a:	9907      	ldr	r1, [sp, #28]
 800858c:	9805      	ldr	r0, [sp, #20]
 800858e:	f001 ffab 	bl	800a4e8 <__lshift>
 8008592:	9007      	str	r0, [sp, #28]
 8008594:	2800      	cmp	r0, #0
 8008596:	d100      	bne.n	800859a <_strtod_l+0x7e2>
 8008598:	e678      	b.n	800828c <_strtod_l+0x4d4>
 800859a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800859c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800859e:	9805      	ldr	r0, [sp, #20]
 80085a0:	f002 f82c 	bl	800a5fc <__mdiff>
 80085a4:	9006      	str	r0, [sp, #24]
 80085a6:	2800      	cmp	r0, #0
 80085a8:	d100      	bne.n	80085ac <_strtod_l+0x7f4>
 80085aa:	e66f      	b.n	800828c <_strtod_l+0x4d4>
 80085ac:	2200      	movs	r2, #0
 80085ae:	68c3      	ldr	r3, [r0, #12]
 80085b0:	9907      	ldr	r1, [sp, #28]
 80085b2:	60c2      	str	r2, [r0, #12]
 80085b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80085b6:	f002 f805 	bl	800a5c4 <__mcmp>
 80085ba:	2800      	cmp	r0, #0
 80085bc:	da5f      	bge.n	800867e <_strtod_l+0x8c6>
 80085be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085c0:	4333      	orrs	r3, r6
 80085c2:	d000      	beq.n	80085c6 <_strtod_l+0x80e>
 80085c4:	e08a      	b.n	80086dc <_strtod_l+0x924>
 80085c6:	033b      	lsls	r3, r7, #12
 80085c8:	d000      	beq.n	80085cc <_strtod_l+0x814>
 80085ca:	e087      	b.n	80086dc <_strtod_l+0x924>
 80085cc:	22d6      	movs	r2, #214	; 0xd6
 80085ce:	4b47      	ldr	r3, [pc, #284]	; (80086ec <_strtod_l+0x934>)
 80085d0:	04d2      	lsls	r2, r2, #19
 80085d2:	403b      	ands	r3, r7
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d800      	bhi.n	80085da <_strtod_l+0x822>
 80085d8:	e080      	b.n	80086dc <_strtod_l+0x924>
 80085da:	9b06      	ldr	r3, [sp, #24]
 80085dc:	695b      	ldr	r3, [r3, #20]
 80085de:	930a      	str	r3, [sp, #40]	; 0x28
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d104      	bne.n	80085ee <_strtod_l+0x836>
 80085e4:	9b06      	ldr	r3, [sp, #24]
 80085e6:	691b      	ldr	r3, [r3, #16]
 80085e8:	930a      	str	r3, [sp, #40]	; 0x28
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	dd76      	ble.n	80086dc <_strtod_l+0x924>
 80085ee:	9906      	ldr	r1, [sp, #24]
 80085f0:	2201      	movs	r2, #1
 80085f2:	9805      	ldr	r0, [sp, #20]
 80085f4:	f001 ff78 	bl	800a4e8 <__lshift>
 80085f8:	9907      	ldr	r1, [sp, #28]
 80085fa:	9006      	str	r0, [sp, #24]
 80085fc:	f001 ffe2 	bl	800a5c4 <__mcmp>
 8008600:	2800      	cmp	r0, #0
 8008602:	dd6b      	ble.n	80086dc <_strtod_l+0x924>
 8008604:	9908      	ldr	r1, [sp, #32]
 8008606:	003b      	movs	r3, r7
 8008608:	4a38      	ldr	r2, [pc, #224]	; (80086ec <_strtod_l+0x934>)
 800860a:	2900      	cmp	r1, #0
 800860c:	d100      	bne.n	8008610 <_strtod_l+0x858>
 800860e:	e092      	b.n	8008736 <_strtod_l+0x97e>
 8008610:	0011      	movs	r1, r2
 8008612:	20d6      	movs	r0, #214	; 0xd6
 8008614:	4039      	ands	r1, r7
 8008616:	04c0      	lsls	r0, r0, #19
 8008618:	4281      	cmp	r1, r0
 800861a:	dd00      	ble.n	800861e <_strtod_l+0x866>
 800861c:	e08b      	b.n	8008736 <_strtod_l+0x97e>
 800861e:	23dc      	movs	r3, #220	; 0xdc
 8008620:	049b      	lsls	r3, r3, #18
 8008622:	4299      	cmp	r1, r3
 8008624:	dc00      	bgt.n	8008628 <_strtod_l+0x870>
 8008626:	e6a4      	b.n	8008372 <_strtod_l+0x5ba>
 8008628:	0030      	movs	r0, r6
 800862a:	0039      	movs	r1, r7
 800862c:	2200      	movs	r2, #0
 800862e:	4b30      	ldr	r3, [pc, #192]	; (80086f0 <_strtod_l+0x938>)
 8008630:	f7f9 f9be 	bl	80019b0 <__aeabi_dmul>
 8008634:	0006      	movs	r6, r0
 8008636:	000f      	movs	r7, r1
 8008638:	4308      	orrs	r0, r1
 800863a:	d000      	beq.n	800863e <_strtod_l+0x886>
 800863c:	e62f      	b.n	800829e <_strtod_l+0x4e6>
 800863e:	2322      	movs	r3, #34	; 0x22
 8008640:	9a05      	ldr	r2, [sp, #20]
 8008642:	6013      	str	r3, [r2, #0]
 8008644:	e62b      	b.n	800829e <_strtod_l+0x4e6>
 8008646:	234b      	movs	r3, #75	; 0x4b
 8008648:	1a9a      	subs	r2, r3, r2
 800864a:	3b4c      	subs	r3, #76	; 0x4c
 800864c:	4093      	lsls	r3, r2
 800864e:	4019      	ands	r1, r3
 8008650:	000f      	movs	r7, r1
 8008652:	e6e0      	b.n	8008416 <_strtod_l+0x65e>
 8008654:	2201      	movs	r2, #1
 8008656:	4252      	negs	r2, r2
 8008658:	409a      	lsls	r2, r3
 800865a:	4016      	ands	r6, r2
 800865c:	e6db      	b.n	8008416 <_strtod_l+0x65e>
 800865e:	4925      	ldr	r1, [pc, #148]	; (80086f4 <_strtod_l+0x93c>)
 8008660:	1acb      	subs	r3, r1, r3
 8008662:	0001      	movs	r1, r0
 8008664:	4099      	lsls	r1, r3
 8008666:	9110      	str	r1, [sp, #64]	; 0x40
 8008668:	e741      	b.n	80084ee <_strtod_l+0x736>
 800866a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800866c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800866e:	9805      	ldr	r0, [sp, #20]
 8008670:	f001 ff3a 	bl	800a4e8 <__lshift>
 8008674:	9020      	str	r0, [sp, #128]	; 0x80
 8008676:	2800      	cmp	r0, #0
 8008678:	d000      	beq.n	800867c <_strtod_l+0x8c4>
 800867a:	e76c      	b.n	8008556 <_strtod_l+0x79e>
 800867c:	e606      	b.n	800828c <_strtod_l+0x4d4>
 800867e:	970c      	str	r7, [sp, #48]	; 0x30
 8008680:	2800      	cmp	r0, #0
 8008682:	d176      	bne.n	8008772 <_strtod_l+0x9ba>
 8008684:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008686:	033b      	lsls	r3, r7, #12
 8008688:	0b1b      	lsrs	r3, r3, #12
 800868a:	2a00      	cmp	r2, #0
 800868c:	d038      	beq.n	8008700 <_strtod_l+0x948>
 800868e:	4a1a      	ldr	r2, [pc, #104]	; (80086f8 <_strtod_l+0x940>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d138      	bne.n	8008706 <_strtod_l+0x94e>
 8008694:	2201      	movs	r2, #1
 8008696:	9b08      	ldr	r3, [sp, #32]
 8008698:	4252      	negs	r2, r2
 800869a:	0031      	movs	r1, r6
 800869c:	0010      	movs	r0, r2
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d00b      	beq.n	80086ba <_strtod_l+0x902>
 80086a2:	24d4      	movs	r4, #212	; 0xd4
 80086a4:	4b11      	ldr	r3, [pc, #68]	; (80086ec <_strtod_l+0x934>)
 80086a6:	0010      	movs	r0, r2
 80086a8:	403b      	ands	r3, r7
 80086aa:	04e4      	lsls	r4, r4, #19
 80086ac:	42a3      	cmp	r3, r4
 80086ae:	d804      	bhi.n	80086ba <_strtod_l+0x902>
 80086b0:	306c      	adds	r0, #108	; 0x6c
 80086b2:	0d1b      	lsrs	r3, r3, #20
 80086b4:	1ac3      	subs	r3, r0, r3
 80086b6:	409a      	lsls	r2, r3
 80086b8:	0010      	movs	r0, r2
 80086ba:	4281      	cmp	r1, r0
 80086bc:	d123      	bne.n	8008706 <_strtod_l+0x94e>
 80086be:	4b0f      	ldr	r3, [pc, #60]	; (80086fc <_strtod_l+0x944>)
 80086c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d102      	bne.n	80086cc <_strtod_l+0x914>
 80086c6:	1c4b      	adds	r3, r1, #1
 80086c8:	d100      	bne.n	80086cc <_strtod_l+0x914>
 80086ca:	e5df      	b.n	800828c <_strtod_l+0x4d4>
 80086cc:	4b07      	ldr	r3, [pc, #28]	; (80086ec <_strtod_l+0x934>)
 80086ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086d0:	2600      	movs	r6, #0
 80086d2:	401a      	ands	r2, r3
 80086d4:	0013      	movs	r3, r2
 80086d6:	2280      	movs	r2, #128	; 0x80
 80086d8:	0352      	lsls	r2, r2, #13
 80086da:	189f      	adds	r7, r3, r2
 80086dc:	9b08      	ldr	r3, [sp, #32]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d1a2      	bne.n	8008628 <_strtod_l+0x870>
 80086e2:	e5dc      	b.n	800829e <_strtod_l+0x4e6>
 80086e4:	0800c468 	.word	0x0800c468
 80086e8:	fffffc02 	.word	0xfffffc02
 80086ec:	7ff00000 	.word	0x7ff00000
 80086f0:	39500000 	.word	0x39500000
 80086f4:	fffffbe2 	.word	0xfffffbe2
 80086f8:	000fffff 	.word	0x000fffff
 80086fc:	7fefffff 	.word	0x7fefffff
 8008700:	4333      	orrs	r3, r6
 8008702:	d100      	bne.n	8008706 <_strtod_l+0x94e>
 8008704:	e77e      	b.n	8008604 <_strtod_l+0x84c>
 8008706:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008708:	2b00      	cmp	r3, #0
 800870a:	d01d      	beq.n	8008748 <_strtod_l+0x990>
 800870c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800870e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008710:	4213      	tst	r3, r2
 8008712:	d0e3      	beq.n	80086dc <_strtod_l+0x924>
 8008714:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008716:	0030      	movs	r0, r6
 8008718:	0039      	movs	r1, r7
 800871a:	9a08      	ldr	r2, [sp, #32]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d017      	beq.n	8008750 <_strtod_l+0x998>
 8008720:	f7ff fb32 	bl	8007d88 <sulp>
 8008724:	0002      	movs	r2, r0
 8008726:	000b      	movs	r3, r1
 8008728:	9812      	ldr	r0, [sp, #72]	; 0x48
 800872a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800872c:	f7f8 fa02 	bl	8000b34 <__aeabi_dadd>
 8008730:	0006      	movs	r6, r0
 8008732:	000f      	movs	r7, r1
 8008734:	e7d2      	b.n	80086dc <_strtod_l+0x924>
 8008736:	2601      	movs	r6, #1
 8008738:	4013      	ands	r3, r2
 800873a:	4a99      	ldr	r2, [pc, #612]	; (80089a0 <_strtod_l+0xbe8>)
 800873c:	4276      	negs	r6, r6
 800873e:	189b      	adds	r3, r3, r2
 8008740:	4a98      	ldr	r2, [pc, #608]	; (80089a4 <_strtod_l+0xbec>)
 8008742:	431a      	orrs	r2, r3
 8008744:	0017      	movs	r7, r2
 8008746:	e7c9      	b.n	80086dc <_strtod_l+0x924>
 8008748:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800874a:	4233      	tst	r3, r6
 800874c:	d0c6      	beq.n	80086dc <_strtod_l+0x924>
 800874e:	e7e1      	b.n	8008714 <_strtod_l+0x95c>
 8008750:	f7ff fb1a 	bl	8007d88 <sulp>
 8008754:	0002      	movs	r2, r0
 8008756:	000b      	movs	r3, r1
 8008758:	9812      	ldr	r0, [sp, #72]	; 0x48
 800875a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800875c:	f7f9 fb94 	bl	8001e88 <__aeabi_dsub>
 8008760:	2200      	movs	r2, #0
 8008762:	2300      	movs	r3, #0
 8008764:	0006      	movs	r6, r0
 8008766:	000f      	movs	r7, r1
 8008768:	f7f7 fe70 	bl	800044c <__aeabi_dcmpeq>
 800876c:	2800      	cmp	r0, #0
 800876e:	d0b5      	beq.n	80086dc <_strtod_l+0x924>
 8008770:	e5ff      	b.n	8008372 <_strtod_l+0x5ba>
 8008772:	9907      	ldr	r1, [sp, #28]
 8008774:	9806      	ldr	r0, [sp, #24]
 8008776:	f002 f8b1 	bl	800a8dc <__ratio>
 800877a:	2380      	movs	r3, #128	; 0x80
 800877c:	2200      	movs	r2, #0
 800877e:	05db      	lsls	r3, r3, #23
 8008780:	0004      	movs	r4, r0
 8008782:	000d      	movs	r5, r1
 8008784:	f7f7 fe72 	bl	800046c <__aeabi_dcmple>
 8008788:	2800      	cmp	r0, #0
 800878a:	d075      	beq.n	8008878 <_strtod_l+0xac0>
 800878c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800878e:	2b00      	cmp	r3, #0
 8008790:	d047      	beq.n	8008822 <_strtod_l+0xa6a>
 8008792:	2300      	movs	r3, #0
 8008794:	4c84      	ldr	r4, [pc, #528]	; (80089a8 <_strtod_l+0xbf0>)
 8008796:	2500      	movs	r5, #0
 8008798:	9310      	str	r3, [sp, #64]	; 0x40
 800879a:	9411      	str	r4, [sp, #68]	; 0x44
 800879c:	4c82      	ldr	r4, [pc, #520]	; (80089a8 <_strtod_l+0xbf0>)
 800879e:	4a83      	ldr	r2, [pc, #524]	; (80089ac <_strtod_l+0xbf4>)
 80087a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087a2:	4013      	ands	r3, r2
 80087a4:	9314      	str	r3, [sp, #80]	; 0x50
 80087a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80087a8:	4b81      	ldr	r3, [pc, #516]	; (80089b0 <_strtod_l+0xbf8>)
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d000      	beq.n	80087b0 <_strtod_l+0x9f8>
 80087ae:	e0ac      	b.n	800890a <_strtod_l+0xb52>
 80087b0:	4a80      	ldr	r2, [pc, #512]	; (80089b4 <_strtod_l+0xbfc>)
 80087b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087b4:	4694      	mov	ip, r2
 80087b6:	4463      	add	r3, ip
 80087b8:	001f      	movs	r7, r3
 80087ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80087bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087be:	0030      	movs	r0, r6
 80087c0:	0039      	movs	r1, r7
 80087c2:	920c      	str	r2, [sp, #48]	; 0x30
 80087c4:	930d      	str	r3, [sp, #52]	; 0x34
 80087c6:	f001 ffb1 	bl	800a72c <__ulp>
 80087ca:	0002      	movs	r2, r0
 80087cc:	000b      	movs	r3, r1
 80087ce:	980c      	ldr	r0, [sp, #48]	; 0x30
 80087d0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80087d2:	f7f9 f8ed 	bl	80019b0 <__aeabi_dmul>
 80087d6:	0032      	movs	r2, r6
 80087d8:	003b      	movs	r3, r7
 80087da:	f7f8 f9ab 	bl	8000b34 <__aeabi_dadd>
 80087de:	4a73      	ldr	r2, [pc, #460]	; (80089ac <_strtod_l+0xbf4>)
 80087e0:	4b75      	ldr	r3, [pc, #468]	; (80089b8 <_strtod_l+0xc00>)
 80087e2:	0006      	movs	r6, r0
 80087e4:	400a      	ands	r2, r1
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d95e      	bls.n	80088a8 <_strtod_l+0xaf0>
 80087ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80087ec:	4b73      	ldr	r3, [pc, #460]	; (80089bc <_strtod_l+0xc04>)
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d103      	bne.n	80087fa <_strtod_l+0xa42>
 80087f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087f4:	3301      	adds	r3, #1
 80087f6:	d100      	bne.n	80087fa <_strtod_l+0xa42>
 80087f8:	e548      	b.n	800828c <_strtod_l+0x4d4>
 80087fa:	2601      	movs	r6, #1
 80087fc:	4f6f      	ldr	r7, [pc, #444]	; (80089bc <_strtod_l+0xc04>)
 80087fe:	4276      	negs	r6, r6
 8008800:	9920      	ldr	r1, [sp, #128]	; 0x80
 8008802:	9805      	ldr	r0, [sp, #20]
 8008804:	f001 fc52 	bl	800a0ac <_Bfree>
 8008808:	9909      	ldr	r1, [sp, #36]	; 0x24
 800880a:	9805      	ldr	r0, [sp, #20]
 800880c:	f001 fc4e 	bl	800a0ac <_Bfree>
 8008810:	9907      	ldr	r1, [sp, #28]
 8008812:	9805      	ldr	r0, [sp, #20]
 8008814:	f001 fc4a 	bl	800a0ac <_Bfree>
 8008818:	9906      	ldr	r1, [sp, #24]
 800881a:	9805      	ldr	r0, [sp, #20]
 800881c:	f001 fc46 	bl	800a0ac <_Bfree>
 8008820:	e61d      	b.n	800845e <_strtod_l+0x6a6>
 8008822:	2e00      	cmp	r6, #0
 8008824:	d11c      	bne.n	8008860 <_strtod_l+0xaa8>
 8008826:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008828:	031b      	lsls	r3, r3, #12
 800882a:	d11f      	bne.n	800886c <_strtod_l+0xab4>
 800882c:	2200      	movs	r2, #0
 800882e:	0020      	movs	r0, r4
 8008830:	0029      	movs	r1, r5
 8008832:	4b5d      	ldr	r3, [pc, #372]	; (80089a8 <_strtod_l+0xbf0>)
 8008834:	f7f7 fe10 	bl	8000458 <__aeabi_dcmplt>
 8008838:	2800      	cmp	r0, #0
 800883a:	d11a      	bne.n	8008872 <_strtod_l+0xaba>
 800883c:	0020      	movs	r0, r4
 800883e:	0029      	movs	r1, r5
 8008840:	2200      	movs	r2, #0
 8008842:	4b5f      	ldr	r3, [pc, #380]	; (80089c0 <_strtod_l+0xc08>)
 8008844:	f7f9 f8b4 	bl	80019b0 <__aeabi_dmul>
 8008848:	0005      	movs	r5, r0
 800884a:	000c      	movs	r4, r1
 800884c:	2380      	movs	r3, #128	; 0x80
 800884e:	061b      	lsls	r3, r3, #24
 8008850:	18e3      	adds	r3, r4, r3
 8008852:	951c      	str	r5, [sp, #112]	; 0x70
 8008854:	931d      	str	r3, [sp, #116]	; 0x74
 8008856:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008858:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800885a:	9210      	str	r2, [sp, #64]	; 0x40
 800885c:	9311      	str	r3, [sp, #68]	; 0x44
 800885e:	e79e      	b.n	800879e <_strtod_l+0x9e6>
 8008860:	2e01      	cmp	r6, #1
 8008862:	d103      	bne.n	800886c <_strtod_l+0xab4>
 8008864:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008866:	2b00      	cmp	r3, #0
 8008868:	d100      	bne.n	800886c <_strtod_l+0xab4>
 800886a:	e582      	b.n	8008372 <_strtod_l+0x5ba>
 800886c:	2300      	movs	r3, #0
 800886e:	4c55      	ldr	r4, [pc, #340]	; (80089c4 <_strtod_l+0xc0c>)
 8008870:	e791      	b.n	8008796 <_strtod_l+0x9de>
 8008872:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008874:	4c52      	ldr	r4, [pc, #328]	; (80089c0 <_strtod_l+0xc08>)
 8008876:	e7e9      	b.n	800884c <_strtod_l+0xa94>
 8008878:	2200      	movs	r2, #0
 800887a:	0020      	movs	r0, r4
 800887c:	0029      	movs	r1, r5
 800887e:	4b50      	ldr	r3, [pc, #320]	; (80089c0 <_strtod_l+0xc08>)
 8008880:	f7f9 f896 	bl	80019b0 <__aeabi_dmul>
 8008884:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008886:	0005      	movs	r5, r0
 8008888:	000b      	movs	r3, r1
 800888a:	000c      	movs	r4, r1
 800888c:	2a00      	cmp	r2, #0
 800888e:	d107      	bne.n	80088a0 <_strtod_l+0xae8>
 8008890:	2280      	movs	r2, #128	; 0x80
 8008892:	0612      	lsls	r2, r2, #24
 8008894:	188b      	adds	r3, r1, r2
 8008896:	9016      	str	r0, [sp, #88]	; 0x58
 8008898:	9317      	str	r3, [sp, #92]	; 0x5c
 800889a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800889c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800889e:	e7dc      	b.n	800885a <_strtod_l+0xaa2>
 80088a0:	0002      	movs	r2, r0
 80088a2:	9216      	str	r2, [sp, #88]	; 0x58
 80088a4:	9317      	str	r3, [sp, #92]	; 0x5c
 80088a6:	e7f8      	b.n	800889a <_strtod_l+0xae2>
 80088a8:	23d4      	movs	r3, #212	; 0xd4
 80088aa:	049b      	lsls	r3, r3, #18
 80088ac:	18cf      	adds	r7, r1, r3
 80088ae:	9b08      	ldr	r3, [sp, #32]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1a5      	bne.n	8008800 <_strtod_l+0xa48>
 80088b4:	4b3d      	ldr	r3, [pc, #244]	; (80089ac <_strtod_l+0xbf4>)
 80088b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80088b8:	403b      	ands	r3, r7
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d1a0      	bne.n	8008800 <_strtod_l+0xa48>
 80088be:	0028      	movs	r0, r5
 80088c0:	0021      	movs	r1, r4
 80088c2:	f7f7 fe0f 	bl	80004e4 <__aeabi_d2lz>
 80088c6:	f7f7 fe49 	bl	800055c <__aeabi_l2d>
 80088ca:	0002      	movs	r2, r0
 80088cc:	000b      	movs	r3, r1
 80088ce:	0028      	movs	r0, r5
 80088d0:	0021      	movs	r1, r4
 80088d2:	f7f9 fad9 	bl	8001e88 <__aeabi_dsub>
 80088d6:	033b      	lsls	r3, r7, #12
 80088d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088da:	0b1b      	lsrs	r3, r3, #12
 80088dc:	4333      	orrs	r3, r6
 80088de:	4313      	orrs	r3, r2
 80088e0:	0004      	movs	r4, r0
 80088e2:	000d      	movs	r5, r1
 80088e4:	4a38      	ldr	r2, [pc, #224]	; (80089c8 <_strtod_l+0xc10>)
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d055      	beq.n	8008996 <_strtod_l+0xbde>
 80088ea:	4b38      	ldr	r3, [pc, #224]	; (80089cc <_strtod_l+0xc14>)
 80088ec:	f7f7 fdb4 	bl	8000458 <__aeabi_dcmplt>
 80088f0:	2800      	cmp	r0, #0
 80088f2:	d000      	beq.n	80088f6 <_strtod_l+0xb3e>
 80088f4:	e4d3      	b.n	800829e <_strtod_l+0x4e6>
 80088f6:	0020      	movs	r0, r4
 80088f8:	0029      	movs	r1, r5
 80088fa:	4a35      	ldr	r2, [pc, #212]	; (80089d0 <_strtod_l+0xc18>)
 80088fc:	4b30      	ldr	r3, [pc, #192]	; (80089c0 <_strtod_l+0xc08>)
 80088fe:	f7f7 fdbf 	bl	8000480 <__aeabi_dcmpgt>
 8008902:	2800      	cmp	r0, #0
 8008904:	d100      	bne.n	8008908 <_strtod_l+0xb50>
 8008906:	e77b      	b.n	8008800 <_strtod_l+0xa48>
 8008908:	e4c9      	b.n	800829e <_strtod_l+0x4e6>
 800890a:	9b08      	ldr	r3, [sp, #32]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d02b      	beq.n	8008968 <_strtod_l+0xbb0>
 8008910:	23d4      	movs	r3, #212	; 0xd4
 8008912:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008914:	04db      	lsls	r3, r3, #19
 8008916:	429a      	cmp	r2, r3
 8008918:	d826      	bhi.n	8008968 <_strtod_l+0xbb0>
 800891a:	0028      	movs	r0, r5
 800891c:	0021      	movs	r1, r4
 800891e:	4a2d      	ldr	r2, [pc, #180]	; (80089d4 <_strtod_l+0xc1c>)
 8008920:	4b2d      	ldr	r3, [pc, #180]	; (80089d8 <_strtod_l+0xc20>)
 8008922:	f7f7 fda3 	bl	800046c <__aeabi_dcmple>
 8008926:	2800      	cmp	r0, #0
 8008928:	d017      	beq.n	800895a <_strtod_l+0xba2>
 800892a:	0028      	movs	r0, r5
 800892c:	0021      	movs	r1, r4
 800892e:	f7f7 fdbb 	bl	80004a8 <__aeabi_d2uiz>
 8008932:	2800      	cmp	r0, #0
 8008934:	d100      	bne.n	8008938 <_strtod_l+0xb80>
 8008936:	3001      	adds	r0, #1
 8008938:	f7f9 febc 	bl	80026b4 <__aeabi_ui2d>
 800893c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800893e:	0005      	movs	r5, r0
 8008940:	000b      	movs	r3, r1
 8008942:	000c      	movs	r4, r1
 8008944:	2a00      	cmp	r2, #0
 8008946:	d122      	bne.n	800898e <_strtod_l+0xbd6>
 8008948:	2280      	movs	r2, #128	; 0x80
 800894a:	0612      	lsls	r2, r2, #24
 800894c:	188b      	adds	r3, r1, r2
 800894e:	9018      	str	r0, [sp, #96]	; 0x60
 8008950:	9319      	str	r3, [sp, #100]	; 0x64
 8008952:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008954:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008956:	9210      	str	r2, [sp, #64]	; 0x40
 8008958:	9311      	str	r3, [sp, #68]	; 0x44
 800895a:	22d6      	movs	r2, #214	; 0xd6
 800895c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800895e:	04d2      	lsls	r2, r2, #19
 8008960:	189b      	adds	r3, r3, r2
 8008962:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008964:	1a9b      	subs	r3, r3, r2
 8008966:	9311      	str	r3, [sp, #68]	; 0x44
 8008968:	9812      	ldr	r0, [sp, #72]	; 0x48
 800896a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800896c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800896e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8008970:	f001 fedc 	bl	800a72c <__ulp>
 8008974:	0002      	movs	r2, r0
 8008976:	000b      	movs	r3, r1
 8008978:	0030      	movs	r0, r6
 800897a:	0039      	movs	r1, r7
 800897c:	f7f9 f818 	bl	80019b0 <__aeabi_dmul>
 8008980:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008982:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008984:	f7f8 f8d6 	bl	8000b34 <__aeabi_dadd>
 8008988:	0006      	movs	r6, r0
 800898a:	000f      	movs	r7, r1
 800898c:	e78f      	b.n	80088ae <_strtod_l+0xaf6>
 800898e:	0002      	movs	r2, r0
 8008990:	9218      	str	r2, [sp, #96]	; 0x60
 8008992:	9319      	str	r3, [sp, #100]	; 0x64
 8008994:	e7dd      	b.n	8008952 <_strtod_l+0xb9a>
 8008996:	4b11      	ldr	r3, [pc, #68]	; (80089dc <_strtod_l+0xc24>)
 8008998:	f7f7 fd5e 	bl	8000458 <__aeabi_dcmplt>
 800899c:	e7b1      	b.n	8008902 <_strtod_l+0xb4a>
 800899e:	46c0      	nop			; (mov r8, r8)
 80089a0:	fff00000 	.word	0xfff00000
 80089a4:	000fffff 	.word	0x000fffff
 80089a8:	3ff00000 	.word	0x3ff00000
 80089ac:	7ff00000 	.word	0x7ff00000
 80089b0:	7fe00000 	.word	0x7fe00000
 80089b4:	fcb00000 	.word	0xfcb00000
 80089b8:	7c9fffff 	.word	0x7c9fffff
 80089bc:	7fefffff 	.word	0x7fefffff
 80089c0:	3fe00000 	.word	0x3fe00000
 80089c4:	bff00000 	.word	0xbff00000
 80089c8:	94a03595 	.word	0x94a03595
 80089cc:	3fdfffff 	.word	0x3fdfffff
 80089d0:	35afe535 	.word	0x35afe535
 80089d4:	ffc00000 	.word	0xffc00000
 80089d8:	41dfffff 	.word	0x41dfffff
 80089dc:	3fcfffff 	.word	0x3fcfffff

080089e0 <_strtod_r>:
 80089e0:	b510      	push	{r4, lr}
 80089e2:	4b02      	ldr	r3, [pc, #8]	; (80089ec <_strtod_r+0xc>)
 80089e4:	f7ff f9e8 	bl	8007db8 <_strtod_l>
 80089e8:	bd10      	pop	{r4, pc}
 80089ea:	46c0      	nop			; (mov r8, r8)
 80089ec:	2000007c 	.word	0x2000007c

080089f0 <_strtol_l.constprop.0>:
 80089f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089f2:	b087      	sub	sp, #28
 80089f4:	001e      	movs	r6, r3
 80089f6:	9005      	str	r0, [sp, #20]
 80089f8:	9101      	str	r1, [sp, #4]
 80089fa:	9202      	str	r2, [sp, #8]
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d045      	beq.n	8008a8c <_strtol_l.constprop.0+0x9c>
 8008a00:	000b      	movs	r3, r1
 8008a02:	2e24      	cmp	r6, #36	; 0x24
 8008a04:	d842      	bhi.n	8008a8c <_strtol_l.constprop.0+0x9c>
 8008a06:	4a3f      	ldr	r2, [pc, #252]	; (8008b04 <_strtol_l.constprop.0+0x114>)
 8008a08:	2108      	movs	r1, #8
 8008a0a:	4694      	mov	ip, r2
 8008a0c:	001a      	movs	r2, r3
 8008a0e:	4660      	mov	r0, ip
 8008a10:	7814      	ldrb	r4, [r2, #0]
 8008a12:	3301      	adds	r3, #1
 8008a14:	5d00      	ldrb	r0, [r0, r4]
 8008a16:	001d      	movs	r5, r3
 8008a18:	0007      	movs	r7, r0
 8008a1a:	400f      	ands	r7, r1
 8008a1c:	4208      	tst	r0, r1
 8008a1e:	d1f5      	bne.n	8008a0c <_strtol_l.constprop.0+0x1c>
 8008a20:	2c2d      	cmp	r4, #45	; 0x2d
 8008a22:	d13a      	bne.n	8008a9a <_strtol_l.constprop.0+0xaa>
 8008a24:	2701      	movs	r7, #1
 8008a26:	781c      	ldrb	r4, [r3, #0]
 8008a28:	1c95      	adds	r5, r2, #2
 8008a2a:	2e00      	cmp	r6, #0
 8008a2c:	d065      	beq.n	8008afa <_strtol_l.constprop.0+0x10a>
 8008a2e:	2e10      	cmp	r6, #16
 8008a30:	d109      	bne.n	8008a46 <_strtol_l.constprop.0+0x56>
 8008a32:	2c30      	cmp	r4, #48	; 0x30
 8008a34:	d107      	bne.n	8008a46 <_strtol_l.constprop.0+0x56>
 8008a36:	2220      	movs	r2, #32
 8008a38:	782b      	ldrb	r3, [r5, #0]
 8008a3a:	4393      	bics	r3, r2
 8008a3c:	2b58      	cmp	r3, #88	; 0x58
 8008a3e:	d157      	bne.n	8008af0 <_strtol_l.constprop.0+0x100>
 8008a40:	2610      	movs	r6, #16
 8008a42:	786c      	ldrb	r4, [r5, #1]
 8008a44:	3502      	adds	r5, #2
 8008a46:	4b30      	ldr	r3, [pc, #192]	; (8008b08 <_strtol_l.constprop.0+0x118>)
 8008a48:	0031      	movs	r1, r6
 8008a4a:	18fb      	adds	r3, r7, r3
 8008a4c:	0018      	movs	r0, r3
 8008a4e:	9303      	str	r3, [sp, #12]
 8008a50:	f7f7 fbfc 	bl	800024c <__aeabi_uidivmod>
 8008a54:	2300      	movs	r3, #0
 8008a56:	2201      	movs	r2, #1
 8008a58:	4684      	mov	ip, r0
 8008a5a:	0018      	movs	r0, r3
 8008a5c:	9104      	str	r1, [sp, #16]
 8008a5e:	4252      	negs	r2, r2
 8008a60:	0021      	movs	r1, r4
 8008a62:	3930      	subs	r1, #48	; 0x30
 8008a64:	2909      	cmp	r1, #9
 8008a66:	d81d      	bhi.n	8008aa4 <_strtol_l.constprop.0+0xb4>
 8008a68:	000c      	movs	r4, r1
 8008a6a:	42a6      	cmp	r6, r4
 8008a6c:	dd28      	ble.n	8008ac0 <_strtol_l.constprop.0+0xd0>
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	db24      	blt.n	8008abc <_strtol_l.constprop.0+0xcc>
 8008a72:	0013      	movs	r3, r2
 8008a74:	4584      	cmp	ip, r0
 8008a76:	d306      	bcc.n	8008a86 <_strtol_l.constprop.0+0x96>
 8008a78:	d102      	bne.n	8008a80 <_strtol_l.constprop.0+0x90>
 8008a7a:	9904      	ldr	r1, [sp, #16]
 8008a7c:	42a1      	cmp	r1, r4
 8008a7e:	db02      	blt.n	8008a86 <_strtol_l.constprop.0+0x96>
 8008a80:	2301      	movs	r3, #1
 8008a82:	4370      	muls	r0, r6
 8008a84:	1820      	adds	r0, r4, r0
 8008a86:	782c      	ldrb	r4, [r5, #0]
 8008a88:	3501      	adds	r5, #1
 8008a8a:	e7e9      	b.n	8008a60 <_strtol_l.constprop.0+0x70>
 8008a8c:	f7fe fa3a 	bl	8006f04 <__errno>
 8008a90:	2316      	movs	r3, #22
 8008a92:	6003      	str	r3, [r0, #0]
 8008a94:	2000      	movs	r0, #0
 8008a96:	b007      	add	sp, #28
 8008a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a9a:	2c2b      	cmp	r4, #43	; 0x2b
 8008a9c:	d1c5      	bne.n	8008a2a <_strtol_l.constprop.0+0x3a>
 8008a9e:	781c      	ldrb	r4, [r3, #0]
 8008aa0:	1c95      	adds	r5, r2, #2
 8008aa2:	e7c2      	b.n	8008a2a <_strtol_l.constprop.0+0x3a>
 8008aa4:	0021      	movs	r1, r4
 8008aa6:	3941      	subs	r1, #65	; 0x41
 8008aa8:	2919      	cmp	r1, #25
 8008aaa:	d801      	bhi.n	8008ab0 <_strtol_l.constprop.0+0xc0>
 8008aac:	3c37      	subs	r4, #55	; 0x37
 8008aae:	e7dc      	b.n	8008a6a <_strtol_l.constprop.0+0x7a>
 8008ab0:	0021      	movs	r1, r4
 8008ab2:	3961      	subs	r1, #97	; 0x61
 8008ab4:	2919      	cmp	r1, #25
 8008ab6:	d803      	bhi.n	8008ac0 <_strtol_l.constprop.0+0xd0>
 8008ab8:	3c57      	subs	r4, #87	; 0x57
 8008aba:	e7d6      	b.n	8008a6a <_strtol_l.constprop.0+0x7a>
 8008abc:	0013      	movs	r3, r2
 8008abe:	e7e2      	b.n	8008a86 <_strtol_l.constprop.0+0x96>
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	da09      	bge.n	8008ad8 <_strtol_l.constprop.0+0xe8>
 8008ac4:	2322      	movs	r3, #34	; 0x22
 8008ac6:	9a05      	ldr	r2, [sp, #20]
 8008ac8:	9803      	ldr	r0, [sp, #12]
 8008aca:	6013      	str	r3, [r2, #0]
 8008acc:	9b02      	ldr	r3, [sp, #8]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d0e1      	beq.n	8008a96 <_strtol_l.constprop.0+0xa6>
 8008ad2:	1e6b      	subs	r3, r5, #1
 8008ad4:	9301      	str	r3, [sp, #4]
 8008ad6:	e007      	b.n	8008ae8 <_strtol_l.constprop.0+0xf8>
 8008ad8:	2f00      	cmp	r7, #0
 8008ada:	d000      	beq.n	8008ade <_strtol_l.constprop.0+0xee>
 8008adc:	4240      	negs	r0, r0
 8008ade:	9a02      	ldr	r2, [sp, #8]
 8008ae0:	2a00      	cmp	r2, #0
 8008ae2:	d0d8      	beq.n	8008a96 <_strtol_l.constprop.0+0xa6>
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1f4      	bne.n	8008ad2 <_strtol_l.constprop.0+0xe2>
 8008ae8:	9b02      	ldr	r3, [sp, #8]
 8008aea:	9a01      	ldr	r2, [sp, #4]
 8008aec:	601a      	str	r2, [r3, #0]
 8008aee:	e7d2      	b.n	8008a96 <_strtol_l.constprop.0+0xa6>
 8008af0:	2430      	movs	r4, #48	; 0x30
 8008af2:	2e00      	cmp	r6, #0
 8008af4:	d1a7      	bne.n	8008a46 <_strtol_l.constprop.0+0x56>
 8008af6:	3608      	adds	r6, #8
 8008af8:	e7a5      	b.n	8008a46 <_strtol_l.constprop.0+0x56>
 8008afa:	2c30      	cmp	r4, #48	; 0x30
 8008afc:	d09b      	beq.n	8008a36 <_strtol_l.constprop.0+0x46>
 8008afe:	260a      	movs	r6, #10
 8008b00:	e7a1      	b.n	8008a46 <_strtol_l.constprop.0+0x56>
 8008b02:	46c0      	nop			; (mov r8, r8)
 8008b04:	0800c491 	.word	0x0800c491
 8008b08:	7fffffff 	.word	0x7fffffff

08008b0c <_strtol_r>:
 8008b0c:	b510      	push	{r4, lr}
 8008b0e:	f7ff ff6f 	bl	80089f0 <_strtol_l.constprop.0>
 8008b12:	bd10      	pop	{r4, pc}

08008b14 <_write_r>:
 8008b14:	b570      	push	{r4, r5, r6, lr}
 8008b16:	0004      	movs	r4, r0
 8008b18:	0008      	movs	r0, r1
 8008b1a:	0011      	movs	r1, r2
 8008b1c:	001a      	movs	r2, r3
 8008b1e:	2300      	movs	r3, #0
 8008b20:	4d05      	ldr	r5, [pc, #20]	; (8008b38 <_write_r+0x24>)
 8008b22:	602b      	str	r3, [r5, #0]
 8008b24:	f7fa fc1d 	bl	8003362 <_write>
 8008b28:	1c43      	adds	r3, r0, #1
 8008b2a:	d103      	bne.n	8008b34 <_write_r+0x20>
 8008b2c:	682b      	ldr	r3, [r5, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d000      	beq.n	8008b34 <_write_r+0x20>
 8008b32:	6023      	str	r3, [r4, #0]
 8008b34:	bd70      	pop	{r4, r5, r6, pc}
 8008b36:	46c0      	nop			; (mov r8, r8)
 8008b38:	20000428 	.word	0x20000428

08008b3c <_close_r>:
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	b570      	push	{r4, r5, r6, lr}
 8008b40:	4d06      	ldr	r5, [pc, #24]	; (8008b5c <_close_r+0x20>)
 8008b42:	0004      	movs	r4, r0
 8008b44:	0008      	movs	r0, r1
 8008b46:	602b      	str	r3, [r5, #0]
 8008b48:	f7fa fc27 	bl	800339a <_close>
 8008b4c:	1c43      	adds	r3, r0, #1
 8008b4e:	d103      	bne.n	8008b58 <_close_r+0x1c>
 8008b50:	682b      	ldr	r3, [r5, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d000      	beq.n	8008b58 <_close_r+0x1c>
 8008b56:	6023      	str	r3, [r4, #0]
 8008b58:	bd70      	pop	{r4, r5, r6, pc}
 8008b5a:	46c0      	nop			; (mov r8, r8)
 8008b5c:	20000428 	.word	0x20000428

08008b60 <quorem>:
 8008b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b62:	0006      	movs	r6, r0
 8008b64:	690b      	ldr	r3, [r1, #16]
 8008b66:	6932      	ldr	r2, [r6, #16]
 8008b68:	b087      	sub	sp, #28
 8008b6a:	2000      	movs	r0, #0
 8008b6c:	9103      	str	r1, [sp, #12]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	db65      	blt.n	8008c3e <quorem+0xde>
 8008b72:	3b01      	subs	r3, #1
 8008b74:	009c      	lsls	r4, r3, #2
 8008b76:	9300      	str	r3, [sp, #0]
 8008b78:	000b      	movs	r3, r1
 8008b7a:	3314      	adds	r3, #20
 8008b7c:	9305      	str	r3, [sp, #20]
 8008b7e:	191b      	adds	r3, r3, r4
 8008b80:	9304      	str	r3, [sp, #16]
 8008b82:	0033      	movs	r3, r6
 8008b84:	3314      	adds	r3, #20
 8008b86:	9302      	str	r3, [sp, #8]
 8008b88:	191c      	adds	r4, r3, r4
 8008b8a:	9b04      	ldr	r3, [sp, #16]
 8008b8c:	6827      	ldr	r7, [r4, #0]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	0038      	movs	r0, r7
 8008b92:	1c5d      	adds	r5, r3, #1
 8008b94:	0029      	movs	r1, r5
 8008b96:	9301      	str	r3, [sp, #4]
 8008b98:	f7f7 fad2 	bl	8000140 <__udivsi3>
 8008b9c:	9001      	str	r0, [sp, #4]
 8008b9e:	42af      	cmp	r7, r5
 8008ba0:	d324      	bcc.n	8008bec <quorem+0x8c>
 8008ba2:	2500      	movs	r5, #0
 8008ba4:	46ac      	mov	ip, r5
 8008ba6:	9802      	ldr	r0, [sp, #8]
 8008ba8:	9f05      	ldr	r7, [sp, #20]
 8008baa:	cf08      	ldmia	r7!, {r3}
 8008bac:	9a01      	ldr	r2, [sp, #4]
 8008bae:	b299      	uxth	r1, r3
 8008bb0:	4351      	muls	r1, r2
 8008bb2:	0c1b      	lsrs	r3, r3, #16
 8008bb4:	4353      	muls	r3, r2
 8008bb6:	1949      	adds	r1, r1, r5
 8008bb8:	0c0a      	lsrs	r2, r1, #16
 8008bba:	189b      	adds	r3, r3, r2
 8008bbc:	6802      	ldr	r2, [r0, #0]
 8008bbe:	b289      	uxth	r1, r1
 8008bc0:	b292      	uxth	r2, r2
 8008bc2:	4462      	add	r2, ip
 8008bc4:	1a52      	subs	r2, r2, r1
 8008bc6:	6801      	ldr	r1, [r0, #0]
 8008bc8:	0c1d      	lsrs	r5, r3, #16
 8008bca:	0c09      	lsrs	r1, r1, #16
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	1acb      	subs	r3, r1, r3
 8008bd0:	1411      	asrs	r1, r2, #16
 8008bd2:	185b      	adds	r3, r3, r1
 8008bd4:	1419      	asrs	r1, r3, #16
 8008bd6:	b292      	uxth	r2, r2
 8008bd8:	041b      	lsls	r3, r3, #16
 8008bda:	431a      	orrs	r2, r3
 8008bdc:	9b04      	ldr	r3, [sp, #16]
 8008bde:	468c      	mov	ip, r1
 8008be0:	c004      	stmia	r0!, {r2}
 8008be2:	42bb      	cmp	r3, r7
 8008be4:	d2e1      	bcs.n	8008baa <quorem+0x4a>
 8008be6:	6823      	ldr	r3, [r4, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d030      	beq.n	8008c4e <quorem+0xee>
 8008bec:	0030      	movs	r0, r6
 8008bee:	9903      	ldr	r1, [sp, #12]
 8008bf0:	f001 fce8 	bl	800a5c4 <__mcmp>
 8008bf4:	2800      	cmp	r0, #0
 8008bf6:	db21      	blt.n	8008c3c <quorem+0xdc>
 8008bf8:	0030      	movs	r0, r6
 8008bfa:	2400      	movs	r4, #0
 8008bfc:	9b01      	ldr	r3, [sp, #4]
 8008bfe:	9903      	ldr	r1, [sp, #12]
 8008c00:	3301      	adds	r3, #1
 8008c02:	9301      	str	r3, [sp, #4]
 8008c04:	3014      	adds	r0, #20
 8008c06:	3114      	adds	r1, #20
 8008c08:	6803      	ldr	r3, [r0, #0]
 8008c0a:	c920      	ldmia	r1!, {r5}
 8008c0c:	b29a      	uxth	r2, r3
 8008c0e:	1914      	adds	r4, r2, r4
 8008c10:	b2aa      	uxth	r2, r5
 8008c12:	1aa2      	subs	r2, r4, r2
 8008c14:	0c1b      	lsrs	r3, r3, #16
 8008c16:	0c2d      	lsrs	r5, r5, #16
 8008c18:	1414      	asrs	r4, r2, #16
 8008c1a:	1b5b      	subs	r3, r3, r5
 8008c1c:	191b      	adds	r3, r3, r4
 8008c1e:	141c      	asrs	r4, r3, #16
 8008c20:	b292      	uxth	r2, r2
 8008c22:	041b      	lsls	r3, r3, #16
 8008c24:	4313      	orrs	r3, r2
 8008c26:	c008      	stmia	r0!, {r3}
 8008c28:	9b04      	ldr	r3, [sp, #16]
 8008c2a:	428b      	cmp	r3, r1
 8008c2c:	d2ec      	bcs.n	8008c08 <quorem+0xa8>
 8008c2e:	9b00      	ldr	r3, [sp, #0]
 8008c30:	9a02      	ldr	r2, [sp, #8]
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	18d3      	adds	r3, r2, r3
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	2a00      	cmp	r2, #0
 8008c3a:	d015      	beq.n	8008c68 <quorem+0x108>
 8008c3c:	9801      	ldr	r0, [sp, #4]
 8008c3e:	b007      	add	sp, #28
 8008c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c42:	6823      	ldr	r3, [r4, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d106      	bne.n	8008c56 <quorem+0xf6>
 8008c48:	9b00      	ldr	r3, [sp, #0]
 8008c4a:	3b01      	subs	r3, #1
 8008c4c:	9300      	str	r3, [sp, #0]
 8008c4e:	9b02      	ldr	r3, [sp, #8]
 8008c50:	3c04      	subs	r4, #4
 8008c52:	42a3      	cmp	r3, r4
 8008c54:	d3f5      	bcc.n	8008c42 <quorem+0xe2>
 8008c56:	9b00      	ldr	r3, [sp, #0]
 8008c58:	6133      	str	r3, [r6, #16]
 8008c5a:	e7c7      	b.n	8008bec <quorem+0x8c>
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	2a00      	cmp	r2, #0
 8008c60:	d106      	bne.n	8008c70 <quorem+0x110>
 8008c62:	9a00      	ldr	r2, [sp, #0]
 8008c64:	3a01      	subs	r2, #1
 8008c66:	9200      	str	r2, [sp, #0]
 8008c68:	9a02      	ldr	r2, [sp, #8]
 8008c6a:	3b04      	subs	r3, #4
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d3f5      	bcc.n	8008c5c <quorem+0xfc>
 8008c70:	9b00      	ldr	r3, [sp, #0]
 8008c72:	6133      	str	r3, [r6, #16]
 8008c74:	e7e2      	b.n	8008c3c <quorem+0xdc>
	...

08008c78 <_dtoa_r>:
 8008c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c7a:	b09d      	sub	sp, #116	; 0x74
 8008c7c:	9202      	str	r2, [sp, #8]
 8008c7e:	9303      	str	r3, [sp, #12]
 8008c80:	9b02      	ldr	r3, [sp, #8]
 8008c82:	9c03      	ldr	r4, [sp, #12]
 8008c84:	9308      	str	r3, [sp, #32]
 8008c86:	9409      	str	r4, [sp, #36]	; 0x24
 8008c88:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008c8a:	0007      	movs	r7, r0
 8008c8c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8008c8e:	2c00      	cmp	r4, #0
 8008c90:	d10e      	bne.n	8008cb0 <_dtoa_r+0x38>
 8008c92:	2010      	movs	r0, #16
 8008c94:	f001 f996 	bl	8009fc4 <malloc>
 8008c98:	1e02      	subs	r2, r0, #0
 8008c9a:	6278      	str	r0, [r7, #36]	; 0x24
 8008c9c:	d104      	bne.n	8008ca8 <_dtoa_r+0x30>
 8008c9e:	21ea      	movs	r1, #234	; 0xea
 8008ca0:	4bc7      	ldr	r3, [pc, #796]	; (8008fc0 <_dtoa_r+0x348>)
 8008ca2:	48c8      	ldr	r0, [pc, #800]	; (8008fc4 <_dtoa_r+0x34c>)
 8008ca4:	f002 fd88 	bl	800b7b8 <__assert_func>
 8008ca8:	6044      	str	r4, [r0, #4]
 8008caa:	6084      	str	r4, [r0, #8]
 8008cac:	6004      	str	r4, [r0, #0]
 8008cae:	60c4      	str	r4, [r0, #12]
 8008cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb2:	6819      	ldr	r1, [r3, #0]
 8008cb4:	2900      	cmp	r1, #0
 8008cb6:	d00a      	beq.n	8008cce <_dtoa_r+0x56>
 8008cb8:	685a      	ldr	r2, [r3, #4]
 8008cba:	2301      	movs	r3, #1
 8008cbc:	4093      	lsls	r3, r2
 8008cbe:	604a      	str	r2, [r1, #4]
 8008cc0:	608b      	str	r3, [r1, #8]
 8008cc2:	0038      	movs	r0, r7
 8008cc4:	f001 f9f2 	bl	800a0ac <_Bfree>
 8008cc8:	2200      	movs	r2, #0
 8008cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ccc:	601a      	str	r2, [r3, #0]
 8008cce:	9b03      	ldr	r3, [sp, #12]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	da20      	bge.n	8008d16 <_dtoa_r+0x9e>
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	602b      	str	r3, [r5, #0]
 8008cd8:	9b03      	ldr	r3, [sp, #12]
 8008cda:	005b      	lsls	r3, r3, #1
 8008cdc:	085b      	lsrs	r3, r3, #1
 8008cde:	9309      	str	r3, [sp, #36]	; 0x24
 8008ce0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008ce2:	4bb9      	ldr	r3, [pc, #740]	; (8008fc8 <_dtoa_r+0x350>)
 8008ce4:	4ab8      	ldr	r2, [pc, #736]	; (8008fc8 <_dtoa_r+0x350>)
 8008ce6:	402b      	ands	r3, r5
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d117      	bne.n	8008d1c <_dtoa_r+0xa4>
 8008cec:	4bb7      	ldr	r3, [pc, #732]	; (8008fcc <_dtoa_r+0x354>)
 8008cee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008cf0:	0328      	lsls	r0, r5, #12
 8008cf2:	6013      	str	r3, [r2, #0]
 8008cf4:	9b02      	ldr	r3, [sp, #8]
 8008cf6:	0b00      	lsrs	r0, r0, #12
 8008cf8:	4318      	orrs	r0, r3
 8008cfa:	d101      	bne.n	8008d00 <_dtoa_r+0x88>
 8008cfc:	f000 fdbf 	bl	800987e <_dtoa_r+0xc06>
 8008d00:	48b3      	ldr	r0, [pc, #716]	; (8008fd0 <_dtoa_r+0x358>)
 8008d02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008d04:	9006      	str	r0, [sp, #24]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d002      	beq.n	8008d10 <_dtoa_r+0x98>
 8008d0a:	4bb2      	ldr	r3, [pc, #712]	; (8008fd4 <_dtoa_r+0x35c>)
 8008d0c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008d0e:	6013      	str	r3, [r2, #0]
 8008d10:	9806      	ldr	r0, [sp, #24]
 8008d12:	b01d      	add	sp, #116	; 0x74
 8008d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d16:	2300      	movs	r3, #0
 8008d18:	602b      	str	r3, [r5, #0]
 8008d1a:	e7e1      	b.n	8008ce0 <_dtoa_r+0x68>
 8008d1c:	9b08      	ldr	r3, [sp, #32]
 8008d1e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008d20:	9312      	str	r3, [sp, #72]	; 0x48
 8008d22:	9413      	str	r4, [sp, #76]	; 0x4c
 8008d24:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008d26:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008d28:	2200      	movs	r2, #0
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	f7f7 fb8e 	bl	800044c <__aeabi_dcmpeq>
 8008d30:	1e04      	subs	r4, r0, #0
 8008d32:	d009      	beq.n	8008d48 <_dtoa_r+0xd0>
 8008d34:	2301      	movs	r3, #1
 8008d36:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008d38:	6013      	str	r3, [r2, #0]
 8008d3a:	4ba7      	ldr	r3, [pc, #668]	; (8008fd8 <_dtoa_r+0x360>)
 8008d3c:	9306      	str	r3, [sp, #24]
 8008d3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d0e5      	beq.n	8008d10 <_dtoa_r+0x98>
 8008d44:	4ba5      	ldr	r3, [pc, #660]	; (8008fdc <_dtoa_r+0x364>)
 8008d46:	e7e1      	b.n	8008d0c <_dtoa_r+0x94>
 8008d48:	ab1a      	add	r3, sp, #104	; 0x68
 8008d4a:	9301      	str	r3, [sp, #4]
 8008d4c:	ab1b      	add	r3, sp, #108	; 0x6c
 8008d4e:	9300      	str	r3, [sp, #0]
 8008d50:	0038      	movs	r0, r7
 8008d52:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008d56:	f001 fd5d 	bl	800a814 <__d2b>
 8008d5a:	006e      	lsls	r6, r5, #1
 8008d5c:	9005      	str	r0, [sp, #20]
 8008d5e:	0d76      	lsrs	r6, r6, #21
 8008d60:	d100      	bne.n	8008d64 <_dtoa_r+0xec>
 8008d62:	e07c      	b.n	8008e5e <_dtoa_r+0x1e6>
 8008d64:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008d66:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008d68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008d6a:	4a9d      	ldr	r2, [pc, #628]	; (8008fe0 <_dtoa_r+0x368>)
 8008d6c:	031b      	lsls	r3, r3, #12
 8008d6e:	0b1b      	lsrs	r3, r3, #12
 8008d70:	431a      	orrs	r2, r3
 8008d72:	0011      	movs	r1, r2
 8008d74:	4b9b      	ldr	r3, [pc, #620]	; (8008fe4 <_dtoa_r+0x36c>)
 8008d76:	9418      	str	r4, [sp, #96]	; 0x60
 8008d78:	18f6      	adds	r6, r6, r3
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	4b9a      	ldr	r3, [pc, #616]	; (8008fe8 <_dtoa_r+0x370>)
 8008d7e:	f7f9 f883 	bl	8001e88 <__aeabi_dsub>
 8008d82:	4a9a      	ldr	r2, [pc, #616]	; (8008fec <_dtoa_r+0x374>)
 8008d84:	4b9a      	ldr	r3, [pc, #616]	; (8008ff0 <_dtoa_r+0x378>)
 8008d86:	f7f8 fe13 	bl	80019b0 <__aeabi_dmul>
 8008d8a:	4a9a      	ldr	r2, [pc, #616]	; (8008ff4 <_dtoa_r+0x37c>)
 8008d8c:	4b9a      	ldr	r3, [pc, #616]	; (8008ff8 <_dtoa_r+0x380>)
 8008d8e:	f7f7 fed1 	bl	8000b34 <__aeabi_dadd>
 8008d92:	0004      	movs	r4, r0
 8008d94:	0030      	movs	r0, r6
 8008d96:	000d      	movs	r5, r1
 8008d98:	f7f9 fc5c 	bl	8002654 <__aeabi_i2d>
 8008d9c:	4a97      	ldr	r2, [pc, #604]	; (8008ffc <_dtoa_r+0x384>)
 8008d9e:	4b98      	ldr	r3, [pc, #608]	; (8009000 <_dtoa_r+0x388>)
 8008da0:	f7f8 fe06 	bl	80019b0 <__aeabi_dmul>
 8008da4:	0002      	movs	r2, r0
 8008da6:	000b      	movs	r3, r1
 8008da8:	0020      	movs	r0, r4
 8008daa:	0029      	movs	r1, r5
 8008dac:	f7f7 fec2 	bl	8000b34 <__aeabi_dadd>
 8008db0:	0004      	movs	r4, r0
 8008db2:	000d      	movs	r5, r1
 8008db4:	f7f9 fc18 	bl	80025e8 <__aeabi_d2iz>
 8008db8:	2200      	movs	r2, #0
 8008dba:	9002      	str	r0, [sp, #8]
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	0020      	movs	r0, r4
 8008dc0:	0029      	movs	r1, r5
 8008dc2:	f7f7 fb49 	bl	8000458 <__aeabi_dcmplt>
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	d00b      	beq.n	8008de2 <_dtoa_r+0x16a>
 8008dca:	9802      	ldr	r0, [sp, #8]
 8008dcc:	f7f9 fc42 	bl	8002654 <__aeabi_i2d>
 8008dd0:	002b      	movs	r3, r5
 8008dd2:	0022      	movs	r2, r4
 8008dd4:	f7f7 fb3a 	bl	800044c <__aeabi_dcmpeq>
 8008dd8:	4243      	negs	r3, r0
 8008dda:	4158      	adcs	r0, r3
 8008ddc:	9b02      	ldr	r3, [sp, #8]
 8008dde:	1a1b      	subs	r3, r3, r0
 8008de0:	9302      	str	r3, [sp, #8]
 8008de2:	2301      	movs	r3, #1
 8008de4:	9316      	str	r3, [sp, #88]	; 0x58
 8008de6:	9b02      	ldr	r3, [sp, #8]
 8008de8:	2b16      	cmp	r3, #22
 8008dea:	d80f      	bhi.n	8008e0c <_dtoa_r+0x194>
 8008dec:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008dee:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008df0:	00da      	lsls	r2, r3, #3
 8008df2:	4b84      	ldr	r3, [pc, #528]	; (8009004 <_dtoa_r+0x38c>)
 8008df4:	189b      	adds	r3, r3, r2
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	f7f7 fb2d 	bl	8000458 <__aeabi_dcmplt>
 8008dfe:	2800      	cmp	r0, #0
 8008e00:	d049      	beq.n	8008e96 <_dtoa_r+0x21e>
 8008e02:	9b02      	ldr	r3, [sp, #8]
 8008e04:	3b01      	subs	r3, #1
 8008e06:	9302      	str	r3, [sp, #8]
 8008e08:	2300      	movs	r3, #0
 8008e0a:	9316      	str	r3, [sp, #88]	; 0x58
 8008e0c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008e0e:	1b9e      	subs	r6, r3, r6
 8008e10:	2300      	movs	r3, #0
 8008e12:	930a      	str	r3, [sp, #40]	; 0x28
 8008e14:	0033      	movs	r3, r6
 8008e16:	3b01      	subs	r3, #1
 8008e18:	930d      	str	r3, [sp, #52]	; 0x34
 8008e1a:	d504      	bpl.n	8008e26 <_dtoa_r+0x1ae>
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	1b9b      	subs	r3, r3, r6
 8008e20:	930a      	str	r3, [sp, #40]	; 0x28
 8008e22:	2300      	movs	r3, #0
 8008e24:	930d      	str	r3, [sp, #52]	; 0x34
 8008e26:	9b02      	ldr	r3, [sp, #8]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	db36      	blt.n	8008e9a <_dtoa_r+0x222>
 8008e2c:	9a02      	ldr	r2, [sp, #8]
 8008e2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e30:	4694      	mov	ip, r2
 8008e32:	4463      	add	r3, ip
 8008e34:	930d      	str	r3, [sp, #52]	; 0x34
 8008e36:	2300      	movs	r3, #0
 8008e38:	9215      	str	r2, [sp, #84]	; 0x54
 8008e3a:	930e      	str	r3, [sp, #56]	; 0x38
 8008e3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e3e:	2401      	movs	r4, #1
 8008e40:	2b09      	cmp	r3, #9
 8008e42:	d864      	bhi.n	8008f0e <_dtoa_r+0x296>
 8008e44:	2b05      	cmp	r3, #5
 8008e46:	dd02      	ble.n	8008e4e <_dtoa_r+0x1d6>
 8008e48:	2400      	movs	r4, #0
 8008e4a:	3b04      	subs	r3, #4
 8008e4c:	9322      	str	r3, [sp, #136]	; 0x88
 8008e4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e50:	1e98      	subs	r0, r3, #2
 8008e52:	2803      	cmp	r0, #3
 8008e54:	d864      	bhi.n	8008f20 <_dtoa_r+0x2a8>
 8008e56:	f7f7 f95f 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008e5a:	3829      	.short	0x3829
 8008e5c:	5836      	.short	0x5836
 8008e5e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008e60:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008e62:	189e      	adds	r6, r3, r2
 8008e64:	4b68      	ldr	r3, [pc, #416]	; (8009008 <_dtoa_r+0x390>)
 8008e66:	18f2      	adds	r2, r6, r3
 8008e68:	2a20      	cmp	r2, #32
 8008e6a:	dd0f      	ble.n	8008e8c <_dtoa_r+0x214>
 8008e6c:	2340      	movs	r3, #64	; 0x40
 8008e6e:	1a9b      	subs	r3, r3, r2
 8008e70:	409d      	lsls	r5, r3
 8008e72:	4b66      	ldr	r3, [pc, #408]	; (800900c <_dtoa_r+0x394>)
 8008e74:	9802      	ldr	r0, [sp, #8]
 8008e76:	18f3      	adds	r3, r6, r3
 8008e78:	40d8      	lsrs	r0, r3
 8008e7a:	4328      	orrs	r0, r5
 8008e7c:	f7f9 fc1a 	bl	80026b4 <__aeabi_ui2d>
 8008e80:	2301      	movs	r3, #1
 8008e82:	4c63      	ldr	r4, [pc, #396]	; (8009010 <_dtoa_r+0x398>)
 8008e84:	3e01      	subs	r6, #1
 8008e86:	1909      	adds	r1, r1, r4
 8008e88:	9318      	str	r3, [sp, #96]	; 0x60
 8008e8a:	e776      	b.n	8008d7a <_dtoa_r+0x102>
 8008e8c:	2320      	movs	r3, #32
 8008e8e:	9802      	ldr	r0, [sp, #8]
 8008e90:	1a9b      	subs	r3, r3, r2
 8008e92:	4098      	lsls	r0, r3
 8008e94:	e7f2      	b.n	8008e7c <_dtoa_r+0x204>
 8008e96:	9016      	str	r0, [sp, #88]	; 0x58
 8008e98:	e7b8      	b.n	8008e0c <_dtoa_r+0x194>
 8008e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e9c:	9a02      	ldr	r2, [sp, #8]
 8008e9e:	1a9b      	subs	r3, r3, r2
 8008ea0:	930a      	str	r3, [sp, #40]	; 0x28
 8008ea2:	4253      	negs	r3, r2
 8008ea4:	930e      	str	r3, [sp, #56]	; 0x38
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	9315      	str	r3, [sp, #84]	; 0x54
 8008eaa:	e7c7      	b.n	8008e3c <_dtoa_r+0x1c4>
 8008eac:	2300      	movs	r3, #0
 8008eae:	930f      	str	r3, [sp, #60]	; 0x3c
 8008eb0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008eb2:	930c      	str	r3, [sp, #48]	; 0x30
 8008eb4:	9307      	str	r3, [sp, #28]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	dc13      	bgt.n	8008ee2 <_dtoa_r+0x26a>
 8008eba:	2301      	movs	r3, #1
 8008ebc:	001a      	movs	r2, r3
 8008ebe:	930c      	str	r3, [sp, #48]	; 0x30
 8008ec0:	9307      	str	r3, [sp, #28]
 8008ec2:	9223      	str	r2, [sp, #140]	; 0x8c
 8008ec4:	e00d      	b.n	8008ee2 <_dtoa_r+0x26a>
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	e7f1      	b.n	8008eae <_dtoa_r+0x236>
 8008eca:	2300      	movs	r3, #0
 8008ecc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008ece:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ed0:	4694      	mov	ip, r2
 8008ed2:	9b02      	ldr	r3, [sp, #8]
 8008ed4:	4463      	add	r3, ip
 8008ed6:	930c      	str	r3, [sp, #48]	; 0x30
 8008ed8:	3301      	adds	r3, #1
 8008eda:	9307      	str	r3, [sp, #28]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	dc00      	bgt.n	8008ee2 <_dtoa_r+0x26a>
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ee6:	6042      	str	r2, [r0, #4]
 8008ee8:	3204      	adds	r2, #4
 8008eea:	0015      	movs	r5, r2
 8008eec:	3514      	adds	r5, #20
 8008eee:	6841      	ldr	r1, [r0, #4]
 8008ef0:	429d      	cmp	r5, r3
 8008ef2:	d919      	bls.n	8008f28 <_dtoa_r+0x2b0>
 8008ef4:	0038      	movs	r0, r7
 8008ef6:	f001 f895 	bl	800a024 <_Balloc>
 8008efa:	9006      	str	r0, [sp, #24]
 8008efc:	2800      	cmp	r0, #0
 8008efe:	d117      	bne.n	8008f30 <_dtoa_r+0x2b8>
 8008f00:	21d5      	movs	r1, #213	; 0xd5
 8008f02:	0002      	movs	r2, r0
 8008f04:	4b43      	ldr	r3, [pc, #268]	; (8009014 <_dtoa_r+0x39c>)
 8008f06:	0049      	lsls	r1, r1, #1
 8008f08:	e6cb      	b.n	8008ca2 <_dtoa_r+0x2a>
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e7de      	b.n	8008ecc <_dtoa_r+0x254>
 8008f0e:	2300      	movs	r3, #0
 8008f10:	940f      	str	r4, [sp, #60]	; 0x3c
 8008f12:	9322      	str	r3, [sp, #136]	; 0x88
 8008f14:	3b01      	subs	r3, #1
 8008f16:	930c      	str	r3, [sp, #48]	; 0x30
 8008f18:	9307      	str	r3, [sp, #28]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	3313      	adds	r3, #19
 8008f1e:	e7d0      	b.n	8008ec2 <_dtoa_r+0x24a>
 8008f20:	2301      	movs	r3, #1
 8008f22:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f24:	3b02      	subs	r3, #2
 8008f26:	e7f6      	b.n	8008f16 <_dtoa_r+0x29e>
 8008f28:	3101      	adds	r1, #1
 8008f2a:	6041      	str	r1, [r0, #4]
 8008f2c:	0052      	lsls	r2, r2, #1
 8008f2e:	e7dc      	b.n	8008eea <_dtoa_r+0x272>
 8008f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f32:	9a06      	ldr	r2, [sp, #24]
 8008f34:	601a      	str	r2, [r3, #0]
 8008f36:	9b07      	ldr	r3, [sp, #28]
 8008f38:	2b0e      	cmp	r3, #14
 8008f3a:	d900      	bls.n	8008f3e <_dtoa_r+0x2c6>
 8008f3c:	e0eb      	b.n	8009116 <_dtoa_r+0x49e>
 8008f3e:	2c00      	cmp	r4, #0
 8008f40:	d100      	bne.n	8008f44 <_dtoa_r+0x2cc>
 8008f42:	e0e8      	b.n	8009116 <_dtoa_r+0x49e>
 8008f44:	9b02      	ldr	r3, [sp, #8]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	dd68      	ble.n	800901c <_dtoa_r+0x3a4>
 8008f4a:	001a      	movs	r2, r3
 8008f4c:	210f      	movs	r1, #15
 8008f4e:	4b2d      	ldr	r3, [pc, #180]	; (8009004 <_dtoa_r+0x38c>)
 8008f50:	400a      	ands	r2, r1
 8008f52:	00d2      	lsls	r2, r2, #3
 8008f54:	189b      	adds	r3, r3, r2
 8008f56:	681d      	ldr	r5, [r3, #0]
 8008f58:	685e      	ldr	r6, [r3, #4]
 8008f5a:	9b02      	ldr	r3, [sp, #8]
 8008f5c:	111c      	asrs	r4, r3, #4
 8008f5e:	2302      	movs	r3, #2
 8008f60:	9310      	str	r3, [sp, #64]	; 0x40
 8008f62:	9b02      	ldr	r3, [sp, #8]
 8008f64:	05db      	lsls	r3, r3, #23
 8008f66:	d50b      	bpl.n	8008f80 <_dtoa_r+0x308>
 8008f68:	4b2b      	ldr	r3, [pc, #172]	; (8009018 <_dtoa_r+0x3a0>)
 8008f6a:	400c      	ands	r4, r1
 8008f6c:	6a1a      	ldr	r2, [r3, #32]
 8008f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f70:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008f72:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008f74:	f7f8 f91a 	bl	80011ac <__aeabi_ddiv>
 8008f78:	2303      	movs	r3, #3
 8008f7a:	9008      	str	r0, [sp, #32]
 8008f7c:	9109      	str	r1, [sp, #36]	; 0x24
 8008f7e:	9310      	str	r3, [sp, #64]	; 0x40
 8008f80:	4b25      	ldr	r3, [pc, #148]	; (8009018 <_dtoa_r+0x3a0>)
 8008f82:	9314      	str	r3, [sp, #80]	; 0x50
 8008f84:	2c00      	cmp	r4, #0
 8008f86:	d108      	bne.n	8008f9a <_dtoa_r+0x322>
 8008f88:	9808      	ldr	r0, [sp, #32]
 8008f8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f8c:	002a      	movs	r2, r5
 8008f8e:	0033      	movs	r3, r6
 8008f90:	f7f8 f90c 	bl	80011ac <__aeabi_ddiv>
 8008f94:	9008      	str	r0, [sp, #32]
 8008f96:	9109      	str	r1, [sp, #36]	; 0x24
 8008f98:	e05c      	b.n	8009054 <_dtoa_r+0x3dc>
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	421c      	tst	r4, r3
 8008f9e:	d00b      	beq.n	8008fb8 <_dtoa_r+0x340>
 8008fa0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008fa2:	0028      	movs	r0, r5
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	9310      	str	r3, [sp, #64]	; 0x40
 8008fa8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008faa:	0031      	movs	r1, r6
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	f7f8 fcfe 	bl	80019b0 <__aeabi_dmul>
 8008fb4:	0005      	movs	r5, r0
 8008fb6:	000e      	movs	r6, r1
 8008fb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008fba:	1064      	asrs	r4, r4, #1
 8008fbc:	3308      	adds	r3, #8
 8008fbe:	e7e0      	b.n	8008f82 <_dtoa_r+0x30a>
 8008fc0:	0800c59e 	.word	0x0800c59e
 8008fc4:	0800c5b5 	.word	0x0800c5b5
 8008fc8:	7ff00000 	.word	0x7ff00000
 8008fcc:	0000270f 	.word	0x0000270f
 8008fd0:	0800c59a 	.word	0x0800c59a
 8008fd4:	0800c59d 	.word	0x0800c59d
 8008fd8:	0800c809 	.word	0x0800c809
 8008fdc:	0800c80a 	.word	0x0800c80a
 8008fe0:	3ff00000 	.word	0x3ff00000
 8008fe4:	fffffc01 	.word	0xfffffc01
 8008fe8:	3ff80000 	.word	0x3ff80000
 8008fec:	636f4361 	.word	0x636f4361
 8008ff0:	3fd287a7 	.word	0x3fd287a7
 8008ff4:	8b60c8b3 	.word	0x8b60c8b3
 8008ff8:	3fc68a28 	.word	0x3fc68a28
 8008ffc:	509f79fb 	.word	0x509f79fb
 8009000:	3fd34413 	.word	0x3fd34413
 8009004:	0800c720 	.word	0x0800c720
 8009008:	00000432 	.word	0x00000432
 800900c:	00000412 	.word	0x00000412
 8009010:	fe100000 	.word	0xfe100000
 8009014:	0800c610 	.word	0x0800c610
 8009018:	0800c6f8 	.word	0x0800c6f8
 800901c:	2302      	movs	r3, #2
 800901e:	9310      	str	r3, [sp, #64]	; 0x40
 8009020:	9b02      	ldr	r3, [sp, #8]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d016      	beq.n	8009054 <_dtoa_r+0x3dc>
 8009026:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009028:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800902a:	425c      	negs	r4, r3
 800902c:	230f      	movs	r3, #15
 800902e:	4ab6      	ldr	r2, [pc, #728]	; (8009308 <_dtoa_r+0x690>)
 8009030:	4023      	ands	r3, r4
 8009032:	00db      	lsls	r3, r3, #3
 8009034:	18d3      	adds	r3, r2, r3
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	f7f8 fcb9 	bl	80019b0 <__aeabi_dmul>
 800903e:	2601      	movs	r6, #1
 8009040:	2300      	movs	r3, #0
 8009042:	9008      	str	r0, [sp, #32]
 8009044:	9109      	str	r1, [sp, #36]	; 0x24
 8009046:	4db1      	ldr	r5, [pc, #708]	; (800930c <_dtoa_r+0x694>)
 8009048:	1124      	asrs	r4, r4, #4
 800904a:	2c00      	cmp	r4, #0
 800904c:	d000      	beq.n	8009050 <_dtoa_r+0x3d8>
 800904e:	e094      	b.n	800917a <_dtoa_r+0x502>
 8009050:	2b00      	cmp	r3, #0
 8009052:	d19f      	bne.n	8008f94 <_dtoa_r+0x31c>
 8009054:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009056:	2b00      	cmp	r3, #0
 8009058:	d100      	bne.n	800905c <_dtoa_r+0x3e4>
 800905a:	e09b      	b.n	8009194 <_dtoa_r+0x51c>
 800905c:	9c08      	ldr	r4, [sp, #32]
 800905e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009060:	2200      	movs	r2, #0
 8009062:	0020      	movs	r0, r4
 8009064:	0029      	movs	r1, r5
 8009066:	4baa      	ldr	r3, [pc, #680]	; (8009310 <_dtoa_r+0x698>)
 8009068:	f7f7 f9f6 	bl	8000458 <__aeabi_dcmplt>
 800906c:	2800      	cmp	r0, #0
 800906e:	d100      	bne.n	8009072 <_dtoa_r+0x3fa>
 8009070:	e090      	b.n	8009194 <_dtoa_r+0x51c>
 8009072:	9b07      	ldr	r3, [sp, #28]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d100      	bne.n	800907a <_dtoa_r+0x402>
 8009078:	e08c      	b.n	8009194 <_dtoa_r+0x51c>
 800907a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800907c:	2b00      	cmp	r3, #0
 800907e:	dd46      	ble.n	800910e <_dtoa_r+0x496>
 8009080:	9b02      	ldr	r3, [sp, #8]
 8009082:	2200      	movs	r2, #0
 8009084:	0020      	movs	r0, r4
 8009086:	0029      	movs	r1, r5
 8009088:	1e5e      	subs	r6, r3, #1
 800908a:	4ba2      	ldr	r3, [pc, #648]	; (8009314 <_dtoa_r+0x69c>)
 800908c:	f7f8 fc90 	bl	80019b0 <__aeabi_dmul>
 8009090:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009092:	9008      	str	r0, [sp, #32]
 8009094:	9109      	str	r1, [sp, #36]	; 0x24
 8009096:	3301      	adds	r3, #1
 8009098:	9310      	str	r3, [sp, #64]	; 0x40
 800909a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800909c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800909e:	9c08      	ldr	r4, [sp, #32]
 80090a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80090a2:	9314      	str	r3, [sp, #80]	; 0x50
 80090a4:	f7f9 fad6 	bl	8002654 <__aeabi_i2d>
 80090a8:	0022      	movs	r2, r4
 80090aa:	002b      	movs	r3, r5
 80090ac:	f7f8 fc80 	bl	80019b0 <__aeabi_dmul>
 80090b0:	2200      	movs	r2, #0
 80090b2:	4b99      	ldr	r3, [pc, #612]	; (8009318 <_dtoa_r+0x6a0>)
 80090b4:	f7f7 fd3e 	bl	8000b34 <__aeabi_dadd>
 80090b8:	9010      	str	r0, [sp, #64]	; 0x40
 80090ba:	9111      	str	r1, [sp, #68]	; 0x44
 80090bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80090be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80090c0:	9208      	str	r2, [sp, #32]
 80090c2:	9309      	str	r3, [sp, #36]	; 0x24
 80090c4:	4a95      	ldr	r2, [pc, #596]	; (800931c <_dtoa_r+0x6a4>)
 80090c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80090c8:	4694      	mov	ip, r2
 80090ca:	4463      	add	r3, ip
 80090cc:	9317      	str	r3, [sp, #92]	; 0x5c
 80090ce:	9309      	str	r3, [sp, #36]	; 0x24
 80090d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d161      	bne.n	800919a <_dtoa_r+0x522>
 80090d6:	2200      	movs	r2, #0
 80090d8:	0020      	movs	r0, r4
 80090da:	0029      	movs	r1, r5
 80090dc:	4b90      	ldr	r3, [pc, #576]	; (8009320 <_dtoa_r+0x6a8>)
 80090de:	f7f8 fed3 	bl	8001e88 <__aeabi_dsub>
 80090e2:	9a08      	ldr	r2, [sp, #32]
 80090e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80090e6:	0004      	movs	r4, r0
 80090e8:	000d      	movs	r5, r1
 80090ea:	f7f7 f9c9 	bl	8000480 <__aeabi_dcmpgt>
 80090ee:	2800      	cmp	r0, #0
 80090f0:	d000      	beq.n	80090f4 <_dtoa_r+0x47c>
 80090f2:	e2af      	b.n	8009654 <_dtoa_r+0x9dc>
 80090f4:	488b      	ldr	r0, [pc, #556]	; (8009324 <_dtoa_r+0x6ac>)
 80090f6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80090f8:	4684      	mov	ip, r0
 80090fa:	4461      	add	r1, ip
 80090fc:	000b      	movs	r3, r1
 80090fe:	0020      	movs	r0, r4
 8009100:	0029      	movs	r1, r5
 8009102:	9a08      	ldr	r2, [sp, #32]
 8009104:	f7f7 f9a8 	bl	8000458 <__aeabi_dcmplt>
 8009108:	2800      	cmp	r0, #0
 800910a:	d000      	beq.n	800910e <_dtoa_r+0x496>
 800910c:	e29f      	b.n	800964e <_dtoa_r+0x9d6>
 800910e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009110:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8009112:	9308      	str	r3, [sp, #32]
 8009114:	9409      	str	r4, [sp, #36]	; 0x24
 8009116:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009118:	2b00      	cmp	r3, #0
 800911a:	da00      	bge.n	800911e <_dtoa_r+0x4a6>
 800911c:	e172      	b.n	8009404 <_dtoa_r+0x78c>
 800911e:	9a02      	ldr	r2, [sp, #8]
 8009120:	2a0e      	cmp	r2, #14
 8009122:	dd00      	ble.n	8009126 <_dtoa_r+0x4ae>
 8009124:	e16e      	b.n	8009404 <_dtoa_r+0x78c>
 8009126:	4b78      	ldr	r3, [pc, #480]	; (8009308 <_dtoa_r+0x690>)
 8009128:	00d2      	lsls	r2, r2, #3
 800912a:	189b      	adds	r3, r3, r2
 800912c:	685c      	ldr	r4, [r3, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	930a      	str	r3, [sp, #40]	; 0x28
 8009132:	940b      	str	r4, [sp, #44]	; 0x2c
 8009134:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009136:	2b00      	cmp	r3, #0
 8009138:	db00      	blt.n	800913c <_dtoa_r+0x4c4>
 800913a:	e0f7      	b.n	800932c <_dtoa_r+0x6b4>
 800913c:	9b07      	ldr	r3, [sp, #28]
 800913e:	2b00      	cmp	r3, #0
 8009140:	dd00      	ble.n	8009144 <_dtoa_r+0x4cc>
 8009142:	e0f3      	b.n	800932c <_dtoa_r+0x6b4>
 8009144:	d000      	beq.n	8009148 <_dtoa_r+0x4d0>
 8009146:	e282      	b.n	800964e <_dtoa_r+0x9d6>
 8009148:	980a      	ldr	r0, [sp, #40]	; 0x28
 800914a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800914c:	2200      	movs	r2, #0
 800914e:	4b74      	ldr	r3, [pc, #464]	; (8009320 <_dtoa_r+0x6a8>)
 8009150:	f7f8 fc2e 	bl	80019b0 <__aeabi_dmul>
 8009154:	9a08      	ldr	r2, [sp, #32]
 8009156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009158:	f7f7 f99c 	bl	8000494 <__aeabi_dcmpge>
 800915c:	9e07      	ldr	r6, [sp, #28]
 800915e:	0035      	movs	r5, r6
 8009160:	2800      	cmp	r0, #0
 8009162:	d000      	beq.n	8009166 <_dtoa_r+0x4ee>
 8009164:	e259      	b.n	800961a <_dtoa_r+0x9a2>
 8009166:	9b06      	ldr	r3, [sp, #24]
 8009168:	9a06      	ldr	r2, [sp, #24]
 800916a:	3301      	adds	r3, #1
 800916c:	9308      	str	r3, [sp, #32]
 800916e:	2331      	movs	r3, #49	; 0x31
 8009170:	7013      	strb	r3, [r2, #0]
 8009172:	9b02      	ldr	r3, [sp, #8]
 8009174:	3301      	adds	r3, #1
 8009176:	9302      	str	r3, [sp, #8]
 8009178:	e254      	b.n	8009624 <_dtoa_r+0x9ac>
 800917a:	4234      	tst	r4, r6
 800917c:	d007      	beq.n	800918e <_dtoa_r+0x516>
 800917e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009180:	3301      	adds	r3, #1
 8009182:	9310      	str	r3, [sp, #64]	; 0x40
 8009184:	682a      	ldr	r2, [r5, #0]
 8009186:	686b      	ldr	r3, [r5, #4]
 8009188:	f7f8 fc12 	bl	80019b0 <__aeabi_dmul>
 800918c:	0033      	movs	r3, r6
 800918e:	1064      	asrs	r4, r4, #1
 8009190:	3508      	adds	r5, #8
 8009192:	e75a      	b.n	800904a <_dtoa_r+0x3d2>
 8009194:	9e02      	ldr	r6, [sp, #8]
 8009196:	9b07      	ldr	r3, [sp, #28]
 8009198:	e780      	b.n	800909c <_dtoa_r+0x424>
 800919a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800919c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800919e:	1e5a      	subs	r2, r3, #1
 80091a0:	4b59      	ldr	r3, [pc, #356]	; (8009308 <_dtoa_r+0x690>)
 80091a2:	00d2      	lsls	r2, r2, #3
 80091a4:	189b      	adds	r3, r3, r2
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	2900      	cmp	r1, #0
 80091ac:	d051      	beq.n	8009252 <_dtoa_r+0x5da>
 80091ae:	2000      	movs	r0, #0
 80091b0:	495d      	ldr	r1, [pc, #372]	; (8009328 <_dtoa_r+0x6b0>)
 80091b2:	f7f7 fffb 	bl	80011ac <__aeabi_ddiv>
 80091b6:	9a08      	ldr	r2, [sp, #32]
 80091b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091ba:	f7f8 fe65 	bl	8001e88 <__aeabi_dsub>
 80091be:	9a06      	ldr	r2, [sp, #24]
 80091c0:	9b06      	ldr	r3, [sp, #24]
 80091c2:	4694      	mov	ip, r2
 80091c4:	9317      	str	r3, [sp, #92]	; 0x5c
 80091c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80091c8:	9010      	str	r0, [sp, #64]	; 0x40
 80091ca:	9111      	str	r1, [sp, #68]	; 0x44
 80091cc:	4463      	add	r3, ip
 80091ce:	9319      	str	r3, [sp, #100]	; 0x64
 80091d0:	0029      	movs	r1, r5
 80091d2:	0020      	movs	r0, r4
 80091d4:	f7f9 fa08 	bl	80025e8 <__aeabi_d2iz>
 80091d8:	9014      	str	r0, [sp, #80]	; 0x50
 80091da:	f7f9 fa3b 	bl	8002654 <__aeabi_i2d>
 80091de:	0002      	movs	r2, r0
 80091e0:	000b      	movs	r3, r1
 80091e2:	0020      	movs	r0, r4
 80091e4:	0029      	movs	r1, r5
 80091e6:	f7f8 fe4f 	bl	8001e88 <__aeabi_dsub>
 80091ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80091ee:	3301      	adds	r3, #1
 80091f0:	9308      	str	r3, [sp, #32]
 80091f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80091f4:	0004      	movs	r4, r0
 80091f6:	3330      	adds	r3, #48	; 0x30
 80091f8:	7013      	strb	r3, [r2, #0]
 80091fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80091fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091fe:	000d      	movs	r5, r1
 8009200:	f7f7 f92a 	bl	8000458 <__aeabi_dcmplt>
 8009204:	2800      	cmp	r0, #0
 8009206:	d175      	bne.n	80092f4 <_dtoa_r+0x67c>
 8009208:	0022      	movs	r2, r4
 800920a:	002b      	movs	r3, r5
 800920c:	2000      	movs	r0, #0
 800920e:	4940      	ldr	r1, [pc, #256]	; (8009310 <_dtoa_r+0x698>)
 8009210:	f7f8 fe3a 	bl	8001e88 <__aeabi_dsub>
 8009214:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009216:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009218:	f7f7 f91e 	bl	8000458 <__aeabi_dcmplt>
 800921c:	2800      	cmp	r0, #0
 800921e:	d000      	beq.n	8009222 <_dtoa_r+0x5aa>
 8009220:	e0d2      	b.n	80093c8 <_dtoa_r+0x750>
 8009222:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009224:	9a08      	ldr	r2, [sp, #32]
 8009226:	4293      	cmp	r3, r2
 8009228:	d100      	bne.n	800922c <_dtoa_r+0x5b4>
 800922a:	e770      	b.n	800910e <_dtoa_r+0x496>
 800922c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800922e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009230:	2200      	movs	r2, #0
 8009232:	4b38      	ldr	r3, [pc, #224]	; (8009314 <_dtoa_r+0x69c>)
 8009234:	f7f8 fbbc 	bl	80019b0 <__aeabi_dmul>
 8009238:	4b36      	ldr	r3, [pc, #216]	; (8009314 <_dtoa_r+0x69c>)
 800923a:	9010      	str	r0, [sp, #64]	; 0x40
 800923c:	9111      	str	r1, [sp, #68]	; 0x44
 800923e:	2200      	movs	r2, #0
 8009240:	0020      	movs	r0, r4
 8009242:	0029      	movs	r1, r5
 8009244:	f7f8 fbb4 	bl	80019b0 <__aeabi_dmul>
 8009248:	9b08      	ldr	r3, [sp, #32]
 800924a:	0004      	movs	r4, r0
 800924c:	000d      	movs	r5, r1
 800924e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009250:	e7be      	b.n	80091d0 <_dtoa_r+0x558>
 8009252:	9808      	ldr	r0, [sp, #32]
 8009254:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009256:	f7f8 fbab 	bl	80019b0 <__aeabi_dmul>
 800925a:	9a06      	ldr	r2, [sp, #24]
 800925c:	9b06      	ldr	r3, [sp, #24]
 800925e:	4694      	mov	ip, r2
 8009260:	9308      	str	r3, [sp, #32]
 8009262:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009264:	9010      	str	r0, [sp, #64]	; 0x40
 8009266:	9111      	str	r1, [sp, #68]	; 0x44
 8009268:	4463      	add	r3, ip
 800926a:	9319      	str	r3, [sp, #100]	; 0x64
 800926c:	0029      	movs	r1, r5
 800926e:	0020      	movs	r0, r4
 8009270:	f7f9 f9ba 	bl	80025e8 <__aeabi_d2iz>
 8009274:	9017      	str	r0, [sp, #92]	; 0x5c
 8009276:	f7f9 f9ed 	bl	8002654 <__aeabi_i2d>
 800927a:	0002      	movs	r2, r0
 800927c:	000b      	movs	r3, r1
 800927e:	0020      	movs	r0, r4
 8009280:	0029      	movs	r1, r5
 8009282:	f7f8 fe01 	bl	8001e88 <__aeabi_dsub>
 8009286:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009288:	9a08      	ldr	r2, [sp, #32]
 800928a:	3330      	adds	r3, #48	; 0x30
 800928c:	7013      	strb	r3, [r2, #0]
 800928e:	0013      	movs	r3, r2
 8009290:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009292:	3301      	adds	r3, #1
 8009294:	0004      	movs	r4, r0
 8009296:	000d      	movs	r5, r1
 8009298:	9308      	str	r3, [sp, #32]
 800929a:	4293      	cmp	r3, r2
 800929c:	d12c      	bne.n	80092f8 <_dtoa_r+0x680>
 800929e:	9810      	ldr	r0, [sp, #64]	; 0x40
 80092a0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80092a2:	9a06      	ldr	r2, [sp, #24]
 80092a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80092a6:	4694      	mov	ip, r2
 80092a8:	4463      	add	r3, ip
 80092aa:	2200      	movs	r2, #0
 80092ac:	9308      	str	r3, [sp, #32]
 80092ae:	4b1e      	ldr	r3, [pc, #120]	; (8009328 <_dtoa_r+0x6b0>)
 80092b0:	f7f7 fc40 	bl	8000b34 <__aeabi_dadd>
 80092b4:	0002      	movs	r2, r0
 80092b6:	000b      	movs	r3, r1
 80092b8:	0020      	movs	r0, r4
 80092ba:	0029      	movs	r1, r5
 80092bc:	f7f7 f8e0 	bl	8000480 <__aeabi_dcmpgt>
 80092c0:	2800      	cmp	r0, #0
 80092c2:	d000      	beq.n	80092c6 <_dtoa_r+0x64e>
 80092c4:	e080      	b.n	80093c8 <_dtoa_r+0x750>
 80092c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80092c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092ca:	2000      	movs	r0, #0
 80092cc:	4916      	ldr	r1, [pc, #88]	; (8009328 <_dtoa_r+0x6b0>)
 80092ce:	f7f8 fddb 	bl	8001e88 <__aeabi_dsub>
 80092d2:	0002      	movs	r2, r0
 80092d4:	000b      	movs	r3, r1
 80092d6:	0020      	movs	r0, r4
 80092d8:	0029      	movs	r1, r5
 80092da:	f7f7 f8bd 	bl	8000458 <__aeabi_dcmplt>
 80092de:	2800      	cmp	r0, #0
 80092e0:	d100      	bne.n	80092e4 <_dtoa_r+0x66c>
 80092e2:	e714      	b.n	800910e <_dtoa_r+0x496>
 80092e4:	9b08      	ldr	r3, [sp, #32]
 80092e6:	001a      	movs	r2, r3
 80092e8:	3a01      	subs	r2, #1
 80092ea:	9208      	str	r2, [sp, #32]
 80092ec:	7812      	ldrb	r2, [r2, #0]
 80092ee:	2a30      	cmp	r2, #48	; 0x30
 80092f0:	d0f8      	beq.n	80092e4 <_dtoa_r+0x66c>
 80092f2:	9308      	str	r3, [sp, #32]
 80092f4:	9602      	str	r6, [sp, #8]
 80092f6:	e055      	b.n	80093a4 <_dtoa_r+0x72c>
 80092f8:	2200      	movs	r2, #0
 80092fa:	4b06      	ldr	r3, [pc, #24]	; (8009314 <_dtoa_r+0x69c>)
 80092fc:	f7f8 fb58 	bl	80019b0 <__aeabi_dmul>
 8009300:	0004      	movs	r4, r0
 8009302:	000d      	movs	r5, r1
 8009304:	e7b2      	b.n	800926c <_dtoa_r+0x5f4>
 8009306:	46c0      	nop			; (mov r8, r8)
 8009308:	0800c720 	.word	0x0800c720
 800930c:	0800c6f8 	.word	0x0800c6f8
 8009310:	3ff00000 	.word	0x3ff00000
 8009314:	40240000 	.word	0x40240000
 8009318:	401c0000 	.word	0x401c0000
 800931c:	fcc00000 	.word	0xfcc00000
 8009320:	40140000 	.word	0x40140000
 8009324:	7cc00000 	.word	0x7cc00000
 8009328:	3fe00000 	.word	0x3fe00000
 800932c:	9b07      	ldr	r3, [sp, #28]
 800932e:	9e06      	ldr	r6, [sp, #24]
 8009330:	3b01      	subs	r3, #1
 8009332:	199b      	adds	r3, r3, r6
 8009334:	930c      	str	r3, [sp, #48]	; 0x30
 8009336:	9c08      	ldr	r4, [sp, #32]
 8009338:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800933a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800933c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800933e:	0020      	movs	r0, r4
 8009340:	0029      	movs	r1, r5
 8009342:	f7f7 ff33 	bl	80011ac <__aeabi_ddiv>
 8009346:	f7f9 f94f 	bl	80025e8 <__aeabi_d2iz>
 800934a:	9007      	str	r0, [sp, #28]
 800934c:	f7f9 f982 	bl	8002654 <__aeabi_i2d>
 8009350:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009354:	f7f8 fb2c 	bl	80019b0 <__aeabi_dmul>
 8009358:	0002      	movs	r2, r0
 800935a:	000b      	movs	r3, r1
 800935c:	0020      	movs	r0, r4
 800935e:	0029      	movs	r1, r5
 8009360:	f7f8 fd92 	bl	8001e88 <__aeabi_dsub>
 8009364:	0033      	movs	r3, r6
 8009366:	9a07      	ldr	r2, [sp, #28]
 8009368:	3601      	adds	r6, #1
 800936a:	3230      	adds	r2, #48	; 0x30
 800936c:	701a      	strb	r2, [r3, #0]
 800936e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009370:	9608      	str	r6, [sp, #32]
 8009372:	429a      	cmp	r2, r3
 8009374:	d139      	bne.n	80093ea <_dtoa_r+0x772>
 8009376:	0002      	movs	r2, r0
 8009378:	000b      	movs	r3, r1
 800937a:	f7f7 fbdb 	bl	8000b34 <__aeabi_dadd>
 800937e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009382:	0004      	movs	r4, r0
 8009384:	000d      	movs	r5, r1
 8009386:	f7f7 f87b 	bl	8000480 <__aeabi_dcmpgt>
 800938a:	2800      	cmp	r0, #0
 800938c:	d11b      	bne.n	80093c6 <_dtoa_r+0x74e>
 800938e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009392:	0020      	movs	r0, r4
 8009394:	0029      	movs	r1, r5
 8009396:	f7f7 f859 	bl	800044c <__aeabi_dcmpeq>
 800939a:	2800      	cmp	r0, #0
 800939c:	d002      	beq.n	80093a4 <_dtoa_r+0x72c>
 800939e:	9b07      	ldr	r3, [sp, #28]
 80093a0:	07db      	lsls	r3, r3, #31
 80093a2:	d410      	bmi.n	80093c6 <_dtoa_r+0x74e>
 80093a4:	0038      	movs	r0, r7
 80093a6:	9905      	ldr	r1, [sp, #20]
 80093a8:	f000 fe80 	bl	800a0ac <_Bfree>
 80093ac:	2300      	movs	r3, #0
 80093ae:	9a08      	ldr	r2, [sp, #32]
 80093b0:	9802      	ldr	r0, [sp, #8]
 80093b2:	7013      	strb	r3, [r2, #0]
 80093b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80093b6:	3001      	adds	r0, #1
 80093b8:	6018      	str	r0, [r3, #0]
 80093ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d100      	bne.n	80093c2 <_dtoa_r+0x74a>
 80093c0:	e4a6      	b.n	8008d10 <_dtoa_r+0x98>
 80093c2:	601a      	str	r2, [r3, #0]
 80093c4:	e4a4      	b.n	8008d10 <_dtoa_r+0x98>
 80093c6:	9e02      	ldr	r6, [sp, #8]
 80093c8:	9b08      	ldr	r3, [sp, #32]
 80093ca:	9308      	str	r3, [sp, #32]
 80093cc:	3b01      	subs	r3, #1
 80093ce:	781a      	ldrb	r2, [r3, #0]
 80093d0:	2a39      	cmp	r2, #57	; 0x39
 80093d2:	d106      	bne.n	80093e2 <_dtoa_r+0x76a>
 80093d4:	9a06      	ldr	r2, [sp, #24]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d1f7      	bne.n	80093ca <_dtoa_r+0x752>
 80093da:	2230      	movs	r2, #48	; 0x30
 80093dc:	9906      	ldr	r1, [sp, #24]
 80093de:	3601      	adds	r6, #1
 80093e0:	700a      	strb	r2, [r1, #0]
 80093e2:	781a      	ldrb	r2, [r3, #0]
 80093e4:	3201      	adds	r2, #1
 80093e6:	701a      	strb	r2, [r3, #0]
 80093e8:	e784      	b.n	80092f4 <_dtoa_r+0x67c>
 80093ea:	2200      	movs	r2, #0
 80093ec:	4baa      	ldr	r3, [pc, #680]	; (8009698 <_dtoa_r+0xa20>)
 80093ee:	f7f8 fadf 	bl	80019b0 <__aeabi_dmul>
 80093f2:	2200      	movs	r2, #0
 80093f4:	2300      	movs	r3, #0
 80093f6:	0004      	movs	r4, r0
 80093f8:	000d      	movs	r5, r1
 80093fa:	f7f7 f827 	bl	800044c <__aeabi_dcmpeq>
 80093fe:	2800      	cmp	r0, #0
 8009400:	d09b      	beq.n	800933a <_dtoa_r+0x6c2>
 8009402:	e7cf      	b.n	80093a4 <_dtoa_r+0x72c>
 8009404:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009406:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009408:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800940a:	2d00      	cmp	r5, #0
 800940c:	d012      	beq.n	8009434 <_dtoa_r+0x7bc>
 800940e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009410:	2a01      	cmp	r2, #1
 8009412:	dc66      	bgt.n	80094e2 <_dtoa_r+0x86a>
 8009414:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009416:	2a00      	cmp	r2, #0
 8009418:	d05d      	beq.n	80094d6 <_dtoa_r+0x85e>
 800941a:	4aa0      	ldr	r2, [pc, #640]	; (800969c <_dtoa_r+0xa24>)
 800941c:	189b      	adds	r3, r3, r2
 800941e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009420:	2101      	movs	r1, #1
 8009422:	18d2      	adds	r2, r2, r3
 8009424:	920a      	str	r2, [sp, #40]	; 0x28
 8009426:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009428:	0038      	movs	r0, r7
 800942a:	18d3      	adds	r3, r2, r3
 800942c:	930d      	str	r3, [sp, #52]	; 0x34
 800942e:	f000 ff39 	bl	800a2a4 <__i2b>
 8009432:	0005      	movs	r5, r0
 8009434:	2c00      	cmp	r4, #0
 8009436:	dd0e      	ble.n	8009456 <_dtoa_r+0x7de>
 8009438:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800943a:	2b00      	cmp	r3, #0
 800943c:	dd0b      	ble.n	8009456 <_dtoa_r+0x7de>
 800943e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009440:	0023      	movs	r3, r4
 8009442:	4294      	cmp	r4, r2
 8009444:	dd00      	ble.n	8009448 <_dtoa_r+0x7d0>
 8009446:	0013      	movs	r3, r2
 8009448:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800944a:	1ae4      	subs	r4, r4, r3
 800944c:	1ad2      	subs	r2, r2, r3
 800944e:	920a      	str	r2, [sp, #40]	; 0x28
 8009450:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009452:	1ad3      	subs	r3, r2, r3
 8009454:	930d      	str	r3, [sp, #52]	; 0x34
 8009456:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009458:	2b00      	cmp	r3, #0
 800945a:	d01f      	beq.n	800949c <_dtoa_r+0x824>
 800945c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800945e:	2b00      	cmp	r3, #0
 8009460:	d054      	beq.n	800950c <_dtoa_r+0x894>
 8009462:	2e00      	cmp	r6, #0
 8009464:	dd11      	ble.n	800948a <_dtoa_r+0x812>
 8009466:	0029      	movs	r1, r5
 8009468:	0032      	movs	r2, r6
 800946a:	0038      	movs	r0, r7
 800946c:	f000 ffe0 	bl	800a430 <__pow5mult>
 8009470:	9a05      	ldr	r2, [sp, #20]
 8009472:	0001      	movs	r1, r0
 8009474:	0005      	movs	r5, r0
 8009476:	0038      	movs	r0, r7
 8009478:	f000 ff2a 	bl	800a2d0 <__multiply>
 800947c:	9905      	ldr	r1, [sp, #20]
 800947e:	9014      	str	r0, [sp, #80]	; 0x50
 8009480:	0038      	movs	r0, r7
 8009482:	f000 fe13 	bl	800a0ac <_Bfree>
 8009486:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009488:	9305      	str	r3, [sp, #20]
 800948a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800948c:	1b9a      	subs	r2, r3, r6
 800948e:	42b3      	cmp	r3, r6
 8009490:	d004      	beq.n	800949c <_dtoa_r+0x824>
 8009492:	0038      	movs	r0, r7
 8009494:	9905      	ldr	r1, [sp, #20]
 8009496:	f000 ffcb 	bl	800a430 <__pow5mult>
 800949a:	9005      	str	r0, [sp, #20]
 800949c:	2101      	movs	r1, #1
 800949e:	0038      	movs	r0, r7
 80094a0:	f000 ff00 	bl	800a2a4 <__i2b>
 80094a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094a6:	0006      	movs	r6, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	dd31      	ble.n	8009510 <_dtoa_r+0x898>
 80094ac:	001a      	movs	r2, r3
 80094ae:	0001      	movs	r1, r0
 80094b0:	0038      	movs	r0, r7
 80094b2:	f000 ffbd 	bl	800a430 <__pow5mult>
 80094b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80094b8:	0006      	movs	r6, r0
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	dd2d      	ble.n	800951a <_dtoa_r+0x8a2>
 80094be:	2300      	movs	r3, #0
 80094c0:	930e      	str	r3, [sp, #56]	; 0x38
 80094c2:	6933      	ldr	r3, [r6, #16]
 80094c4:	3303      	adds	r3, #3
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	18f3      	adds	r3, r6, r3
 80094ca:	6858      	ldr	r0, [r3, #4]
 80094cc:	f000 fea2 	bl	800a214 <__hi0bits>
 80094d0:	2320      	movs	r3, #32
 80094d2:	1a18      	subs	r0, r3, r0
 80094d4:	e039      	b.n	800954a <_dtoa_r+0x8d2>
 80094d6:	2336      	movs	r3, #54	; 0x36
 80094d8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80094da:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80094dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80094de:	1a9b      	subs	r3, r3, r2
 80094e0:	e79d      	b.n	800941e <_dtoa_r+0x7a6>
 80094e2:	9b07      	ldr	r3, [sp, #28]
 80094e4:	1e5e      	subs	r6, r3, #1
 80094e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094e8:	42b3      	cmp	r3, r6
 80094ea:	db07      	blt.n	80094fc <_dtoa_r+0x884>
 80094ec:	1b9e      	subs	r6, r3, r6
 80094ee:	9b07      	ldr	r3, [sp, #28]
 80094f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	da93      	bge.n	800941e <_dtoa_r+0x7a6>
 80094f6:	1ae4      	subs	r4, r4, r3
 80094f8:	2300      	movs	r3, #0
 80094fa:	e790      	b.n	800941e <_dtoa_r+0x7a6>
 80094fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009500:	1af3      	subs	r3, r6, r3
 8009502:	18d3      	adds	r3, r2, r3
 8009504:	960e      	str	r6, [sp, #56]	; 0x38
 8009506:	9315      	str	r3, [sp, #84]	; 0x54
 8009508:	2600      	movs	r6, #0
 800950a:	e7f0      	b.n	80094ee <_dtoa_r+0x876>
 800950c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800950e:	e7c0      	b.n	8009492 <_dtoa_r+0x81a>
 8009510:	2300      	movs	r3, #0
 8009512:	930e      	str	r3, [sp, #56]	; 0x38
 8009514:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009516:	2b01      	cmp	r3, #1
 8009518:	dc13      	bgt.n	8009542 <_dtoa_r+0x8ca>
 800951a:	2300      	movs	r3, #0
 800951c:	930e      	str	r3, [sp, #56]	; 0x38
 800951e:	9b08      	ldr	r3, [sp, #32]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d10e      	bne.n	8009542 <_dtoa_r+0x8ca>
 8009524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009526:	031b      	lsls	r3, r3, #12
 8009528:	d10b      	bne.n	8009542 <_dtoa_r+0x8ca>
 800952a:	4b5d      	ldr	r3, [pc, #372]	; (80096a0 <_dtoa_r+0xa28>)
 800952c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800952e:	4213      	tst	r3, r2
 8009530:	d007      	beq.n	8009542 <_dtoa_r+0x8ca>
 8009532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009534:	3301      	adds	r3, #1
 8009536:	930a      	str	r3, [sp, #40]	; 0x28
 8009538:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800953a:	3301      	adds	r3, #1
 800953c:	930d      	str	r3, [sp, #52]	; 0x34
 800953e:	2301      	movs	r3, #1
 8009540:	930e      	str	r3, [sp, #56]	; 0x38
 8009542:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009544:	2001      	movs	r0, #1
 8009546:	2b00      	cmp	r3, #0
 8009548:	d1bb      	bne.n	80094c2 <_dtoa_r+0x84a>
 800954a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800954c:	221f      	movs	r2, #31
 800954e:	1818      	adds	r0, r3, r0
 8009550:	0003      	movs	r3, r0
 8009552:	4013      	ands	r3, r2
 8009554:	4210      	tst	r0, r2
 8009556:	d046      	beq.n	80095e6 <_dtoa_r+0x96e>
 8009558:	3201      	adds	r2, #1
 800955a:	1ad2      	subs	r2, r2, r3
 800955c:	2a04      	cmp	r2, #4
 800955e:	dd3f      	ble.n	80095e0 <_dtoa_r+0x968>
 8009560:	221c      	movs	r2, #28
 8009562:	1ad3      	subs	r3, r2, r3
 8009564:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009566:	18e4      	adds	r4, r4, r3
 8009568:	18d2      	adds	r2, r2, r3
 800956a:	920a      	str	r2, [sp, #40]	; 0x28
 800956c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800956e:	18d3      	adds	r3, r2, r3
 8009570:	930d      	str	r3, [sp, #52]	; 0x34
 8009572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009574:	2b00      	cmp	r3, #0
 8009576:	dd05      	ble.n	8009584 <_dtoa_r+0x90c>
 8009578:	001a      	movs	r2, r3
 800957a:	0038      	movs	r0, r7
 800957c:	9905      	ldr	r1, [sp, #20]
 800957e:	f000 ffb3 	bl	800a4e8 <__lshift>
 8009582:	9005      	str	r0, [sp, #20]
 8009584:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009586:	2b00      	cmp	r3, #0
 8009588:	dd05      	ble.n	8009596 <_dtoa_r+0x91e>
 800958a:	0031      	movs	r1, r6
 800958c:	001a      	movs	r2, r3
 800958e:	0038      	movs	r0, r7
 8009590:	f000 ffaa 	bl	800a4e8 <__lshift>
 8009594:	0006      	movs	r6, r0
 8009596:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009598:	2b00      	cmp	r3, #0
 800959a:	d026      	beq.n	80095ea <_dtoa_r+0x972>
 800959c:	0031      	movs	r1, r6
 800959e:	9805      	ldr	r0, [sp, #20]
 80095a0:	f001 f810 	bl	800a5c4 <__mcmp>
 80095a4:	2800      	cmp	r0, #0
 80095a6:	da20      	bge.n	80095ea <_dtoa_r+0x972>
 80095a8:	9b02      	ldr	r3, [sp, #8]
 80095aa:	220a      	movs	r2, #10
 80095ac:	3b01      	subs	r3, #1
 80095ae:	9302      	str	r3, [sp, #8]
 80095b0:	0038      	movs	r0, r7
 80095b2:	2300      	movs	r3, #0
 80095b4:	9905      	ldr	r1, [sp, #20]
 80095b6:	f000 fd9d 	bl	800a0f4 <__multadd>
 80095ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095bc:	9005      	str	r0, [sp, #20]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d100      	bne.n	80095c4 <_dtoa_r+0x94c>
 80095c2:	e166      	b.n	8009892 <_dtoa_r+0xc1a>
 80095c4:	2300      	movs	r3, #0
 80095c6:	0029      	movs	r1, r5
 80095c8:	220a      	movs	r2, #10
 80095ca:	0038      	movs	r0, r7
 80095cc:	f000 fd92 	bl	800a0f4 <__multadd>
 80095d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095d2:	0005      	movs	r5, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	dc47      	bgt.n	8009668 <_dtoa_r+0x9f0>
 80095d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80095da:	2b02      	cmp	r3, #2
 80095dc:	dc0d      	bgt.n	80095fa <_dtoa_r+0x982>
 80095de:	e043      	b.n	8009668 <_dtoa_r+0x9f0>
 80095e0:	2a04      	cmp	r2, #4
 80095e2:	d0c6      	beq.n	8009572 <_dtoa_r+0x8fa>
 80095e4:	0013      	movs	r3, r2
 80095e6:	331c      	adds	r3, #28
 80095e8:	e7bc      	b.n	8009564 <_dtoa_r+0x8ec>
 80095ea:	9b07      	ldr	r3, [sp, #28]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	dc35      	bgt.n	800965c <_dtoa_r+0x9e4>
 80095f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80095f2:	2b02      	cmp	r3, #2
 80095f4:	dd32      	ble.n	800965c <_dtoa_r+0x9e4>
 80095f6:	9b07      	ldr	r3, [sp, #28]
 80095f8:	930c      	str	r3, [sp, #48]	; 0x30
 80095fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d10c      	bne.n	800961a <_dtoa_r+0x9a2>
 8009600:	0031      	movs	r1, r6
 8009602:	2205      	movs	r2, #5
 8009604:	0038      	movs	r0, r7
 8009606:	f000 fd75 	bl	800a0f4 <__multadd>
 800960a:	0006      	movs	r6, r0
 800960c:	0001      	movs	r1, r0
 800960e:	9805      	ldr	r0, [sp, #20]
 8009610:	f000 ffd8 	bl	800a5c4 <__mcmp>
 8009614:	2800      	cmp	r0, #0
 8009616:	dd00      	ble.n	800961a <_dtoa_r+0x9a2>
 8009618:	e5a5      	b.n	8009166 <_dtoa_r+0x4ee>
 800961a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800961c:	43db      	mvns	r3, r3
 800961e:	9302      	str	r3, [sp, #8]
 8009620:	9b06      	ldr	r3, [sp, #24]
 8009622:	9308      	str	r3, [sp, #32]
 8009624:	2400      	movs	r4, #0
 8009626:	0031      	movs	r1, r6
 8009628:	0038      	movs	r0, r7
 800962a:	f000 fd3f 	bl	800a0ac <_Bfree>
 800962e:	2d00      	cmp	r5, #0
 8009630:	d100      	bne.n	8009634 <_dtoa_r+0x9bc>
 8009632:	e6b7      	b.n	80093a4 <_dtoa_r+0x72c>
 8009634:	2c00      	cmp	r4, #0
 8009636:	d005      	beq.n	8009644 <_dtoa_r+0x9cc>
 8009638:	42ac      	cmp	r4, r5
 800963a:	d003      	beq.n	8009644 <_dtoa_r+0x9cc>
 800963c:	0021      	movs	r1, r4
 800963e:	0038      	movs	r0, r7
 8009640:	f000 fd34 	bl	800a0ac <_Bfree>
 8009644:	0029      	movs	r1, r5
 8009646:	0038      	movs	r0, r7
 8009648:	f000 fd30 	bl	800a0ac <_Bfree>
 800964c:	e6aa      	b.n	80093a4 <_dtoa_r+0x72c>
 800964e:	2600      	movs	r6, #0
 8009650:	0035      	movs	r5, r6
 8009652:	e7e2      	b.n	800961a <_dtoa_r+0x9a2>
 8009654:	9602      	str	r6, [sp, #8]
 8009656:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8009658:	0035      	movs	r5, r6
 800965a:	e584      	b.n	8009166 <_dtoa_r+0x4ee>
 800965c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800965e:	2b00      	cmp	r3, #0
 8009660:	d100      	bne.n	8009664 <_dtoa_r+0x9ec>
 8009662:	e0ce      	b.n	8009802 <_dtoa_r+0xb8a>
 8009664:	9b07      	ldr	r3, [sp, #28]
 8009666:	930c      	str	r3, [sp, #48]	; 0x30
 8009668:	2c00      	cmp	r4, #0
 800966a:	dd05      	ble.n	8009678 <_dtoa_r+0xa00>
 800966c:	0029      	movs	r1, r5
 800966e:	0022      	movs	r2, r4
 8009670:	0038      	movs	r0, r7
 8009672:	f000 ff39 	bl	800a4e8 <__lshift>
 8009676:	0005      	movs	r5, r0
 8009678:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800967a:	0028      	movs	r0, r5
 800967c:	2b00      	cmp	r3, #0
 800967e:	d022      	beq.n	80096c6 <_dtoa_r+0xa4e>
 8009680:	0038      	movs	r0, r7
 8009682:	6869      	ldr	r1, [r5, #4]
 8009684:	f000 fcce 	bl	800a024 <_Balloc>
 8009688:	1e04      	subs	r4, r0, #0
 800968a:	d10f      	bne.n	80096ac <_dtoa_r+0xa34>
 800968c:	0002      	movs	r2, r0
 800968e:	4b05      	ldr	r3, [pc, #20]	; (80096a4 <_dtoa_r+0xa2c>)
 8009690:	4905      	ldr	r1, [pc, #20]	; (80096a8 <_dtoa_r+0xa30>)
 8009692:	f7ff fb06 	bl	8008ca2 <_dtoa_r+0x2a>
 8009696:	46c0      	nop			; (mov r8, r8)
 8009698:	40240000 	.word	0x40240000
 800969c:	00000433 	.word	0x00000433
 80096a0:	7ff00000 	.word	0x7ff00000
 80096a4:	0800c610 	.word	0x0800c610
 80096a8:	000002ea 	.word	0x000002ea
 80096ac:	0029      	movs	r1, r5
 80096ae:	692b      	ldr	r3, [r5, #16]
 80096b0:	310c      	adds	r1, #12
 80096b2:	1c9a      	adds	r2, r3, #2
 80096b4:	0092      	lsls	r2, r2, #2
 80096b6:	300c      	adds	r0, #12
 80096b8:	f000 fcab 	bl	800a012 <memcpy>
 80096bc:	2201      	movs	r2, #1
 80096be:	0021      	movs	r1, r4
 80096c0:	0038      	movs	r0, r7
 80096c2:	f000 ff11 	bl	800a4e8 <__lshift>
 80096c6:	9b06      	ldr	r3, [sp, #24]
 80096c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096ca:	930a      	str	r3, [sp, #40]	; 0x28
 80096cc:	3b01      	subs	r3, #1
 80096ce:	189b      	adds	r3, r3, r2
 80096d0:	2201      	movs	r2, #1
 80096d2:	002c      	movs	r4, r5
 80096d4:	0005      	movs	r5, r0
 80096d6:	9314      	str	r3, [sp, #80]	; 0x50
 80096d8:	9b08      	ldr	r3, [sp, #32]
 80096da:	4013      	ands	r3, r2
 80096dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80096de:	0031      	movs	r1, r6
 80096e0:	9805      	ldr	r0, [sp, #20]
 80096e2:	f7ff fa3d 	bl	8008b60 <quorem>
 80096e6:	0003      	movs	r3, r0
 80096e8:	0021      	movs	r1, r4
 80096ea:	3330      	adds	r3, #48	; 0x30
 80096ec:	900d      	str	r0, [sp, #52]	; 0x34
 80096ee:	9805      	ldr	r0, [sp, #20]
 80096f0:	9307      	str	r3, [sp, #28]
 80096f2:	f000 ff67 	bl	800a5c4 <__mcmp>
 80096f6:	002a      	movs	r2, r5
 80096f8:	900e      	str	r0, [sp, #56]	; 0x38
 80096fa:	0031      	movs	r1, r6
 80096fc:	0038      	movs	r0, r7
 80096fe:	f000 ff7d 	bl	800a5fc <__mdiff>
 8009702:	68c3      	ldr	r3, [r0, #12]
 8009704:	9008      	str	r0, [sp, #32]
 8009706:	9310      	str	r3, [sp, #64]	; 0x40
 8009708:	2301      	movs	r3, #1
 800970a:	930c      	str	r3, [sp, #48]	; 0x30
 800970c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800970e:	2b00      	cmp	r3, #0
 8009710:	d104      	bne.n	800971c <_dtoa_r+0xaa4>
 8009712:	0001      	movs	r1, r0
 8009714:	9805      	ldr	r0, [sp, #20]
 8009716:	f000 ff55 	bl	800a5c4 <__mcmp>
 800971a:	900c      	str	r0, [sp, #48]	; 0x30
 800971c:	0038      	movs	r0, r7
 800971e:	9908      	ldr	r1, [sp, #32]
 8009720:	f000 fcc4 	bl	800a0ac <_Bfree>
 8009724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009726:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009728:	3301      	adds	r3, #1
 800972a:	9308      	str	r3, [sp, #32]
 800972c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800972e:	4313      	orrs	r3, r2
 8009730:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009732:	4313      	orrs	r3, r2
 8009734:	d10c      	bne.n	8009750 <_dtoa_r+0xad8>
 8009736:	9b07      	ldr	r3, [sp, #28]
 8009738:	2b39      	cmp	r3, #57	; 0x39
 800973a:	d026      	beq.n	800978a <_dtoa_r+0xb12>
 800973c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800973e:	2b00      	cmp	r3, #0
 8009740:	dd02      	ble.n	8009748 <_dtoa_r+0xad0>
 8009742:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009744:	3331      	adds	r3, #49	; 0x31
 8009746:	9307      	str	r3, [sp, #28]
 8009748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800974a:	9a07      	ldr	r2, [sp, #28]
 800974c:	701a      	strb	r2, [r3, #0]
 800974e:	e76a      	b.n	8009626 <_dtoa_r+0x9ae>
 8009750:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009752:	2b00      	cmp	r3, #0
 8009754:	db04      	blt.n	8009760 <_dtoa_r+0xae8>
 8009756:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009758:	4313      	orrs	r3, r2
 800975a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800975c:	4313      	orrs	r3, r2
 800975e:	d11f      	bne.n	80097a0 <_dtoa_r+0xb28>
 8009760:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009762:	2b00      	cmp	r3, #0
 8009764:	ddf0      	ble.n	8009748 <_dtoa_r+0xad0>
 8009766:	9905      	ldr	r1, [sp, #20]
 8009768:	2201      	movs	r2, #1
 800976a:	0038      	movs	r0, r7
 800976c:	f000 febc 	bl	800a4e8 <__lshift>
 8009770:	0031      	movs	r1, r6
 8009772:	9005      	str	r0, [sp, #20]
 8009774:	f000 ff26 	bl	800a5c4 <__mcmp>
 8009778:	2800      	cmp	r0, #0
 800977a:	dc03      	bgt.n	8009784 <_dtoa_r+0xb0c>
 800977c:	d1e4      	bne.n	8009748 <_dtoa_r+0xad0>
 800977e:	9b07      	ldr	r3, [sp, #28]
 8009780:	07db      	lsls	r3, r3, #31
 8009782:	d5e1      	bpl.n	8009748 <_dtoa_r+0xad0>
 8009784:	9b07      	ldr	r3, [sp, #28]
 8009786:	2b39      	cmp	r3, #57	; 0x39
 8009788:	d1db      	bne.n	8009742 <_dtoa_r+0xaca>
 800978a:	2339      	movs	r3, #57	; 0x39
 800978c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800978e:	7013      	strb	r3, [r2, #0]
 8009790:	9b08      	ldr	r3, [sp, #32]
 8009792:	9308      	str	r3, [sp, #32]
 8009794:	3b01      	subs	r3, #1
 8009796:	781a      	ldrb	r2, [r3, #0]
 8009798:	2a39      	cmp	r2, #57	; 0x39
 800979a:	d068      	beq.n	800986e <_dtoa_r+0xbf6>
 800979c:	3201      	adds	r2, #1
 800979e:	e7d5      	b.n	800974c <_dtoa_r+0xad4>
 80097a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	dd07      	ble.n	80097b6 <_dtoa_r+0xb3e>
 80097a6:	9b07      	ldr	r3, [sp, #28]
 80097a8:	2b39      	cmp	r3, #57	; 0x39
 80097aa:	d0ee      	beq.n	800978a <_dtoa_r+0xb12>
 80097ac:	9b07      	ldr	r3, [sp, #28]
 80097ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097b0:	3301      	adds	r3, #1
 80097b2:	7013      	strb	r3, [r2, #0]
 80097b4:	e737      	b.n	8009626 <_dtoa_r+0x9ae>
 80097b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097b8:	9a07      	ldr	r2, [sp, #28]
 80097ba:	701a      	strb	r2, [r3, #0]
 80097bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80097be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d03e      	beq.n	8009842 <_dtoa_r+0xbca>
 80097c4:	2300      	movs	r3, #0
 80097c6:	220a      	movs	r2, #10
 80097c8:	9905      	ldr	r1, [sp, #20]
 80097ca:	0038      	movs	r0, r7
 80097cc:	f000 fc92 	bl	800a0f4 <__multadd>
 80097d0:	2300      	movs	r3, #0
 80097d2:	9005      	str	r0, [sp, #20]
 80097d4:	220a      	movs	r2, #10
 80097d6:	0021      	movs	r1, r4
 80097d8:	0038      	movs	r0, r7
 80097da:	42ac      	cmp	r4, r5
 80097dc:	d106      	bne.n	80097ec <_dtoa_r+0xb74>
 80097de:	f000 fc89 	bl	800a0f4 <__multadd>
 80097e2:	0004      	movs	r4, r0
 80097e4:	0005      	movs	r5, r0
 80097e6:	9b08      	ldr	r3, [sp, #32]
 80097e8:	930a      	str	r3, [sp, #40]	; 0x28
 80097ea:	e778      	b.n	80096de <_dtoa_r+0xa66>
 80097ec:	f000 fc82 	bl	800a0f4 <__multadd>
 80097f0:	0029      	movs	r1, r5
 80097f2:	0004      	movs	r4, r0
 80097f4:	2300      	movs	r3, #0
 80097f6:	220a      	movs	r2, #10
 80097f8:	0038      	movs	r0, r7
 80097fa:	f000 fc7b 	bl	800a0f4 <__multadd>
 80097fe:	0005      	movs	r5, r0
 8009800:	e7f1      	b.n	80097e6 <_dtoa_r+0xb6e>
 8009802:	9b07      	ldr	r3, [sp, #28]
 8009804:	930c      	str	r3, [sp, #48]	; 0x30
 8009806:	2400      	movs	r4, #0
 8009808:	0031      	movs	r1, r6
 800980a:	9805      	ldr	r0, [sp, #20]
 800980c:	f7ff f9a8 	bl	8008b60 <quorem>
 8009810:	9b06      	ldr	r3, [sp, #24]
 8009812:	3030      	adds	r0, #48	; 0x30
 8009814:	5518      	strb	r0, [r3, r4]
 8009816:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009818:	3401      	adds	r4, #1
 800981a:	9007      	str	r0, [sp, #28]
 800981c:	42a3      	cmp	r3, r4
 800981e:	dd07      	ble.n	8009830 <_dtoa_r+0xbb8>
 8009820:	2300      	movs	r3, #0
 8009822:	220a      	movs	r2, #10
 8009824:	0038      	movs	r0, r7
 8009826:	9905      	ldr	r1, [sp, #20]
 8009828:	f000 fc64 	bl	800a0f4 <__multadd>
 800982c:	9005      	str	r0, [sp, #20]
 800982e:	e7eb      	b.n	8009808 <_dtoa_r+0xb90>
 8009830:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009832:	2001      	movs	r0, #1
 8009834:	2b00      	cmp	r3, #0
 8009836:	dd00      	ble.n	800983a <_dtoa_r+0xbc2>
 8009838:	0018      	movs	r0, r3
 800983a:	2400      	movs	r4, #0
 800983c:	9b06      	ldr	r3, [sp, #24]
 800983e:	181b      	adds	r3, r3, r0
 8009840:	9308      	str	r3, [sp, #32]
 8009842:	9905      	ldr	r1, [sp, #20]
 8009844:	2201      	movs	r2, #1
 8009846:	0038      	movs	r0, r7
 8009848:	f000 fe4e 	bl	800a4e8 <__lshift>
 800984c:	0031      	movs	r1, r6
 800984e:	9005      	str	r0, [sp, #20]
 8009850:	f000 feb8 	bl	800a5c4 <__mcmp>
 8009854:	2800      	cmp	r0, #0
 8009856:	dc9b      	bgt.n	8009790 <_dtoa_r+0xb18>
 8009858:	d102      	bne.n	8009860 <_dtoa_r+0xbe8>
 800985a:	9b07      	ldr	r3, [sp, #28]
 800985c:	07db      	lsls	r3, r3, #31
 800985e:	d497      	bmi.n	8009790 <_dtoa_r+0xb18>
 8009860:	9b08      	ldr	r3, [sp, #32]
 8009862:	9308      	str	r3, [sp, #32]
 8009864:	3b01      	subs	r3, #1
 8009866:	781a      	ldrb	r2, [r3, #0]
 8009868:	2a30      	cmp	r2, #48	; 0x30
 800986a:	d0fa      	beq.n	8009862 <_dtoa_r+0xbea>
 800986c:	e6db      	b.n	8009626 <_dtoa_r+0x9ae>
 800986e:	9a06      	ldr	r2, [sp, #24]
 8009870:	429a      	cmp	r2, r3
 8009872:	d18e      	bne.n	8009792 <_dtoa_r+0xb1a>
 8009874:	9b02      	ldr	r3, [sp, #8]
 8009876:	3301      	adds	r3, #1
 8009878:	9302      	str	r3, [sp, #8]
 800987a:	2331      	movs	r3, #49	; 0x31
 800987c:	e799      	b.n	80097b2 <_dtoa_r+0xb3a>
 800987e:	4b09      	ldr	r3, [pc, #36]	; (80098a4 <_dtoa_r+0xc2c>)
 8009880:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009882:	9306      	str	r3, [sp, #24]
 8009884:	4b08      	ldr	r3, [pc, #32]	; (80098a8 <_dtoa_r+0xc30>)
 8009886:	2a00      	cmp	r2, #0
 8009888:	d001      	beq.n	800988e <_dtoa_r+0xc16>
 800988a:	f7ff fa3f 	bl	8008d0c <_dtoa_r+0x94>
 800988e:	f7ff fa3f 	bl	8008d10 <_dtoa_r+0x98>
 8009892:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009894:	2b00      	cmp	r3, #0
 8009896:	dcb6      	bgt.n	8009806 <_dtoa_r+0xb8e>
 8009898:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800989a:	2b02      	cmp	r3, #2
 800989c:	dd00      	ble.n	80098a0 <_dtoa_r+0xc28>
 800989e:	e6ac      	b.n	80095fa <_dtoa_r+0x982>
 80098a0:	e7b1      	b.n	8009806 <_dtoa_r+0xb8e>
 80098a2:	46c0      	nop			; (mov r8, r8)
 80098a4:	0800c591 	.word	0x0800c591
 80098a8:	0800c599 	.word	0x0800c599

080098ac <rshift>:
 80098ac:	0002      	movs	r2, r0
 80098ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098b0:	6904      	ldr	r4, [r0, #16]
 80098b2:	3214      	adds	r2, #20
 80098b4:	0013      	movs	r3, r2
 80098b6:	b085      	sub	sp, #20
 80098b8:	114f      	asrs	r7, r1, #5
 80098ba:	42bc      	cmp	r4, r7
 80098bc:	dd31      	ble.n	8009922 <rshift+0x76>
 80098be:	00bb      	lsls	r3, r7, #2
 80098c0:	18d3      	adds	r3, r2, r3
 80098c2:	261f      	movs	r6, #31
 80098c4:	9301      	str	r3, [sp, #4]
 80098c6:	000b      	movs	r3, r1
 80098c8:	00a5      	lsls	r5, r4, #2
 80098ca:	4033      	ands	r3, r6
 80098cc:	1955      	adds	r5, r2, r5
 80098ce:	9302      	str	r3, [sp, #8]
 80098d0:	4231      	tst	r1, r6
 80098d2:	d10c      	bne.n	80098ee <rshift+0x42>
 80098d4:	0016      	movs	r6, r2
 80098d6:	9901      	ldr	r1, [sp, #4]
 80098d8:	428d      	cmp	r5, r1
 80098da:	d838      	bhi.n	800994e <rshift+0xa2>
 80098dc:	9901      	ldr	r1, [sp, #4]
 80098de:	2300      	movs	r3, #0
 80098e0:	3903      	subs	r1, #3
 80098e2:	428d      	cmp	r5, r1
 80098e4:	d301      	bcc.n	80098ea <rshift+0x3e>
 80098e6:	1be3      	subs	r3, r4, r7
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	18d3      	adds	r3, r2, r3
 80098ec:	e019      	b.n	8009922 <rshift+0x76>
 80098ee:	2120      	movs	r1, #32
 80098f0:	9b02      	ldr	r3, [sp, #8]
 80098f2:	9e01      	ldr	r6, [sp, #4]
 80098f4:	1acb      	subs	r3, r1, r3
 80098f6:	9303      	str	r3, [sp, #12]
 80098f8:	ce02      	ldmia	r6!, {r1}
 80098fa:	9b02      	ldr	r3, [sp, #8]
 80098fc:	4694      	mov	ip, r2
 80098fe:	40d9      	lsrs	r1, r3
 8009900:	9100      	str	r1, [sp, #0]
 8009902:	42b5      	cmp	r5, r6
 8009904:	d816      	bhi.n	8009934 <rshift+0x88>
 8009906:	9e01      	ldr	r6, [sp, #4]
 8009908:	2300      	movs	r3, #0
 800990a:	3601      	adds	r6, #1
 800990c:	42b5      	cmp	r5, r6
 800990e:	d302      	bcc.n	8009916 <rshift+0x6a>
 8009910:	1be3      	subs	r3, r4, r7
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	3b04      	subs	r3, #4
 8009916:	9900      	ldr	r1, [sp, #0]
 8009918:	18d3      	adds	r3, r2, r3
 800991a:	6019      	str	r1, [r3, #0]
 800991c:	2900      	cmp	r1, #0
 800991e:	d000      	beq.n	8009922 <rshift+0x76>
 8009920:	3304      	adds	r3, #4
 8009922:	1a99      	subs	r1, r3, r2
 8009924:	1089      	asrs	r1, r1, #2
 8009926:	6101      	str	r1, [r0, #16]
 8009928:	4293      	cmp	r3, r2
 800992a:	d101      	bne.n	8009930 <rshift+0x84>
 800992c:	2300      	movs	r3, #0
 800992e:	6143      	str	r3, [r0, #20]
 8009930:	b005      	add	sp, #20
 8009932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009934:	6833      	ldr	r3, [r6, #0]
 8009936:	9903      	ldr	r1, [sp, #12]
 8009938:	408b      	lsls	r3, r1
 800993a:	9900      	ldr	r1, [sp, #0]
 800993c:	4319      	orrs	r1, r3
 800993e:	4663      	mov	r3, ip
 8009940:	c302      	stmia	r3!, {r1}
 8009942:	469c      	mov	ip, r3
 8009944:	ce02      	ldmia	r6!, {r1}
 8009946:	9b02      	ldr	r3, [sp, #8]
 8009948:	40d9      	lsrs	r1, r3
 800994a:	9100      	str	r1, [sp, #0]
 800994c:	e7d9      	b.n	8009902 <rshift+0x56>
 800994e:	c908      	ldmia	r1!, {r3}
 8009950:	c608      	stmia	r6!, {r3}
 8009952:	e7c1      	b.n	80098d8 <rshift+0x2c>

08009954 <__hexdig_fun>:
 8009954:	0002      	movs	r2, r0
 8009956:	3a30      	subs	r2, #48	; 0x30
 8009958:	0003      	movs	r3, r0
 800995a:	2a09      	cmp	r2, #9
 800995c:	d802      	bhi.n	8009964 <__hexdig_fun+0x10>
 800995e:	3b20      	subs	r3, #32
 8009960:	b2d8      	uxtb	r0, r3
 8009962:	4770      	bx	lr
 8009964:	0002      	movs	r2, r0
 8009966:	3a61      	subs	r2, #97	; 0x61
 8009968:	2a05      	cmp	r2, #5
 800996a:	d801      	bhi.n	8009970 <__hexdig_fun+0x1c>
 800996c:	3b47      	subs	r3, #71	; 0x47
 800996e:	e7f7      	b.n	8009960 <__hexdig_fun+0xc>
 8009970:	001a      	movs	r2, r3
 8009972:	3a41      	subs	r2, #65	; 0x41
 8009974:	2000      	movs	r0, #0
 8009976:	2a05      	cmp	r2, #5
 8009978:	d8f3      	bhi.n	8009962 <__hexdig_fun+0xe>
 800997a:	3b27      	subs	r3, #39	; 0x27
 800997c:	e7f0      	b.n	8009960 <__hexdig_fun+0xc>
	...

08009980 <__gethex>:
 8009980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009982:	b08d      	sub	sp, #52	; 0x34
 8009984:	930a      	str	r3, [sp, #40]	; 0x28
 8009986:	4bbf      	ldr	r3, [pc, #764]	; (8009c84 <__gethex+0x304>)
 8009988:	9005      	str	r0, [sp, #20]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	9109      	str	r1, [sp, #36]	; 0x24
 800998e:	0018      	movs	r0, r3
 8009990:	9202      	str	r2, [sp, #8]
 8009992:	9307      	str	r3, [sp, #28]
 8009994:	f7f6 fbb8 	bl	8000108 <strlen>
 8009998:	2202      	movs	r2, #2
 800999a:	9b07      	ldr	r3, [sp, #28]
 800999c:	4252      	negs	r2, r2
 800999e:	181b      	adds	r3, r3, r0
 80099a0:	3b01      	subs	r3, #1
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	9003      	str	r0, [sp, #12]
 80099a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80099a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099aa:	6819      	ldr	r1, [r3, #0]
 80099ac:	1c8b      	adds	r3, r1, #2
 80099ae:	1a52      	subs	r2, r2, r1
 80099b0:	18d1      	adds	r1, r2, r3
 80099b2:	9301      	str	r3, [sp, #4]
 80099b4:	9108      	str	r1, [sp, #32]
 80099b6:	9901      	ldr	r1, [sp, #4]
 80099b8:	3301      	adds	r3, #1
 80099ba:	7808      	ldrb	r0, [r1, #0]
 80099bc:	2830      	cmp	r0, #48	; 0x30
 80099be:	d0f7      	beq.n	80099b0 <__gethex+0x30>
 80099c0:	f7ff ffc8 	bl	8009954 <__hexdig_fun>
 80099c4:	2300      	movs	r3, #0
 80099c6:	001c      	movs	r4, r3
 80099c8:	9304      	str	r3, [sp, #16]
 80099ca:	4298      	cmp	r0, r3
 80099cc:	d11f      	bne.n	8009a0e <__gethex+0x8e>
 80099ce:	9a03      	ldr	r2, [sp, #12]
 80099d0:	9907      	ldr	r1, [sp, #28]
 80099d2:	9801      	ldr	r0, [sp, #4]
 80099d4:	f001 fe04 	bl	800b5e0 <strncmp>
 80099d8:	0007      	movs	r7, r0
 80099da:	42a0      	cmp	r0, r4
 80099dc:	d000      	beq.n	80099e0 <__gethex+0x60>
 80099de:	e06b      	b.n	8009ab8 <__gethex+0x138>
 80099e0:	9b01      	ldr	r3, [sp, #4]
 80099e2:	9a03      	ldr	r2, [sp, #12]
 80099e4:	5c98      	ldrb	r0, [r3, r2]
 80099e6:	189d      	adds	r5, r3, r2
 80099e8:	f7ff ffb4 	bl	8009954 <__hexdig_fun>
 80099ec:	2301      	movs	r3, #1
 80099ee:	9304      	str	r3, [sp, #16]
 80099f0:	42a0      	cmp	r0, r4
 80099f2:	d030      	beq.n	8009a56 <__gethex+0xd6>
 80099f4:	9501      	str	r5, [sp, #4]
 80099f6:	9b01      	ldr	r3, [sp, #4]
 80099f8:	7818      	ldrb	r0, [r3, #0]
 80099fa:	2830      	cmp	r0, #48	; 0x30
 80099fc:	d009      	beq.n	8009a12 <__gethex+0x92>
 80099fe:	f7ff ffa9 	bl	8009954 <__hexdig_fun>
 8009a02:	4242      	negs	r2, r0
 8009a04:	4142      	adcs	r2, r0
 8009a06:	2301      	movs	r3, #1
 8009a08:	002c      	movs	r4, r5
 8009a0a:	9204      	str	r2, [sp, #16]
 8009a0c:	9308      	str	r3, [sp, #32]
 8009a0e:	9d01      	ldr	r5, [sp, #4]
 8009a10:	e004      	b.n	8009a1c <__gethex+0x9c>
 8009a12:	9b01      	ldr	r3, [sp, #4]
 8009a14:	3301      	adds	r3, #1
 8009a16:	9301      	str	r3, [sp, #4]
 8009a18:	e7ed      	b.n	80099f6 <__gethex+0x76>
 8009a1a:	3501      	adds	r5, #1
 8009a1c:	7828      	ldrb	r0, [r5, #0]
 8009a1e:	f7ff ff99 	bl	8009954 <__hexdig_fun>
 8009a22:	1e07      	subs	r7, r0, #0
 8009a24:	d1f9      	bne.n	8009a1a <__gethex+0x9a>
 8009a26:	0028      	movs	r0, r5
 8009a28:	9a03      	ldr	r2, [sp, #12]
 8009a2a:	9907      	ldr	r1, [sp, #28]
 8009a2c:	f001 fdd8 	bl	800b5e0 <strncmp>
 8009a30:	2800      	cmp	r0, #0
 8009a32:	d10e      	bne.n	8009a52 <__gethex+0xd2>
 8009a34:	2c00      	cmp	r4, #0
 8009a36:	d107      	bne.n	8009a48 <__gethex+0xc8>
 8009a38:	9b03      	ldr	r3, [sp, #12]
 8009a3a:	18ed      	adds	r5, r5, r3
 8009a3c:	002c      	movs	r4, r5
 8009a3e:	7828      	ldrb	r0, [r5, #0]
 8009a40:	f7ff ff88 	bl	8009954 <__hexdig_fun>
 8009a44:	2800      	cmp	r0, #0
 8009a46:	d102      	bne.n	8009a4e <__gethex+0xce>
 8009a48:	1b64      	subs	r4, r4, r5
 8009a4a:	00a7      	lsls	r7, r4, #2
 8009a4c:	e003      	b.n	8009a56 <__gethex+0xd6>
 8009a4e:	3501      	adds	r5, #1
 8009a50:	e7f5      	b.n	8009a3e <__gethex+0xbe>
 8009a52:	2c00      	cmp	r4, #0
 8009a54:	d1f8      	bne.n	8009a48 <__gethex+0xc8>
 8009a56:	2220      	movs	r2, #32
 8009a58:	782b      	ldrb	r3, [r5, #0]
 8009a5a:	002e      	movs	r6, r5
 8009a5c:	4393      	bics	r3, r2
 8009a5e:	2b50      	cmp	r3, #80	; 0x50
 8009a60:	d11d      	bne.n	8009a9e <__gethex+0x11e>
 8009a62:	786b      	ldrb	r3, [r5, #1]
 8009a64:	2b2b      	cmp	r3, #43	; 0x2b
 8009a66:	d02c      	beq.n	8009ac2 <__gethex+0x142>
 8009a68:	2b2d      	cmp	r3, #45	; 0x2d
 8009a6a:	d02e      	beq.n	8009aca <__gethex+0x14a>
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	1c6e      	adds	r6, r5, #1
 8009a70:	9306      	str	r3, [sp, #24]
 8009a72:	7830      	ldrb	r0, [r6, #0]
 8009a74:	f7ff ff6e 	bl	8009954 <__hexdig_fun>
 8009a78:	1e43      	subs	r3, r0, #1
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	2b18      	cmp	r3, #24
 8009a7e:	d82b      	bhi.n	8009ad8 <__gethex+0x158>
 8009a80:	3810      	subs	r0, #16
 8009a82:	0004      	movs	r4, r0
 8009a84:	7870      	ldrb	r0, [r6, #1]
 8009a86:	f7ff ff65 	bl	8009954 <__hexdig_fun>
 8009a8a:	1e43      	subs	r3, r0, #1
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	3601      	adds	r6, #1
 8009a90:	2b18      	cmp	r3, #24
 8009a92:	d91c      	bls.n	8009ace <__gethex+0x14e>
 8009a94:	9b06      	ldr	r3, [sp, #24]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d000      	beq.n	8009a9c <__gethex+0x11c>
 8009a9a:	4264      	negs	r4, r4
 8009a9c:	193f      	adds	r7, r7, r4
 8009a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aa0:	601e      	str	r6, [r3, #0]
 8009aa2:	9b04      	ldr	r3, [sp, #16]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d019      	beq.n	8009adc <__gethex+0x15c>
 8009aa8:	2600      	movs	r6, #0
 8009aaa:	9b08      	ldr	r3, [sp, #32]
 8009aac:	42b3      	cmp	r3, r6
 8009aae:	d100      	bne.n	8009ab2 <__gethex+0x132>
 8009ab0:	3606      	adds	r6, #6
 8009ab2:	0030      	movs	r0, r6
 8009ab4:	b00d      	add	sp, #52	; 0x34
 8009ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ab8:	2301      	movs	r3, #1
 8009aba:	2700      	movs	r7, #0
 8009abc:	9d01      	ldr	r5, [sp, #4]
 8009abe:	9304      	str	r3, [sp, #16]
 8009ac0:	e7c9      	b.n	8009a56 <__gethex+0xd6>
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	9306      	str	r3, [sp, #24]
 8009ac6:	1cae      	adds	r6, r5, #2
 8009ac8:	e7d3      	b.n	8009a72 <__gethex+0xf2>
 8009aca:	2301      	movs	r3, #1
 8009acc:	e7fa      	b.n	8009ac4 <__gethex+0x144>
 8009ace:	230a      	movs	r3, #10
 8009ad0:	435c      	muls	r4, r3
 8009ad2:	1824      	adds	r4, r4, r0
 8009ad4:	3c10      	subs	r4, #16
 8009ad6:	e7d5      	b.n	8009a84 <__gethex+0x104>
 8009ad8:	002e      	movs	r6, r5
 8009ada:	e7e0      	b.n	8009a9e <__gethex+0x11e>
 8009adc:	9b01      	ldr	r3, [sp, #4]
 8009ade:	9904      	ldr	r1, [sp, #16]
 8009ae0:	1aeb      	subs	r3, r5, r3
 8009ae2:	3b01      	subs	r3, #1
 8009ae4:	2b07      	cmp	r3, #7
 8009ae6:	dc0a      	bgt.n	8009afe <__gethex+0x17e>
 8009ae8:	9805      	ldr	r0, [sp, #20]
 8009aea:	f000 fa9b 	bl	800a024 <_Balloc>
 8009aee:	1e04      	subs	r4, r0, #0
 8009af0:	d108      	bne.n	8009b04 <__gethex+0x184>
 8009af2:	0002      	movs	r2, r0
 8009af4:	21de      	movs	r1, #222	; 0xde
 8009af6:	4b64      	ldr	r3, [pc, #400]	; (8009c88 <__gethex+0x308>)
 8009af8:	4864      	ldr	r0, [pc, #400]	; (8009c8c <__gethex+0x30c>)
 8009afa:	f001 fe5d 	bl	800b7b8 <__assert_func>
 8009afe:	3101      	adds	r1, #1
 8009b00:	105b      	asrs	r3, r3, #1
 8009b02:	e7ef      	b.n	8009ae4 <__gethex+0x164>
 8009b04:	0003      	movs	r3, r0
 8009b06:	3314      	adds	r3, #20
 8009b08:	9304      	str	r3, [sp, #16]
 8009b0a:	9309      	str	r3, [sp, #36]	; 0x24
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	001e      	movs	r6, r3
 8009b10:	9306      	str	r3, [sp, #24]
 8009b12:	9b01      	ldr	r3, [sp, #4]
 8009b14:	42ab      	cmp	r3, r5
 8009b16:	d340      	bcc.n	8009b9a <__gethex+0x21a>
 8009b18:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009b1a:	9b04      	ldr	r3, [sp, #16]
 8009b1c:	c540      	stmia	r5!, {r6}
 8009b1e:	1aed      	subs	r5, r5, r3
 8009b20:	10ad      	asrs	r5, r5, #2
 8009b22:	0030      	movs	r0, r6
 8009b24:	6125      	str	r5, [r4, #16]
 8009b26:	f000 fb75 	bl	800a214 <__hi0bits>
 8009b2a:	9b02      	ldr	r3, [sp, #8]
 8009b2c:	016d      	lsls	r5, r5, #5
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	1a2e      	subs	r6, r5, r0
 8009b32:	9301      	str	r3, [sp, #4]
 8009b34:	429e      	cmp	r6, r3
 8009b36:	dd5a      	ble.n	8009bee <__gethex+0x26e>
 8009b38:	1af6      	subs	r6, r6, r3
 8009b3a:	0031      	movs	r1, r6
 8009b3c:	0020      	movs	r0, r4
 8009b3e:	f000 ff17 	bl	800a970 <__any_on>
 8009b42:	1e05      	subs	r5, r0, #0
 8009b44:	d016      	beq.n	8009b74 <__gethex+0x1f4>
 8009b46:	2501      	movs	r5, #1
 8009b48:	211f      	movs	r1, #31
 8009b4a:	0028      	movs	r0, r5
 8009b4c:	1e73      	subs	r3, r6, #1
 8009b4e:	4019      	ands	r1, r3
 8009b50:	4088      	lsls	r0, r1
 8009b52:	0001      	movs	r1, r0
 8009b54:	115a      	asrs	r2, r3, #5
 8009b56:	9804      	ldr	r0, [sp, #16]
 8009b58:	0092      	lsls	r2, r2, #2
 8009b5a:	5812      	ldr	r2, [r2, r0]
 8009b5c:	420a      	tst	r2, r1
 8009b5e:	d009      	beq.n	8009b74 <__gethex+0x1f4>
 8009b60:	42ab      	cmp	r3, r5
 8009b62:	dd06      	ble.n	8009b72 <__gethex+0x1f2>
 8009b64:	0020      	movs	r0, r4
 8009b66:	1eb1      	subs	r1, r6, #2
 8009b68:	f000 ff02 	bl	800a970 <__any_on>
 8009b6c:	3502      	adds	r5, #2
 8009b6e:	2800      	cmp	r0, #0
 8009b70:	d100      	bne.n	8009b74 <__gethex+0x1f4>
 8009b72:	2502      	movs	r5, #2
 8009b74:	0031      	movs	r1, r6
 8009b76:	0020      	movs	r0, r4
 8009b78:	f7ff fe98 	bl	80098ac <rshift>
 8009b7c:	19bf      	adds	r7, r7, r6
 8009b7e:	9b02      	ldr	r3, [sp, #8]
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	9303      	str	r3, [sp, #12]
 8009b84:	42bb      	cmp	r3, r7
 8009b86:	da42      	bge.n	8009c0e <__gethex+0x28e>
 8009b88:	0021      	movs	r1, r4
 8009b8a:	9805      	ldr	r0, [sp, #20]
 8009b8c:	f000 fa8e 	bl	800a0ac <_Bfree>
 8009b90:	2300      	movs	r3, #0
 8009b92:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b94:	26a3      	movs	r6, #163	; 0xa3
 8009b96:	6013      	str	r3, [r2, #0]
 8009b98:	e78b      	b.n	8009ab2 <__gethex+0x132>
 8009b9a:	1e6b      	subs	r3, r5, #1
 8009b9c:	9308      	str	r3, [sp, #32]
 8009b9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d014      	beq.n	8009bd0 <__gethex+0x250>
 8009ba6:	9b06      	ldr	r3, [sp, #24]
 8009ba8:	2b20      	cmp	r3, #32
 8009baa:	d104      	bne.n	8009bb6 <__gethex+0x236>
 8009bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bae:	c340      	stmia	r3!, {r6}
 8009bb0:	2600      	movs	r6, #0
 8009bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8009bb4:	9606      	str	r6, [sp, #24]
 8009bb6:	9b08      	ldr	r3, [sp, #32]
 8009bb8:	7818      	ldrb	r0, [r3, #0]
 8009bba:	f7ff fecb 	bl	8009954 <__hexdig_fun>
 8009bbe:	230f      	movs	r3, #15
 8009bc0:	4018      	ands	r0, r3
 8009bc2:	9b06      	ldr	r3, [sp, #24]
 8009bc4:	9d08      	ldr	r5, [sp, #32]
 8009bc6:	4098      	lsls	r0, r3
 8009bc8:	3304      	adds	r3, #4
 8009bca:	4306      	orrs	r6, r0
 8009bcc:	9306      	str	r3, [sp, #24]
 8009bce:	e7a0      	b.n	8009b12 <__gethex+0x192>
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	9a03      	ldr	r2, [sp, #12]
 8009bd4:	1a9d      	subs	r5, r3, r2
 8009bd6:	9b08      	ldr	r3, [sp, #32]
 8009bd8:	195d      	adds	r5, r3, r5
 8009bda:	9b01      	ldr	r3, [sp, #4]
 8009bdc:	429d      	cmp	r5, r3
 8009bde:	d3e2      	bcc.n	8009ba6 <__gethex+0x226>
 8009be0:	0028      	movs	r0, r5
 8009be2:	9907      	ldr	r1, [sp, #28]
 8009be4:	f001 fcfc 	bl	800b5e0 <strncmp>
 8009be8:	2800      	cmp	r0, #0
 8009bea:	d1dc      	bne.n	8009ba6 <__gethex+0x226>
 8009bec:	e791      	b.n	8009b12 <__gethex+0x192>
 8009bee:	9b01      	ldr	r3, [sp, #4]
 8009bf0:	2500      	movs	r5, #0
 8009bf2:	429e      	cmp	r6, r3
 8009bf4:	dac3      	bge.n	8009b7e <__gethex+0x1fe>
 8009bf6:	1b9e      	subs	r6, r3, r6
 8009bf8:	0021      	movs	r1, r4
 8009bfa:	0032      	movs	r2, r6
 8009bfc:	9805      	ldr	r0, [sp, #20]
 8009bfe:	f000 fc73 	bl	800a4e8 <__lshift>
 8009c02:	0003      	movs	r3, r0
 8009c04:	3314      	adds	r3, #20
 8009c06:	0004      	movs	r4, r0
 8009c08:	1bbf      	subs	r7, r7, r6
 8009c0a:	9304      	str	r3, [sp, #16]
 8009c0c:	e7b7      	b.n	8009b7e <__gethex+0x1fe>
 8009c0e:	9b02      	ldr	r3, [sp, #8]
 8009c10:	685e      	ldr	r6, [r3, #4]
 8009c12:	42be      	cmp	r6, r7
 8009c14:	dd71      	ble.n	8009cfa <__gethex+0x37a>
 8009c16:	9b01      	ldr	r3, [sp, #4]
 8009c18:	1bf6      	subs	r6, r6, r7
 8009c1a:	42b3      	cmp	r3, r6
 8009c1c:	dc38      	bgt.n	8009c90 <__gethex+0x310>
 8009c1e:	9b02      	ldr	r3, [sp, #8]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	2b02      	cmp	r3, #2
 8009c24:	d026      	beq.n	8009c74 <__gethex+0x2f4>
 8009c26:	2b03      	cmp	r3, #3
 8009c28:	d028      	beq.n	8009c7c <__gethex+0x2fc>
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d119      	bne.n	8009c62 <__gethex+0x2e2>
 8009c2e:	9b01      	ldr	r3, [sp, #4]
 8009c30:	42b3      	cmp	r3, r6
 8009c32:	d116      	bne.n	8009c62 <__gethex+0x2e2>
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d10d      	bne.n	8009c54 <__gethex+0x2d4>
 8009c38:	9b02      	ldr	r3, [sp, #8]
 8009c3a:	2662      	movs	r6, #98	; 0x62
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	9301      	str	r3, [sp, #4]
 8009c40:	9a01      	ldr	r2, [sp, #4]
 8009c42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c44:	601a      	str	r2, [r3, #0]
 8009c46:	2301      	movs	r3, #1
 8009c48:	9a04      	ldr	r2, [sp, #16]
 8009c4a:	6123      	str	r3, [r4, #16]
 8009c4c:	6013      	str	r3, [r2, #0]
 8009c4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c50:	601c      	str	r4, [r3, #0]
 8009c52:	e72e      	b.n	8009ab2 <__gethex+0x132>
 8009c54:	9901      	ldr	r1, [sp, #4]
 8009c56:	0020      	movs	r0, r4
 8009c58:	3901      	subs	r1, #1
 8009c5a:	f000 fe89 	bl	800a970 <__any_on>
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	d1ea      	bne.n	8009c38 <__gethex+0x2b8>
 8009c62:	0021      	movs	r1, r4
 8009c64:	9805      	ldr	r0, [sp, #20]
 8009c66:	f000 fa21 	bl	800a0ac <_Bfree>
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c6e:	2650      	movs	r6, #80	; 0x50
 8009c70:	6013      	str	r3, [r2, #0]
 8009c72:	e71e      	b.n	8009ab2 <__gethex+0x132>
 8009c74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d1f3      	bne.n	8009c62 <__gethex+0x2e2>
 8009c7a:	e7dd      	b.n	8009c38 <__gethex+0x2b8>
 8009c7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d1da      	bne.n	8009c38 <__gethex+0x2b8>
 8009c82:	e7ee      	b.n	8009c62 <__gethex+0x2e2>
 8009c84:	0800c688 	.word	0x0800c688
 8009c88:	0800c610 	.word	0x0800c610
 8009c8c:	0800c621 	.word	0x0800c621
 8009c90:	1e77      	subs	r7, r6, #1
 8009c92:	2d00      	cmp	r5, #0
 8009c94:	d12f      	bne.n	8009cf6 <__gethex+0x376>
 8009c96:	2f00      	cmp	r7, #0
 8009c98:	d004      	beq.n	8009ca4 <__gethex+0x324>
 8009c9a:	0039      	movs	r1, r7
 8009c9c:	0020      	movs	r0, r4
 8009c9e:	f000 fe67 	bl	800a970 <__any_on>
 8009ca2:	0005      	movs	r5, r0
 8009ca4:	231f      	movs	r3, #31
 8009ca6:	117a      	asrs	r2, r7, #5
 8009ca8:	401f      	ands	r7, r3
 8009caa:	3b1e      	subs	r3, #30
 8009cac:	40bb      	lsls	r3, r7
 8009cae:	9904      	ldr	r1, [sp, #16]
 8009cb0:	0092      	lsls	r2, r2, #2
 8009cb2:	5852      	ldr	r2, [r2, r1]
 8009cb4:	421a      	tst	r2, r3
 8009cb6:	d001      	beq.n	8009cbc <__gethex+0x33c>
 8009cb8:	2302      	movs	r3, #2
 8009cba:	431d      	orrs	r5, r3
 8009cbc:	9b01      	ldr	r3, [sp, #4]
 8009cbe:	0031      	movs	r1, r6
 8009cc0:	1b9b      	subs	r3, r3, r6
 8009cc2:	2602      	movs	r6, #2
 8009cc4:	0020      	movs	r0, r4
 8009cc6:	9301      	str	r3, [sp, #4]
 8009cc8:	f7ff fdf0 	bl	80098ac <rshift>
 8009ccc:	9b02      	ldr	r3, [sp, #8]
 8009cce:	685f      	ldr	r7, [r3, #4]
 8009cd0:	2d00      	cmp	r5, #0
 8009cd2:	d041      	beq.n	8009d58 <__gethex+0x3d8>
 8009cd4:	9b02      	ldr	r3, [sp, #8]
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	2b02      	cmp	r3, #2
 8009cda:	d010      	beq.n	8009cfe <__gethex+0x37e>
 8009cdc:	2b03      	cmp	r3, #3
 8009cde:	d012      	beq.n	8009d06 <__gethex+0x386>
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d106      	bne.n	8009cf2 <__gethex+0x372>
 8009ce4:	07aa      	lsls	r2, r5, #30
 8009ce6:	d504      	bpl.n	8009cf2 <__gethex+0x372>
 8009ce8:	9a04      	ldr	r2, [sp, #16]
 8009cea:	6810      	ldr	r0, [r2, #0]
 8009cec:	4305      	orrs	r5, r0
 8009cee:	421d      	tst	r5, r3
 8009cf0:	d10c      	bne.n	8009d0c <__gethex+0x38c>
 8009cf2:	2310      	movs	r3, #16
 8009cf4:	e02f      	b.n	8009d56 <__gethex+0x3d6>
 8009cf6:	2501      	movs	r5, #1
 8009cf8:	e7d4      	b.n	8009ca4 <__gethex+0x324>
 8009cfa:	2601      	movs	r6, #1
 8009cfc:	e7e8      	b.n	8009cd0 <__gethex+0x350>
 8009cfe:	2301      	movs	r3, #1
 8009d00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009d02:	1a9b      	subs	r3, r3, r2
 8009d04:	9313      	str	r3, [sp, #76]	; 0x4c
 8009d06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d0f2      	beq.n	8009cf2 <__gethex+0x372>
 8009d0c:	6923      	ldr	r3, [r4, #16]
 8009d0e:	2000      	movs	r0, #0
 8009d10:	9303      	str	r3, [sp, #12]
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	9304      	str	r3, [sp, #16]
 8009d16:	0023      	movs	r3, r4
 8009d18:	9a04      	ldr	r2, [sp, #16]
 8009d1a:	3314      	adds	r3, #20
 8009d1c:	1899      	adds	r1, r3, r2
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	1c55      	adds	r5, r2, #1
 8009d22:	d01e      	beq.n	8009d62 <__gethex+0x3e2>
 8009d24:	3201      	adds	r2, #1
 8009d26:	601a      	str	r2, [r3, #0]
 8009d28:	0023      	movs	r3, r4
 8009d2a:	3314      	adds	r3, #20
 8009d2c:	2e02      	cmp	r6, #2
 8009d2e:	d140      	bne.n	8009db2 <__gethex+0x432>
 8009d30:	9a02      	ldr	r2, [sp, #8]
 8009d32:	9901      	ldr	r1, [sp, #4]
 8009d34:	6812      	ldr	r2, [r2, #0]
 8009d36:	3a01      	subs	r2, #1
 8009d38:	428a      	cmp	r2, r1
 8009d3a:	d10b      	bne.n	8009d54 <__gethex+0x3d4>
 8009d3c:	114a      	asrs	r2, r1, #5
 8009d3e:	211f      	movs	r1, #31
 8009d40:	9801      	ldr	r0, [sp, #4]
 8009d42:	0092      	lsls	r2, r2, #2
 8009d44:	4001      	ands	r1, r0
 8009d46:	2001      	movs	r0, #1
 8009d48:	0005      	movs	r5, r0
 8009d4a:	408d      	lsls	r5, r1
 8009d4c:	58d3      	ldr	r3, [r2, r3]
 8009d4e:	422b      	tst	r3, r5
 8009d50:	d000      	beq.n	8009d54 <__gethex+0x3d4>
 8009d52:	2601      	movs	r6, #1
 8009d54:	2320      	movs	r3, #32
 8009d56:	431e      	orrs	r6, r3
 8009d58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d5a:	601c      	str	r4, [r3, #0]
 8009d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d5e:	601f      	str	r7, [r3, #0]
 8009d60:	e6a7      	b.n	8009ab2 <__gethex+0x132>
 8009d62:	c301      	stmia	r3!, {r0}
 8009d64:	4299      	cmp	r1, r3
 8009d66:	d8da      	bhi.n	8009d1e <__gethex+0x39e>
 8009d68:	9b03      	ldr	r3, [sp, #12]
 8009d6a:	68a2      	ldr	r2, [r4, #8]
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	db17      	blt.n	8009da0 <__gethex+0x420>
 8009d70:	6863      	ldr	r3, [r4, #4]
 8009d72:	9805      	ldr	r0, [sp, #20]
 8009d74:	1c59      	adds	r1, r3, #1
 8009d76:	f000 f955 	bl	800a024 <_Balloc>
 8009d7a:	1e05      	subs	r5, r0, #0
 8009d7c:	d103      	bne.n	8009d86 <__gethex+0x406>
 8009d7e:	0002      	movs	r2, r0
 8009d80:	2184      	movs	r1, #132	; 0x84
 8009d82:	4b1c      	ldr	r3, [pc, #112]	; (8009df4 <__gethex+0x474>)
 8009d84:	e6b8      	b.n	8009af8 <__gethex+0x178>
 8009d86:	0021      	movs	r1, r4
 8009d88:	6923      	ldr	r3, [r4, #16]
 8009d8a:	310c      	adds	r1, #12
 8009d8c:	1c9a      	adds	r2, r3, #2
 8009d8e:	0092      	lsls	r2, r2, #2
 8009d90:	300c      	adds	r0, #12
 8009d92:	f000 f93e 	bl	800a012 <memcpy>
 8009d96:	0021      	movs	r1, r4
 8009d98:	9805      	ldr	r0, [sp, #20]
 8009d9a:	f000 f987 	bl	800a0ac <_Bfree>
 8009d9e:	002c      	movs	r4, r5
 8009da0:	6923      	ldr	r3, [r4, #16]
 8009da2:	1c5a      	adds	r2, r3, #1
 8009da4:	6122      	str	r2, [r4, #16]
 8009da6:	2201      	movs	r2, #1
 8009da8:	3304      	adds	r3, #4
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	18e3      	adds	r3, r4, r3
 8009dae:	605a      	str	r2, [r3, #4]
 8009db0:	e7ba      	b.n	8009d28 <__gethex+0x3a8>
 8009db2:	6922      	ldr	r2, [r4, #16]
 8009db4:	9903      	ldr	r1, [sp, #12]
 8009db6:	428a      	cmp	r2, r1
 8009db8:	dd09      	ble.n	8009dce <__gethex+0x44e>
 8009dba:	2101      	movs	r1, #1
 8009dbc:	0020      	movs	r0, r4
 8009dbe:	f7ff fd75 	bl	80098ac <rshift>
 8009dc2:	9b02      	ldr	r3, [sp, #8]
 8009dc4:	3701      	adds	r7, #1
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	42bb      	cmp	r3, r7
 8009dca:	dac2      	bge.n	8009d52 <__gethex+0x3d2>
 8009dcc:	e6dc      	b.n	8009b88 <__gethex+0x208>
 8009dce:	221f      	movs	r2, #31
 8009dd0:	9d01      	ldr	r5, [sp, #4]
 8009dd2:	9901      	ldr	r1, [sp, #4]
 8009dd4:	2601      	movs	r6, #1
 8009dd6:	4015      	ands	r5, r2
 8009dd8:	4211      	tst	r1, r2
 8009dda:	d0bb      	beq.n	8009d54 <__gethex+0x3d4>
 8009ddc:	9a04      	ldr	r2, [sp, #16]
 8009dde:	189b      	adds	r3, r3, r2
 8009de0:	3b04      	subs	r3, #4
 8009de2:	6818      	ldr	r0, [r3, #0]
 8009de4:	f000 fa16 	bl	800a214 <__hi0bits>
 8009de8:	2320      	movs	r3, #32
 8009dea:	1b5d      	subs	r5, r3, r5
 8009dec:	42a8      	cmp	r0, r5
 8009dee:	dbe4      	blt.n	8009dba <__gethex+0x43a>
 8009df0:	e7b0      	b.n	8009d54 <__gethex+0x3d4>
 8009df2:	46c0      	nop			; (mov r8, r8)
 8009df4:	0800c610 	.word	0x0800c610

08009df8 <L_shift>:
 8009df8:	2308      	movs	r3, #8
 8009dfa:	b570      	push	{r4, r5, r6, lr}
 8009dfc:	2520      	movs	r5, #32
 8009dfe:	1a9a      	subs	r2, r3, r2
 8009e00:	0092      	lsls	r2, r2, #2
 8009e02:	1aad      	subs	r5, r5, r2
 8009e04:	6843      	ldr	r3, [r0, #4]
 8009e06:	6806      	ldr	r6, [r0, #0]
 8009e08:	001c      	movs	r4, r3
 8009e0a:	40ac      	lsls	r4, r5
 8009e0c:	40d3      	lsrs	r3, r2
 8009e0e:	4334      	orrs	r4, r6
 8009e10:	6004      	str	r4, [r0, #0]
 8009e12:	6043      	str	r3, [r0, #4]
 8009e14:	3004      	adds	r0, #4
 8009e16:	4288      	cmp	r0, r1
 8009e18:	d3f4      	bcc.n	8009e04 <L_shift+0xc>
 8009e1a:	bd70      	pop	{r4, r5, r6, pc}

08009e1c <__match>:
 8009e1c:	b530      	push	{r4, r5, lr}
 8009e1e:	6803      	ldr	r3, [r0, #0]
 8009e20:	780c      	ldrb	r4, [r1, #0]
 8009e22:	3301      	adds	r3, #1
 8009e24:	2c00      	cmp	r4, #0
 8009e26:	d102      	bne.n	8009e2e <__match+0x12>
 8009e28:	6003      	str	r3, [r0, #0]
 8009e2a:	2001      	movs	r0, #1
 8009e2c:	bd30      	pop	{r4, r5, pc}
 8009e2e:	781a      	ldrb	r2, [r3, #0]
 8009e30:	0015      	movs	r5, r2
 8009e32:	3d41      	subs	r5, #65	; 0x41
 8009e34:	2d19      	cmp	r5, #25
 8009e36:	d800      	bhi.n	8009e3a <__match+0x1e>
 8009e38:	3220      	adds	r2, #32
 8009e3a:	3101      	adds	r1, #1
 8009e3c:	42a2      	cmp	r2, r4
 8009e3e:	d0ef      	beq.n	8009e20 <__match+0x4>
 8009e40:	2000      	movs	r0, #0
 8009e42:	e7f3      	b.n	8009e2c <__match+0x10>

08009e44 <__hexnan>:
 8009e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e46:	680b      	ldr	r3, [r1, #0]
 8009e48:	b08b      	sub	sp, #44	; 0x2c
 8009e4a:	9201      	str	r2, [sp, #4]
 8009e4c:	9901      	ldr	r1, [sp, #4]
 8009e4e:	115a      	asrs	r2, r3, #5
 8009e50:	0092      	lsls	r2, r2, #2
 8009e52:	188a      	adds	r2, r1, r2
 8009e54:	9202      	str	r2, [sp, #8]
 8009e56:	0019      	movs	r1, r3
 8009e58:	221f      	movs	r2, #31
 8009e5a:	4011      	ands	r1, r2
 8009e5c:	9008      	str	r0, [sp, #32]
 8009e5e:	9106      	str	r1, [sp, #24]
 8009e60:	4213      	tst	r3, r2
 8009e62:	d002      	beq.n	8009e6a <__hexnan+0x26>
 8009e64:	9b02      	ldr	r3, [sp, #8]
 8009e66:	3304      	adds	r3, #4
 8009e68:	9302      	str	r3, [sp, #8]
 8009e6a:	9b02      	ldr	r3, [sp, #8]
 8009e6c:	2500      	movs	r5, #0
 8009e6e:	1f1e      	subs	r6, r3, #4
 8009e70:	0037      	movs	r7, r6
 8009e72:	0034      	movs	r4, r6
 8009e74:	9b08      	ldr	r3, [sp, #32]
 8009e76:	6035      	str	r5, [r6, #0]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	9507      	str	r5, [sp, #28]
 8009e7c:	9305      	str	r3, [sp, #20]
 8009e7e:	9503      	str	r5, [sp, #12]
 8009e80:	9b05      	ldr	r3, [sp, #20]
 8009e82:	3301      	adds	r3, #1
 8009e84:	9309      	str	r3, [sp, #36]	; 0x24
 8009e86:	9b05      	ldr	r3, [sp, #20]
 8009e88:	785b      	ldrb	r3, [r3, #1]
 8009e8a:	9304      	str	r3, [sp, #16]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d028      	beq.n	8009ee2 <__hexnan+0x9e>
 8009e90:	9804      	ldr	r0, [sp, #16]
 8009e92:	f7ff fd5f 	bl	8009954 <__hexdig_fun>
 8009e96:	2800      	cmp	r0, #0
 8009e98:	d154      	bne.n	8009f44 <__hexnan+0x100>
 8009e9a:	9b04      	ldr	r3, [sp, #16]
 8009e9c:	2b20      	cmp	r3, #32
 8009e9e:	d819      	bhi.n	8009ed4 <__hexnan+0x90>
 8009ea0:	9b03      	ldr	r3, [sp, #12]
 8009ea2:	9a07      	ldr	r2, [sp, #28]
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	dd12      	ble.n	8009ece <__hexnan+0x8a>
 8009ea8:	42bc      	cmp	r4, r7
 8009eaa:	d206      	bcs.n	8009eba <__hexnan+0x76>
 8009eac:	2d07      	cmp	r5, #7
 8009eae:	dc04      	bgt.n	8009eba <__hexnan+0x76>
 8009eb0:	002a      	movs	r2, r5
 8009eb2:	0039      	movs	r1, r7
 8009eb4:	0020      	movs	r0, r4
 8009eb6:	f7ff ff9f 	bl	8009df8 <L_shift>
 8009eba:	9b01      	ldr	r3, [sp, #4]
 8009ebc:	2508      	movs	r5, #8
 8009ebe:	429c      	cmp	r4, r3
 8009ec0:	d905      	bls.n	8009ece <__hexnan+0x8a>
 8009ec2:	1f27      	subs	r7, r4, #4
 8009ec4:	2500      	movs	r5, #0
 8009ec6:	003c      	movs	r4, r7
 8009ec8:	9b03      	ldr	r3, [sp, #12]
 8009eca:	603d      	str	r5, [r7, #0]
 8009ecc:	9307      	str	r3, [sp, #28]
 8009ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ed0:	9305      	str	r3, [sp, #20]
 8009ed2:	e7d5      	b.n	8009e80 <__hexnan+0x3c>
 8009ed4:	9b04      	ldr	r3, [sp, #16]
 8009ed6:	2b29      	cmp	r3, #41	; 0x29
 8009ed8:	d159      	bne.n	8009f8e <__hexnan+0x14a>
 8009eda:	9b05      	ldr	r3, [sp, #20]
 8009edc:	9a08      	ldr	r2, [sp, #32]
 8009ede:	3302      	adds	r3, #2
 8009ee0:	6013      	str	r3, [r2, #0]
 8009ee2:	9b03      	ldr	r3, [sp, #12]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d052      	beq.n	8009f8e <__hexnan+0x14a>
 8009ee8:	42bc      	cmp	r4, r7
 8009eea:	d206      	bcs.n	8009efa <__hexnan+0xb6>
 8009eec:	2d07      	cmp	r5, #7
 8009eee:	dc04      	bgt.n	8009efa <__hexnan+0xb6>
 8009ef0:	002a      	movs	r2, r5
 8009ef2:	0039      	movs	r1, r7
 8009ef4:	0020      	movs	r0, r4
 8009ef6:	f7ff ff7f 	bl	8009df8 <L_shift>
 8009efa:	9b01      	ldr	r3, [sp, #4]
 8009efc:	429c      	cmp	r4, r3
 8009efe:	d935      	bls.n	8009f6c <__hexnan+0x128>
 8009f00:	001a      	movs	r2, r3
 8009f02:	0023      	movs	r3, r4
 8009f04:	cb02      	ldmia	r3!, {r1}
 8009f06:	c202      	stmia	r2!, {r1}
 8009f08:	429e      	cmp	r6, r3
 8009f0a:	d2fb      	bcs.n	8009f04 <__hexnan+0xc0>
 8009f0c:	9b02      	ldr	r3, [sp, #8]
 8009f0e:	1c61      	adds	r1, r4, #1
 8009f10:	1eda      	subs	r2, r3, #3
 8009f12:	2304      	movs	r3, #4
 8009f14:	4291      	cmp	r1, r2
 8009f16:	d805      	bhi.n	8009f24 <__hexnan+0xe0>
 8009f18:	9b02      	ldr	r3, [sp, #8]
 8009f1a:	3b04      	subs	r3, #4
 8009f1c:	1b1b      	subs	r3, r3, r4
 8009f1e:	089b      	lsrs	r3, r3, #2
 8009f20:	3301      	adds	r3, #1
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	9a01      	ldr	r2, [sp, #4]
 8009f26:	18d3      	adds	r3, r2, r3
 8009f28:	2200      	movs	r2, #0
 8009f2a:	c304      	stmia	r3!, {r2}
 8009f2c:	429e      	cmp	r6, r3
 8009f2e:	d2fc      	bcs.n	8009f2a <__hexnan+0xe6>
 8009f30:	6833      	ldr	r3, [r6, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d104      	bne.n	8009f40 <__hexnan+0xfc>
 8009f36:	9b01      	ldr	r3, [sp, #4]
 8009f38:	429e      	cmp	r6, r3
 8009f3a:	d126      	bne.n	8009f8a <__hexnan+0x146>
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	6033      	str	r3, [r6, #0]
 8009f40:	2005      	movs	r0, #5
 8009f42:	e025      	b.n	8009f90 <__hexnan+0x14c>
 8009f44:	9b03      	ldr	r3, [sp, #12]
 8009f46:	3501      	adds	r5, #1
 8009f48:	3301      	adds	r3, #1
 8009f4a:	9303      	str	r3, [sp, #12]
 8009f4c:	2d08      	cmp	r5, #8
 8009f4e:	dd06      	ble.n	8009f5e <__hexnan+0x11a>
 8009f50:	9b01      	ldr	r3, [sp, #4]
 8009f52:	429c      	cmp	r4, r3
 8009f54:	d9bb      	bls.n	8009ece <__hexnan+0x8a>
 8009f56:	2300      	movs	r3, #0
 8009f58:	2501      	movs	r5, #1
 8009f5a:	3c04      	subs	r4, #4
 8009f5c:	6023      	str	r3, [r4, #0]
 8009f5e:	220f      	movs	r2, #15
 8009f60:	6823      	ldr	r3, [r4, #0]
 8009f62:	4010      	ands	r0, r2
 8009f64:	011b      	lsls	r3, r3, #4
 8009f66:	4318      	orrs	r0, r3
 8009f68:	6020      	str	r0, [r4, #0]
 8009f6a:	e7b0      	b.n	8009ece <__hexnan+0x8a>
 8009f6c:	9b06      	ldr	r3, [sp, #24]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d0de      	beq.n	8009f30 <__hexnan+0xec>
 8009f72:	2120      	movs	r1, #32
 8009f74:	9a06      	ldr	r2, [sp, #24]
 8009f76:	9b02      	ldr	r3, [sp, #8]
 8009f78:	1a89      	subs	r1, r1, r2
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	4252      	negs	r2, r2
 8009f7e:	40ca      	lsrs	r2, r1
 8009f80:	3b04      	subs	r3, #4
 8009f82:	6819      	ldr	r1, [r3, #0]
 8009f84:	400a      	ands	r2, r1
 8009f86:	601a      	str	r2, [r3, #0]
 8009f88:	e7d2      	b.n	8009f30 <__hexnan+0xec>
 8009f8a:	3e04      	subs	r6, #4
 8009f8c:	e7d0      	b.n	8009f30 <__hexnan+0xec>
 8009f8e:	2004      	movs	r0, #4
 8009f90:	b00b      	add	sp, #44	; 0x2c
 8009f92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f94 <_localeconv_r>:
 8009f94:	4800      	ldr	r0, [pc, #0]	; (8009f98 <_localeconv_r+0x4>)
 8009f96:	4770      	bx	lr
 8009f98:	2000016c 	.word	0x2000016c

08009f9c <_lseek_r>:
 8009f9c:	b570      	push	{r4, r5, r6, lr}
 8009f9e:	0004      	movs	r4, r0
 8009fa0:	0008      	movs	r0, r1
 8009fa2:	0011      	movs	r1, r2
 8009fa4:	001a      	movs	r2, r3
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	4d05      	ldr	r5, [pc, #20]	; (8009fc0 <_lseek_r+0x24>)
 8009faa:	602b      	str	r3, [r5, #0]
 8009fac:	f7f9 fa16 	bl	80033dc <_lseek>
 8009fb0:	1c43      	adds	r3, r0, #1
 8009fb2:	d103      	bne.n	8009fbc <_lseek_r+0x20>
 8009fb4:	682b      	ldr	r3, [r5, #0]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d000      	beq.n	8009fbc <_lseek_r+0x20>
 8009fba:	6023      	str	r3, [r4, #0]
 8009fbc:	bd70      	pop	{r4, r5, r6, pc}
 8009fbe:	46c0      	nop			; (mov r8, r8)
 8009fc0:	20000428 	.word	0x20000428

08009fc4 <malloc>:
 8009fc4:	b510      	push	{r4, lr}
 8009fc6:	4b03      	ldr	r3, [pc, #12]	; (8009fd4 <malloc+0x10>)
 8009fc8:	0001      	movs	r1, r0
 8009fca:	6818      	ldr	r0, [r3, #0]
 8009fcc:	f000 fd8c 	bl	800aae8 <_malloc_r>
 8009fd0:	bd10      	pop	{r4, pc}
 8009fd2:	46c0      	nop			; (mov r8, r8)
 8009fd4:	20000014 	.word	0x20000014

08009fd8 <__ascii_mbtowc>:
 8009fd8:	b082      	sub	sp, #8
 8009fda:	2900      	cmp	r1, #0
 8009fdc:	d100      	bne.n	8009fe0 <__ascii_mbtowc+0x8>
 8009fde:	a901      	add	r1, sp, #4
 8009fe0:	1e10      	subs	r0, r2, #0
 8009fe2:	d006      	beq.n	8009ff2 <__ascii_mbtowc+0x1a>
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d006      	beq.n	8009ff6 <__ascii_mbtowc+0x1e>
 8009fe8:	7813      	ldrb	r3, [r2, #0]
 8009fea:	600b      	str	r3, [r1, #0]
 8009fec:	7810      	ldrb	r0, [r2, #0]
 8009fee:	1e43      	subs	r3, r0, #1
 8009ff0:	4198      	sbcs	r0, r3
 8009ff2:	b002      	add	sp, #8
 8009ff4:	4770      	bx	lr
 8009ff6:	2002      	movs	r0, #2
 8009ff8:	4240      	negs	r0, r0
 8009ffa:	e7fa      	b.n	8009ff2 <__ascii_mbtowc+0x1a>

08009ffc <memchr>:
 8009ffc:	b2c9      	uxtb	r1, r1
 8009ffe:	1882      	adds	r2, r0, r2
 800a000:	4290      	cmp	r0, r2
 800a002:	d101      	bne.n	800a008 <memchr+0xc>
 800a004:	2000      	movs	r0, #0
 800a006:	4770      	bx	lr
 800a008:	7803      	ldrb	r3, [r0, #0]
 800a00a:	428b      	cmp	r3, r1
 800a00c:	d0fb      	beq.n	800a006 <memchr+0xa>
 800a00e:	3001      	adds	r0, #1
 800a010:	e7f6      	b.n	800a000 <memchr+0x4>

0800a012 <memcpy>:
 800a012:	2300      	movs	r3, #0
 800a014:	b510      	push	{r4, lr}
 800a016:	429a      	cmp	r2, r3
 800a018:	d100      	bne.n	800a01c <memcpy+0xa>
 800a01a:	bd10      	pop	{r4, pc}
 800a01c:	5ccc      	ldrb	r4, [r1, r3]
 800a01e:	54c4      	strb	r4, [r0, r3]
 800a020:	3301      	adds	r3, #1
 800a022:	e7f8      	b.n	800a016 <memcpy+0x4>

0800a024 <_Balloc>:
 800a024:	b570      	push	{r4, r5, r6, lr}
 800a026:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a028:	0006      	movs	r6, r0
 800a02a:	000c      	movs	r4, r1
 800a02c:	2d00      	cmp	r5, #0
 800a02e:	d10e      	bne.n	800a04e <_Balloc+0x2a>
 800a030:	2010      	movs	r0, #16
 800a032:	f7ff ffc7 	bl	8009fc4 <malloc>
 800a036:	1e02      	subs	r2, r0, #0
 800a038:	6270      	str	r0, [r6, #36]	; 0x24
 800a03a:	d104      	bne.n	800a046 <_Balloc+0x22>
 800a03c:	2166      	movs	r1, #102	; 0x66
 800a03e:	4b19      	ldr	r3, [pc, #100]	; (800a0a4 <_Balloc+0x80>)
 800a040:	4819      	ldr	r0, [pc, #100]	; (800a0a8 <_Balloc+0x84>)
 800a042:	f001 fbb9 	bl	800b7b8 <__assert_func>
 800a046:	6045      	str	r5, [r0, #4]
 800a048:	6085      	str	r5, [r0, #8]
 800a04a:	6005      	str	r5, [r0, #0]
 800a04c:	60c5      	str	r5, [r0, #12]
 800a04e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800a050:	68eb      	ldr	r3, [r5, #12]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d013      	beq.n	800a07e <_Balloc+0x5a>
 800a056:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a058:	00a2      	lsls	r2, r4, #2
 800a05a:	68db      	ldr	r3, [r3, #12]
 800a05c:	189b      	adds	r3, r3, r2
 800a05e:	6818      	ldr	r0, [r3, #0]
 800a060:	2800      	cmp	r0, #0
 800a062:	d118      	bne.n	800a096 <_Balloc+0x72>
 800a064:	2101      	movs	r1, #1
 800a066:	000d      	movs	r5, r1
 800a068:	40a5      	lsls	r5, r4
 800a06a:	1d6a      	adds	r2, r5, #5
 800a06c:	0030      	movs	r0, r6
 800a06e:	0092      	lsls	r2, r2, #2
 800a070:	f000 fca1 	bl	800a9b6 <_calloc_r>
 800a074:	2800      	cmp	r0, #0
 800a076:	d00c      	beq.n	800a092 <_Balloc+0x6e>
 800a078:	6044      	str	r4, [r0, #4]
 800a07a:	6085      	str	r5, [r0, #8]
 800a07c:	e00d      	b.n	800a09a <_Balloc+0x76>
 800a07e:	2221      	movs	r2, #33	; 0x21
 800a080:	2104      	movs	r1, #4
 800a082:	0030      	movs	r0, r6
 800a084:	f000 fc97 	bl	800a9b6 <_calloc_r>
 800a088:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a08a:	60e8      	str	r0, [r5, #12]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d1e1      	bne.n	800a056 <_Balloc+0x32>
 800a092:	2000      	movs	r0, #0
 800a094:	bd70      	pop	{r4, r5, r6, pc}
 800a096:	6802      	ldr	r2, [r0, #0]
 800a098:	601a      	str	r2, [r3, #0]
 800a09a:	2300      	movs	r3, #0
 800a09c:	6103      	str	r3, [r0, #16]
 800a09e:	60c3      	str	r3, [r0, #12]
 800a0a0:	e7f8      	b.n	800a094 <_Balloc+0x70>
 800a0a2:	46c0      	nop			; (mov r8, r8)
 800a0a4:	0800c59e 	.word	0x0800c59e
 800a0a8:	0800c69c 	.word	0x0800c69c

0800a0ac <_Bfree>:
 800a0ac:	b570      	push	{r4, r5, r6, lr}
 800a0ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a0b0:	0005      	movs	r5, r0
 800a0b2:	000c      	movs	r4, r1
 800a0b4:	2e00      	cmp	r6, #0
 800a0b6:	d10e      	bne.n	800a0d6 <_Bfree+0x2a>
 800a0b8:	2010      	movs	r0, #16
 800a0ba:	f7ff ff83 	bl	8009fc4 <malloc>
 800a0be:	1e02      	subs	r2, r0, #0
 800a0c0:	6268      	str	r0, [r5, #36]	; 0x24
 800a0c2:	d104      	bne.n	800a0ce <_Bfree+0x22>
 800a0c4:	218a      	movs	r1, #138	; 0x8a
 800a0c6:	4b09      	ldr	r3, [pc, #36]	; (800a0ec <_Bfree+0x40>)
 800a0c8:	4809      	ldr	r0, [pc, #36]	; (800a0f0 <_Bfree+0x44>)
 800a0ca:	f001 fb75 	bl	800b7b8 <__assert_func>
 800a0ce:	6046      	str	r6, [r0, #4]
 800a0d0:	6086      	str	r6, [r0, #8]
 800a0d2:	6006      	str	r6, [r0, #0]
 800a0d4:	60c6      	str	r6, [r0, #12]
 800a0d6:	2c00      	cmp	r4, #0
 800a0d8:	d007      	beq.n	800a0ea <_Bfree+0x3e>
 800a0da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a0dc:	6862      	ldr	r2, [r4, #4]
 800a0de:	68db      	ldr	r3, [r3, #12]
 800a0e0:	0092      	lsls	r2, r2, #2
 800a0e2:	189b      	adds	r3, r3, r2
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	6022      	str	r2, [r4, #0]
 800a0e8:	601c      	str	r4, [r3, #0]
 800a0ea:	bd70      	pop	{r4, r5, r6, pc}
 800a0ec:	0800c59e 	.word	0x0800c59e
 800a0f0:	0800c69c 	.word	0x0800c69c

0800a0f4 <__multadd>:
 800a0f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0f6:	000e      	movs	r6, r1
 800a0f8:	9001      	str	r0, [sp, #4]
 800a0fa:	000c      	movs	r4, r1
 800a0fc:	001d      	movs	r5, r3
 800a0fe:	2000      	movs	r0, #0
 800a100:	690f      	ldr	r7, [r1, #16]
 800a102:	3614      	adds	r6, #20
 800a104:	6833      	ldr	r3, [r6, #0]
 800a106:	3001      	adds	r0, #1
 800a108:	b299      	uxth	r1, r3
 800a10a:	4351      	muls	r1, r2
 800a10c:	0c1b      	lsrs	r3, r3, #16
 800a10e:	4353      	muls	r3, r2
 800a110:	1949      	adds	r1, r1, r5
 800a112:	0c0d      	lsrs	r5, r1, #16
 800a114:	195b      	adds	r3, r3, r5
 800a116:	0c1d      	lsrs	r5, r3, #16
 800a118:	b289      	uxth	r1, r1
 800a11a:	041b      	lsls	r3, r3, #16
 800a11c:	185b      	adds	r3, r3, r1
 800a11e:	c608      	stmia	r6!, {r3}
 800a120:	4287      	cmp	r7, r0
 800a122:	dcef      	bgt.n	800a104 <__multadd+0x10>
 800a124:	2d00      	cmp	r5, #0
 800a126:	d022      	beq.n	800a16e <__multadd+0x7a>
 800a128:	68a3      	ldr	r3, [r4, #8]
 800a12a:	42bb      	cmp	r3, r7
 800a12c:	dc19      	bgt.n	800a162 <__multadd+0x6e>
 800a12e:	6863      	ldr	r3, [r4, #4]
 800a130:	9801      	ldr	r0, [sp, #4]
 800a132:	1c59      	adds	r1, r3, #1
 800a134:	f7ff ff76 	bl	800a024 <_Balloc>
 800a138:	1e06      	subs	r6, r0, #0
 800a13a:	d105      	bne.n	800a148 <__multadd+0x54>
 800a13c:	0002      	movs	r2, r0
 800a13e:	21b5      	movs	r1, #181	; 0xb5
 800a140:	4b0c      	ldr	r3, [pc, #48]	; (800a174 <__multadd+0x80>)
 800a142:	480d      	ldr	r0, [pc, #52]	; (800a178 <__multadd+0x84>)
 800a144:	f001 fb38 	bl	800b7b8 <__assert_func>
 800a148:	0021      	movs	r1, r4
 800a14a:	6923      	ldr	r3, [r4, #16]
 800a14c:	310c      	adds	r1, #12
 800a14e:	1c9a      	adds	r2, r3, #2
 800a150:	0092      	lsls	r2, r2, #2
 800a152:	300c      	adds	r0, #12
 800a154:	f7ff ff5d 	bl	800a012 <memcpy>
 800a158:	0021      	movs	r1, r4
 800a15a:	9801      	ldr	r0, [sp, #4]
 800a15c:	f7ff ffa6 	bl	800a0ac <_Bfree>
 800a160:	0034      	movs	r4, r6
 800a162:	1d3b      	adds	r3, r7, #4
 800a164:	009b      	lsls	r3, r3, #2
 800a166:	18e3      	adds	r3, r4, r3
 800a168:	605d      	str	r5, [r3, #4]
 800a16a:	1c7b      	adds	r3, r7, #1
 800a16c:	6123      	str	r3, [r4, #16]
 800a16e:	0020      	movs	r0, r4
 800a170:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a172:	46c0      	nop			; (mov r8, r8)
 800a174:	0800c610 	.word	0x0800c610
 800a178:	0800c69c 	.word	0x0800c69c

0800a17c <__s2b>:
 800a17c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a17e:	0006      	movs	r6, r0
 800a180:	0018      	movs	r0, r3
 800a182:	000c      	movs	r4, r1
 800a184:	3008      	adds	r0, #8
 800a186:	2109      	movs	r1, #9
 800a188:	9301      	str	r3, [sp, #4]
 800a18a:	0015      	movs	r5, r2
 800a18c:	f7f6 f862 	bl	8000254 <__divsi3>
 800a190:	2301      	movs	r3, #1
 800a192:	2100      	movs	r1, #0
 800a194:	4283      	cmp	r3, r0
 800a196:	db0a      	blt.n	800a1ae <__s2b+0x32>
 800a198:	0030      	movs	r0, r6
 800a19a:	f7ff ff43 	bl	800a024 <_Balloc>
 800a19e:	1e01      	subs	r1, r0, #0
 800a1a0:	d108      	bne.n	800a1b4 <__s2b+0x38>
 800a1a2:	0002      	movs	r2, r0
 800a1a4:	4b19      	ldr	r3, [pc, #100]	; (800a20c <__s2b+0x90>)
 800a1a6:	481a      	ldr	r0, [pc, #104]	; (800a210 <__s2b+0x94>)
 800a1a8:	31ce      	adds	r1, #206	; 0xce
 800a1aa:	f001 fb05 	bl	800b7b8 <__assert_func>
 800a1ae:	005b      	lsls	r3, r3, #1
 800a1b0:	3101      	adds	r1, #1
 800a1b2:	e7ef      	b.n	800a194 <__s2b+0x18>
 800a1b4:	9b08      	ldr	r3, [sp, #32]
 800a1b6:	6143      	str	r3, [r0, #20]
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	6103      	str	r3, [r0, #16]
 800a1bc:	2d09      	cmp	r5, #9
 800a1be:	dd18      	ble.n	800a1f2 <__s2b+0x76>
 800a1c0:	0023      	movs	r3, r4
 800a1c2:	3309      	adds	r3, #9
 800a1c4:	001f      	movs	r7, r3
 800a1c6:	9300      	str	r3, [sp, #0]
 800a1c8:	1964      	adds	r4, r4, r5
 800a1ca:	783b      	ldrb	r3, [r7, #0]
 800a1cc:	220a      	movs	r2, #10
 800a1ce:	0030      	movs	r0, r6
 800a1d0:	3b30      	subs	r3, #48	; 0x30
 800a1d2:	f7ff ff8f 	bl	800a0f4 <__multadd>
 800a1d6:	3701      	adds	r7, #1
 800a1d8:	0001      	movs	r1, r0
 800a1da:	42a7      	cmp	r7, r4
 800a1dc:	d1f5      	bne.n	800a1ca <__s2b+0x4e>
 800a1de:	002c      	movs	r4, r5
 800a1e0:	9b00      	ldr	r3, [sp, #0]
 800a1e2:	3c08      	subs	r4, #8
 800a1e4:	191c      	adds	r4, r3, r4
 800a1e6:	002f      	movs	r7, r5
 800a1e8:	9b01      	ldr	r3, [sp, #4]
 800a1ea:	429f      	cmp	r7, r3
 800a1ec:	db04      	blt.n	800a1f8 <__s2b+0x7c>
 800a1ee:	0008      	movs	r0, r1
 800a1f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a1f2:	2509      	movs	r5, #9
 800a1f4:	340a      	adds	r4, #10
 800a1f6:	e7f6      	b.n	800a1e6 <__s2b+0x6a>
 800a1f8:	1b63      	subs	r3, r4, r5
 800a1fa:	5ddb      	ldrb	r3, [r3, r7]
 800a1fc:	220a      	movs	r2, #10
 800a1fe:	0030      	movs	r0, r6
 800a200:	3b30      	subs	r3, #48	; 0x30
 800a202:	f7ff ff77 	bl	800a0f4 <__multadd>
 800a206:	3701      	adds	r7, #1
 800a208:	0001      	movs	r1, r0
 800a20a:	e7ed      	b.n	800a1e8 <__s2b+0x6c>
 800a20c:	0800c610 	.word	0x0800c610
 800a210:	0800c69c 	.word	0x0800c69c

0800a214 <__hi0bits>:
 800a214:	0003      	movs	r3, r0
 800a216:	0c02      	lsrs	r2, r0, #16
 800a218:	2000      	movs	r0, #0
 800a21a:	4282      	cmp	r2, r0
 800a21c:	d101      	bne.n	800a222 <__hi0bits+0xe>
 800a21e:	041b      	lsls	r3, r3, #16
 800a220:	3010      	adds	r0, #16
 800a222:	0e1a      	lsrs	r2, r3, #24
 800a224:	d101      	bne.n	800a22a <__hi0bits+0x16>
 800a226:	3008      	adds	r0, #8
 800a228:	021b      	lsls	r3, r3, #8
 800a22a:	0f1a      	lsrs	r2, r3, #28
 800a22c:	d101      	bne.n	800a232 <__hi0bits+0x1e>
 800a22e:	3004      	adds	r0, #4
 800a230:	011b      	lsls	r3, r3, #4
 800a232:	0f9a      	lsrs	r2, r3, #30
 800a234:	d101      	bne.n	800a23a <__hi0bits+0x26>
 800a236:	3002      	adds	r0, #2
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	db03      	blt.n	800a246 <__hi0bits+0x32>
 800a23e:	3001      	adds	r0, #1
 800a240:	005b      	lsls	r3, r3, #1
 800a242:	d400      	bmi.n	800a246 <__hi0bits+0x32>
 800a244:	2020      	movs	r0, #32
 800a246:	4770      	bx	lr

0800a248 <__lo0bits>:
 800a248:	6803      	ldr	r3, [r0, #0]
 800a24a:	0002      	movs	r2, r0
 800a24c:	2107      	movs	r1, #7
 800a24e:	0018      	movs	r0, r3
 800a250:	4008      	ands	r0, r1
 800a252:	420b      	tst	r3, r1
 800a254:	d00d      	beq.n	800a272 <__lo0bits+0x2a>
 800a256:	3906      	subs	r1, #6
 800a258:	2000      	movs	r0, #0
 800a25a:	420b      	tst	r3, r1
 800a25c:	d105      	bne.n	800a26a <__lo0bits+0x22>
 800a25e:	3002      	adds	r0, #2
 800a260:	4203      	tst	r3, r0
 800a262:	d003      	beq.n	800a26c <__lo0bits+0x24>
 800a264:	40cb      	lsrs	r3, r1
 800a266:	0008      	movs	r0, r1
 800a268:	6013      	str	r3, [r2, #0]
 800a26a:	4770      	bx	lr
 800a26c:	089b      	lsrs	r3, r3, #2
 800a26e:	6013      	str	r3, [r2, #0]
 800a270:	e7fb      	b.n	800a26a <__lo0bits+0x22>
 800a272:	b299      	uxth	r1, r3
 800a274:	2900      	cmp	r1, #0
 800a276:	d101      	bne.n	800a27c <__lo0bits+0x34>
 800a278:	2010      	movs	r0, #16
 800a27a:	0c1b      	lsrs	r3, r3, #16
 800a27c:	b2d9      	uxtb	r1, r3
 800a27e:	2900      	cmp	r1, #0
 800a280:	d101      	bne.n	800a286 <__lo0bits+0x3e>
 800a282:	3008      	adds	r0, #8
 800a284:	0a1b      	lsrs	r3, r3, #8
 800a286:	0719      	lsls	r1, r3, #28
 800a288:	d101      	bne.n	800a28e <__lo0bits+0x46>
 800a28a:	3004      	adds	r0, #4
 800a28c:	091b      	lsrs	r3, r3, #4
 800a28e:	0799      	lsls	r1, r3, #30
 800a290:	d101      	bne.n	800a296 <__lo0bits+0x4e>
 800a292:	3002      	adds	r0, #2
 800a294:	089b      	lsrs	r3, r3, #2
 800a296:	07d9      	lsls	r1, r3, #31
 800a298:	d4e9      	bmi.n	800a26e <__lo0bits+0x26>
 800a29a:	3001      	adds	r0, #1
 800a29c:	085b      	lsrs	r3, r3, #1
 800a29e:	d1e6      	bne.n	800a26e <__lo0bits+0x26>
 800a2a0:	2020      	movs	r0, #32
 800a2a2:	e7e2      	b.n	800a26a <__lo0bits+0x22>

0800a2a4 <__i2b>:
 800a2a4:	b510      	push	{r4, lr}
 800a2a6:	000c      	movs	r4, r1
 800a2a8:	2101      	movs	r1, #1
 800a2aa:	f7ff febb 	bl	800a024 <_Balloc>
 800a2ae:	2800      	cmp	r0, #0
 800a2b0:	d106      	bne.n	800a2c0 <__i2b+0x1c>
 800a2b2:	21a0      	movs	r1, #160	; 0xa0
 800a2b4:	0002      	movs	r2, r0
 800a2b6:	4b04      	ldr	r3, [pc, #16]	; (800a2c8 <__i2b+0x24>)
 800a2b8:	4804      	ldr	r0, [pc, #16]	; (800a2cc <__i2b+0x28>)
 800a2ba:	0049      	lsls	r1, r1, #1
 800a2bc:	f001 fa7c 	bl	800b7b8 <__assert_func>
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	6144      	str	r4, [r0, #20]
 800a2c4:	6103      	str	r3, [r0, #16]
 800a2c6:	bd10      	pop	{r4, pc}
 800a2c8:	0800c610 	.word	0x0800c610
 800a2cc:	0800c69c 	.word	0x0800c69c

0800a2d0 <__multiply>:
 800a2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2d2:	690b      	ldr	r3, [r1, #16]
 800a2d4:	0014      	movs	r4, r2
 800a2d6:	6912      	ldr	r2, [r2, #16]
 800a2d8:	000d      	movs	r5, r1
 800a2da:	b089      	sub	sp, #36	; 0x24
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	da01      	bge.n	800a2e4 <__multiply+0x14>
 800a2e0:	0025      	movs	r5, r4
 800a2e2:	000c      	movs	r4, r1
 800a2e4:	692f      	ldr	r7, [r5, #16]
 800a2e6:	6926      	ldr	r6, [r4, #16]
 800a2e8:	6869      	ldr	r1, [r5, #4]
 800a2ea:	19bb      	adds	r3, r7, r6
 800a2ec:	9302      	str	r3, [sp, #8]
 800a2ee:	68ab      	ldr	r3, [r5, #8]
 800a2f0:	19ba      	adds	r2, r7, r6
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	da00      	bge.n	800a2f8 <__multiply+0x28>
 800a2f6:	3101      	adds	r1, #1
 800a2f8:	f7ff fe94 	bl	800a024 <_Balloc>
 800a2fc:	9001      	str	r0, [sp, #4]
 800a2fe:	2800      	cmp	r0, #0
 800a300:	d106      	bne.n	800a310 <__multiply+0x40>
 800a302:	215e      	movs	r1, #94	; 0x5e
 800a304:	0002      	movs	r2, r0
 800a306:	4b48      	ldr	r3, [pc, #288]	; (800a428 <__multiply+0x158>)
 800a308:	4848      	ldr	r0, [pc, #288]	; (800a42c <__multiply+0x15c>)
 800a30a:	31ff      	adds	r1, #255	; 0xff
 800a30c:	f001 fa54 	bl	800b7b8 <__assert_func>
 800a310:	9b01      	ldr	r3, [sp, #4]
 800a312:	2200      	movs	r2, #0
 800a314:	3314      	adds	r3, #20
 800a316:	469c      	mov	ip, r3
 800a318:	19bb      	adds	r3, r7, r6
 800a31a:	009b      	lsls	r3, r3, #2
 800a31c:	4463      	add	r3, ip
 800a31e:	9303      	str	r3, [sp, #12]
 800a320:	4663      	mov	r3, ip
 800a322:	9903      	ldr	r1, [sp, #12]
 800a324:	428b      	cmp	r3, r1
 800a326:	d32c      	bcc.n	800a382 <__multiply+0xb2>
 800a328:	002b      	movs	r3, r5
 800a32a:	0022      	movs	r2, r4
 800a32c:	3314      	adds	r3, #20
 800a32e:	00bf      	lsls	r7, r7, #2
 800a330:	3214      	adds	r2, #20
 800a332:	9306      	str	r3, [sp, #24]
 800a334:	00b6      	lsls	r6, r6, #2
 800a336:	19db      	adds	r3, r3, r7
 800a338:	9304      	str	r3, [sp, #16]
 800a33a:	1993      	adds	r3, r2, r6
 800a33c:	9307      	str	r3, [sp, #28]
 800a33e:	2304      	movs	r3, #4
 800a340:	9305      	str	r3, [sp, #20]
 800a342:	002b      	movs	r3, r5
 800a344:	9904      	ldr	r1, [sp, #16]
 800a346:	3315      	adds	r3, #21
 800a348:	9200      	str	r2, [sp, #0]
 800a34a:	4299      	cmp	r1, r3
 800a34c:	d305      	bcc.n	800a35a <__multiply+0x8a>
 800a34e:	1b4b      	subs	r3, r1, r5
 800a350:	3b15      	subs	r3, #21
 800a352:	089b      	lsrs	r3, r3, #2
 800a354:	3301      	adds	r3, #1
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	9305      	str	r3, [sp, #20]
 800a35a:	9b07      	ldr	r3, [sp, #28]
 800a35c:	9a00      	ldr	r2, [sp, #0]
 800a35e:	429a      	cmp	r2, r3
 800a360:	d311      	bcc.n	800a386 <__multiply+0xb6>
 800a362:	9b02      	ldr	r3, [sp, #8]
 800a364:	2b00      	cmp	r3, #0
 800a366:	dd06      	ble.n	800a376 <__multiply+0xa6>
 800a368:	9b03      	ldr	r3, [sp, #12]
 800a36a:	3b04      	subs	r3, #4
 800a36c:	9303      	str	r3, [sp, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	9300      	str	r3, [sp, #0]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d053      	beq.n	800a41e <__multiply+0x14e>
 800a376:	9b01      	ldr	r3, [sp, #4]
 800a378:	9a02      	ldr	r2, [sp, #8]
 800a37a:	0018      	movs	r0, r3
 800a37c:	611a      	str	r2, [r3, #16]
 800a37e:	b009      	add	sp, #36	; 0x24
 800a380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a382:	c304      	stmia	r3!, {r2}
 800a384:	e7cd      	b.n	800a322 <__multiply+0x52>
 800a386:	9b00      	ldr	r3, [sp, #0]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	b298      	uxth	r0, r3
 800a38c:	2800      	cmp	r0, #0
 800a38e:	d01b      	beq.n	800a3c8 <__multiply+0xf8>
 800a390:	4667      	mov	r7, ip
 800a392:	2400      	movs	r4, #0
 800a394:	9e06      	ldr	r6, [sp, #24]
 800a396:	ce02      	ldmia	r6!, {r1}
 800a398:	683a      	ldr	r2, [r7, #0]
 800a39a:	b28b      	uxth	r3, r1
 800a39c:	4343      	muls	r3, r0
 800a39e:	b292      	uxth	r2, r2
 800a3a0:	189b      	adds	r3, r3, r2
 800a3a2:	191b      	adds	r3, r3, r4
 800a3a4:	0c0c      	lsrs	r4, r1, #16
 800a3a6:	4344      	muls	r4, r0
 800a3a8:	683a      	ldr	r2, [r7, #0]
 800a3aa:	0c11      	lsrs	r1, r2, #16
 800a3ac:	1861      	adds	r1, r4, r1
 800a3ae:	0c1c      	lsrs	r4, r3, #16
 800a3b0:	1909      	adds	r1, r1, r4
 800a3b2:	0c0c      	lsrs	r4, r1, #16
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	0409      	lsls	r1, r1, #16
 800a3b8:	430b      	orrs	r3, r1
 800a3ba:	c708      	stmia	r7!, {r3}
 800a3bc:	9b04      	ldr	r3, [sp, #16]
 800a3be:	42b3      	cmp	r3, r6
 800a3c0:	d8e9      	bhi.n	800a396 <__multiply+0xc6>
 800a3c2:	4663      	mov	r3, ip
 800a3c4:	9a05      	ldr	r2, [sp, #20]
 800a3c6:	509c      	str	r4, [r3, r2]
 800a3c8:	9b00      	ldr	r3, [sp, #0]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	0c1e      	lsrs	r6, r3, #16
 800a3ce:	d020      	beq.n	800a412 <__multiply+0x142>
 800a3d0:	4663      	mov	r3, ip
 800a3d2:	002c      	movs	r4, r5
 800a3d4:	4660      	mov	r0, ip
 800a3d6:	2700      	movs	r7, #0
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	3414      	adds	r4, #20
 800a3dc:	6822      	ldr	r2, [r4, #0]
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	b291      	uxth	r1, r2
 800a3e2:	4371      	muls	r1, r6
 800a3e4:	6802      	ldr	r2, [r0, #0]
 800a3e6:	0c12      	lsrs	r2, r2, #16
 800a3e8:	1889      	adds	r1, r1, r2
 800a3ea:	19cf      	adds	r7, r1, r7
 800a3ec:	0439      	lsls	r1, r7, #16
 800a3ee:	430b      	orrs	r3, r1
 800a3f0:	6003      	str	r3, [r0, #0]
 800a3f2:	cc02      	ldmia	r4!, {r1}
 800a3f4:	6843      	ldr	r3, [r0, #4]
 800a3f6:	0c09      	lsrs	r1, r1, #16
 800a3f8:	4371      	muls	r1, r6
 800a3fa:	b29b      	uxth	r3, r3
 800a3fc:	0c3f      	lsrs	r7, r7, #16
 800a3fe:	18cb      	adds	r3, r1, r3
 800a400:	9a04      	ldr	r2, [sp, #16]
 800a402:	19db      	adds	r3, r3, r7
 800a404:	0c1f      	lsrs	r7, r3, #16
 800a406:	3004      	adds	r0, #4
 800a408:	42a2      	cmp	r2, r4
 800a40a:	d8e7      	bhi.n	800a3dc <__multiply+0x10c>
 800a40c:	4662      	mov	r2, ip
 800a40e:	9905      	ldr	r1, [sp, #20]
 800a410:	5053      	str	r3, [r2, r1]
 800a412:	9b00      	ldr	r3, [sp, #0]
 800a414:	3304      	adds	r3, #4
 800a416:	9300      	str	r3, [sp, #0]
 800a418:	2304      	movs	r3, #4
 800a41a:	449c      	add	ip, r3
 800a41c:	e79d      	b.n	800a35a <__multiply+0x8a>
 800a41e:	9b02      	ldr	r3, [sp, #8]
 800a420:	3b01      	subs	r3, #1
 800a422:	9302      	str	r3, [sp, #8]
 800a424:	e79d      	b.n	800a362 <__multiply+0x92>
 800a426:	46c0      	nop			; (mov r8, r8)
 800a428:	0800c610 	.word	0x0800c610
 800a42c:	0800c69c 	.word	0x0800c69c

0800a430 <__pow5mult>:
 800a430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a432:	2303      	movs	r3, #3
 800a434:	0015      	movs	r5, r2
 800a436:	0007      	movs	r7, r0
 800a438:	000e      	movs	r6, r1
 800a43a:	401a      	ands	r2, r3
 800a43c:	421d      	tst	r5, r3
 800a43e:	d008      	beq.n	800a452 <__pow5mult+0x22>
 800a440:	4925      	ldr	r1, [pc, #148]	; (800a4d8 <__pow5mult+0xa8>)
 800a442:	3a01      	subs	r2, #1
 800a444:	0092      	lsls	r2, r2, #2
 800a446:	5852      	ldr	r2, [r2, r1]
 800a448:	2300      	movs	r3, #0
 800a44a:	0031      	movs	r1, r6
 800a44c:	f7ff fe52 	bl	800a0f4 <__multadd>
 800a450:	0006      	movs	r6, r0
 800a452:	10ad      	asrs	r5, r5, #2
 800a454:	d03d      	beq.n	800a4d2 <__pow5mult+0xa2>
 800a456:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800a458:	2c00      	cmp	r4, #0
 800a45a:	d10f      	bne.n	800a47c <__pow5mult+0x4c>
 800a45c:	2010      	movs	r0, #16
 800a45e:	f7ff fdb1 	bl	8009fc4 <malloc>
 800a462:	1e02      	subs	r2, r0, #0
 800a464:	6278      	str	r0, [r7, #36]	; 0x24
 800a466:	d105      	bne.n	800a474 <__pow5mult+0x44>
 800a468:	21d7      	movs	r1, #215	; 0xd7
 800a46a:	4b1c      	ldr	r3, [pc, #112]	; (800a4dc <__pow5mult+0xac>)
 800a46c:	481c      	ldr	r0, [pc, #112]	; (800a4e0 <__pow5mult+0xb0>)
 800a46e:	0049      	lsls	r1, r1, #1
 800a470:	f001 f9a2 	bl	800b7b8 <__assert_func>
 800a474:	6044      	str	r4, [r0, #4]
 800a476:	6084      	str	r4, [r0, #8]
 800a478:	6004      	str	r4, [r0, #0]
 800a47a:	60c4      	str	r4, [r0, #12]
 800a47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47e:	689c      	ldr	r4, [r3, #8]
 800a480:	9301      	str	r3, [sp, #4]
 800a482:	2c00      	cmp	r4, #0
 800a484:	d108      	bne.n	800a498 <__pow5mult+0x68>
 800a486:	0038      	movs	r0, r7
 800a488:	4916      	ldr	r1, [pc, #88]	; (800a4e4 <__pow5mult+0xb4>)
 800a48a:	f7ff ff0b 	bl	800a2a4 <__i2b>
 800a48e:	9b01      	ldr	r3, [sp, #4]
 800a490:	0004      	movs	r4, r0
 800a492:	6098      	str	r0, [r3, #8]
 800a494:	2300      	movs	r3, #0
 800a496:	6003      	str	r3, [r0, #0]
 800a498:	2301      	movs	r3, #1
 800a49a:	421d      	tst	r5, r3
 800a49c:	d00a      	beq.n	800a4b4 <__pow5mult+0x84>
 800a49e:	0031      	movs	r1, r6
 800a4a0:	0022      	movs	r2, r4
 800a4a2:	0038      	movs	r0, r7
 800a4a4:	f7ff ff14 	bl	800a2d0 <__multiply>
 800a4a8:	0031      	movs	r1, r6
 800a4aa:	9001      	str	r0, [sp, #4]
 800a4ac:	0038      	movs	r0, r7
 800a4ae:	f7ff fdfd 	bl	800a0ac <_Bfree>
 800a4b2:	9e01      	ldr	r6, [sp, #4]
 800a4b4:	106d      	asrs	r5, r5, #1
 800a4b6:	d00c      	beq.n	800a4d2 <__pow5mult+0xa2>
 800a4b8:	6820      	ldr	r0, [r4, #0]
 800a4ba:	2800      	cmp	r0, #0
 800a4bc:	d107      	bne.n	800a4ce <__pow5mult+0x9e>
 800a4be:	0022      	movs	r2, r4
 800a4c0:	0021      	movs	r1, r4
 800a4c2:	0038      	movs	r0, r7
 800a4c4:	f7ff ff04 	bl	800a2d0 <__multiply>
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	6020      	str	r0, [r4, #0]
 800a4cc:	6003      	str	r3, [r0, #0]
 800a4ce:	0004      	movs	r4, r0
 800a4d0:	e7e2      	b.n	800a498 <__pow5mult+0x68>
 800a4d2:	0030      	movs	r0, r6
 800a4d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a4d6:	46c0      	nop			; (mov r8, r8)
 800a4d8:	0800c7e8 	.word	0x0800c7e8
 800a4dc:	0800c59e 	.word	0x0800c59e
 800a4e0:	0800c69c 	.word	0x0800c69c
 800a4e4:	00000271 	.word	0x00000271

0800a4e8 <__lshift>:
 800a4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4ea:	000c      	movs	r4, r1
 800a4ec:	0017      	movs	r7, r2
 800a4ee:	6923      	ldr	r3, [r4, #16]
 800a4f0:	1155      	asrs	r5, r2, #5
 800a4f2:	b087      	sub	sp, #28
 800a4f4:	18eb      	adds	r3, r5, r3
 800a4f6:	9302      	str	r3, [sp, #8]
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	9301      	str	r3, [sp, #4]
 800a4fc:	6849      	ldr	r1, [r1, #4]
 800a4fe:	68a3      	ldr	r3, [r4, #8]
 800a500:	9004      	str	r0, [sp, #16]
 800a502:	9a01      	ldr	r2, [sp, #4]
 800a504:	4293      	cmp	r3, r2
 800a506:	db10      	blt.n	800a52a <__lshift+0x42>
 800a508:	9804      	ldr	r0, [sp, #16]
 800a50a:	f7ff fd8b 	bl	800a024 <_Balloc>
 800a50e:	2300      	movs	r3, #0
 800a510:	0002      	movs	r2, r0
 800a512:	0006      	movs	r6, r0
 800a514:	0019      	movs	r1, r3
 800a516:	3214      	adds	r2, #20
 800a518:	4298      	cmp	r0, r3
 800a51a:	d10c      	bne.n	800a536 <__lshift+0x4e>
 800a51c:	21da      	movs	r1, #218	; 0xda
 800a51e:	0002      	movs	r2, r0
 800a520:	4b26      	ldr	r3, [pc, #152]	; (800a5bc <__lshift+0xd4>)
 800a522:	4827      	ldr	r0, [pc, #156]	; (800a5c0 <__lshift+0xd8>)
 800a524:	31ff      	adds	r1, #255	; 0xff
 800a526:	f001 f947 	bl	800b7b8 <__assert_func>
 800a52a:	3101      	adds	r1, #1
 800a52c:	005b      	lsls	r3, r3, #1
 800a52e:	e7e8      	b.n	800a502 <__lshift+0x1a>
 800a530:	0098      	lsls	r0, r3, #2
 800a532:	5011      	str	r1, [r2, r0]
 800a534:	3301      	adds	r3, #1
 800a536:	42ab      	cmp	r3, r5
 800a538:	dbfa      	blt.n	800a530 <__lshift+0x48>
 800a53a:	43eb      	mvns	r3, r5
 800a53c:	17db      	asrs	r3, r3, #31
 800a53e:	401d      	ands	r5, r3
 800a540:	211f      	movs	r1, #31
 800a542:	0023      	movs	r3, r4
 800a544:	0038      	movs	r0, r7
 800a546:	00ad      	lsls	r5, r5, #2
 800a548:	1955      	adds	r5, r2, r5
 800a54a:	6922      	ldr	r2, [r4, #16]
 800a54c:	3314      	adds	r3, #20
 800a54e:	0092      	lsls	r2, r2, #2
 800a550:	4008      	ands	r0, r1
 800a552:	4684      	mov	ip, r0
 800a554:	189a      	adds	r2, r3, r2
 800a556:	420f      	tst	r7, r1
 800a558:	d02a      	beq.n	800a5b0 <__lshift+0xc8>
 800a55a:	3101      	adds	r1, #1
 800a55c:	1a09      	subs	r1, r1, r0
 800a55e:	9105      	str	r1, [sp, #20]
 800a560:	2100      	movs	r1, #0
 800a562:	9503      	str	r5, [sp, #12]
 800a564:	4667      	mov	r7, ip
 800a566:	6818      	ldr	r0, [r3, #0]
 800a568:	40b8      	lsls	r0, r7
 800a56a:	4301      	orrs	r1, r0
 800a56c:	9803      	ldr	r0, [sp, #12]
 800a56e:	c002      	stmia	r0!, {r1}
 800a570:	cb02      	ldmia	r3!, {r1}
 800a572:	9003      	str	r0, [sp, #12]
 800a574:	9805      	ldr	r0, [sp, #20]
 800a576:	40c1      	lsrs	r1, r0
 800a578:	429a      	cmp	r2, r3
 800a57a:	d8f3      	bhi.n	800a564 <__lshift+0x7c>
 800a57c:	0020      	movs	r0, r4
 800a57e:	3015      	adds	r0, #21
 800a580:	2304      	movs	r3, #4
 800a582:	4282      	cmp	r2, r0
 800a584:	d304      	bcc.n	800a590 <__lshift+0xa8>
 800a586:	1b13      	subs	r3, r2, r4
 800a588:	3b15      	subs	r3, #21
 800a58a:	089b      	lsrs	r3, r3, #2
 800a58c:	3301      	adds	r3, #1
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	50e9      	str	r1, [r5, r3]
 800a592:	2900      	cmp	r1, #0
 800a594:	d002      	beq.n	800a59c <__lshift+0xb4>
 800a596:	9b02      	ldr	r3, [sp, #8]
 800a598:	3302      	adds	r3, #2
 800a59a:	9301      	str	r3, [sp, #4]
 800a59c:	9b01      	ldr	r3, [sp, #4]
 800a59e:	9804      	ldr	r0, [sp, #16]
 800a5a0:	3b01      	subs	r3, #1
 800a5a2:	0021      	movs	r1, r4
 800a5a4:	6133      	str	r3, [r6, #16]
 800a5a6:	f7ff fd81 	bl	800a0ac <_Bfree>
 800a5aa:	0030      	movs	r0, r6
 800a5ac:	b007      	add	sp, #28
 800a5ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5b0:	cb02      	ldmia	r3!, {r1}
 800a5b2:	c502      	stmia	r5!, {r1}
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d8fb      	bhi.n	800a5b0 <__lshift+0xc8>
 800a5b8:	e7f0      	b.n	800a59c <__lshift+0xb4>
 800a5ba:	46c0      	nop			; (mov r8, r8)
 800a5bc:	0800c610 	.word	0x0800c610
 800a5c0:	0800c69c 	.word	0x0800c69c

0800a5c4 <__mcmp>:
 800a5c4:	6902      	ldr	r2, [r0, #16]
 800a5c6:	690b      	ldr	r3, [r1, #16]
 800a5c8:	b530      	push	{r4, r5, lr}
 800a5ca:	0004      	movs	r4, r0
 800a5cc:	1ad0      	subs	r0, r2, r3
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d10d      	bne.n	800a5ee <__mcmp+0x2a>
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	3414      	adds	r4, #20
 800a5d6:	3114      	adds	r1, #20
 800a5d8:	18e2      	adds	r2, r4, r3
 800a5da:	18c9      	adds	r1, r1, r3
 800a5dc:	3a04      	subs	r2, #4
 800a5de:	3904      	subs	r1, #4
 800a5e0:	6815      	ldr	r5, [r2, #0]
 800a5e2:	680b      	ldr	r3, [r1, #0]
 800a5e4:	429d      	cmp	r5, r3
 800a5e6:	d003      	beq.n	800a5f0 <__mcmp+0x2c>
 800a5e8:	2001      	movs	r0, #1
 800a5ea:	429d      	cmp	r5, r3
 800a5ec:	d303      	bcc.n	800a5f6 <__mcmp+0x32>
 800a5ee:	bd30      	pop	{r4, r5, pc}
 800a5f0:	4294      	cmp	r4, r2
 800a5f2:	d3f3      	bcc.n	800a5dc <__mcmp+0x18>
 800a5f4:	e7fb      	b.n	800a5ee <__mcmp+0x2a>
 800a5f6:	4240      	negs	r0, r0
 800a5f8:	e7f9      	b.n	800a5ee <__mcmp+0x2a>
	...

0800a5fc <__mdiff>:
 800a5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5fe:	000e      	movs	r6, r1
 800a600:	0007      	movs	r7, r0
 800a602:	0011      	movs	r1, r2
 800a604:	0030      	movs	r0, r6
 800a606:	b087      	sub	sp, #28
 800a608:	0014      	movs	r4, r2
 800a60a:	f7ff ffdb 	bl	800a5c4 <__mcmp>
 800a60e:	1e05      	subs	r5, r0, #0
 800a610:	d110      	bne.n	800a634 <__mdiff+0x38>
 800a612:	0001      	movs	r1, r0
 800a614:	0038      	movs	r0, r7
 800a616:	f7ff fd05 	bl	800a024 <_Balloc>
 800a61a:	1e02      	subs	r2, r0, #0
 800a61c:	d104      	bne.n	800a628 <__mdiff+0x2c>
 800a61e:	4b40      	ldr	r3, [pc, #256]	; (800a720 <__mdiff+0x124>)
 800a620:	4940      	ldr	r1, [pc, #256]	; (800a724 <__mdiff+0x128>)
 800a622:	4841      	ldr	r0, [pc, #260]	; (800a728 <__mdiff+0x12c>)
 800a624:	f001 f8c8 	bl	800b7b8 <__assert_func>
 800a628:	2301      	movs	r3, #1
 800a62a:	6145      	str	r5, [r0, #20]
 800a62c:	6103      	str	r3, [r0, #16]
 800a62e:	0010      	movs	r0, r2
 800a630:	b007      	add	sp, #28
 800a632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a634:	2301      	movs	r3, #1
 800a636:	9301      	str	r3, [sp, #4]
 800a638:	2800      	cmp	r0, #0
 800a63a:	db04      	blt.n	800a646 <__mdiff+0x4a>
 800a63c:	0023      	movs	r3, r4
 800a63e:	0034      	movs	r4, r6
 800a640:	001e      	movs	r6, r3
 800a642:	2300      	movs	r3, #0
 800a644:	9301      	str	r3, [sp, #4]
 800a646:	0038      	movs	r0, r7
 800a648:	6861      	ldr	r1, [r4, #4]
 800a64a:	f7ff fceb 	bl	800a024 <_Balloc>
 800a64e:	1e02      	subs	r2, r0, #0
 800a650:	d103      	bne.n	800a65a <__mdiff+0x5e>
 800a652:	2190      	movs	r1, #144	; 0x90
 800a654:	4b32      	ldr	r3, [pc, #200]	; (800a720 <__mdiff+0x124>)
 800a656:	0089      	lsls	r1, r1, #2
 800a658:	e7e3      	b.n	800a622 <__mdiff+0x26>
 800a65a:	9b01      	ldr	r3, [sp, #4]
 800a65c:	2700      	movs	r7, #0
 800a65e:	60c3      	str	r3, [r0, #12]
 800a660:	6920      	ldr	r0, [r4, #16]
 800a662:	3414      	adds	r4, #20
 800a664:	9401      	str	r4, [sp, #4]
 800a666:	9b01      	ldr	r3, [sp, #4]
 800a668:	0084      	lsls	r4, r0, #2
 800a66a:	191b      	adds	r3, r3, r4
 800a66c:	0034      	movs	r4, r6
 800a66e:	9302      	str	r3, [sp, #8]
 800a670:	6933      	ldr	r3, [r6, #16]
 800a672:	3414      	adds	r4, #20
 800a674:	0099      	lsls	r1, r3, #2
 800a676:	1863      	adds	r3, r4, r1
 800a678:	9303      	str	r3, [sp, #12]
 800a67a:	0013      	movs	r3, r2
 800a67c:	3314      	adds	r3, #20
 800a67e:	469c      	mov	ip, r3
 800a680:	9305      	str	r3, [sp, #20]
 800a682:	9b01      	ldr	r3, [sp, #4]
 800a684:	9304      	str	r3, [sp, #16]
 800a686:	9b04      	ldr	r3, [sp, #16]
 800a688:	cc02      	ldmia	r4!, {r1}
 800a68a:	cb20      	ldmia	r3!, {r5}
 800a68c:	9304      	str	r3, [sp, #16]
 800a68e:	b2ab      	uxth	r3, r5
 800a690:	19df      	adds	r7, r3, r7
 800a692:	b28b      	uxth	r3, r1
 800a694:	1afb      	subs	r3, r7, r3
 800a696:	0c09      	lsrs	r1, r1, #16
 800a698:	0c2d      	lsrs	r5, r5, #16
 800a69a:	1a6d      	subs	r5, r5, r1
 800a69c:	1419      	asrs	r1, r3, #16
 800a69e:	186d      	adds	r5, r5, r1
 800a6a0:	4661      	mov	r1, ip
 800a6a2:	142f      	asrs	r7, r5, #16
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	042d      	lsls	r5, r5, #16
 800a6a8:	432b      	orrs	r3, r5
 800a6aa:	c108      	stmia	r1!, {r3}
 800a6ac:	9b03      	ldr	r3, [sp, #12]
 800a6ae:	468c      	mov	ip, r1
 800a6b0:	42a3      	cmp	r3, r4
 800a6b2:	d8e8      	bhi.n	800a686 <__mdiff+0x8a>
 800a6b4:	0031      	movs	r1, r6
 800a6b6:	9c03      	ldr	r4, [sp, #12]
 800a6b8:	3115      	adds	r1, #21
 800a6ba:	2304      	movs	r3, #4
 800a6bc:	428c      	cmp	r4, r1
 800a6be:	d304      	bcc.n	800a6ca <__mdiff+0xce>
 800a6c0:	1ba3      	subs	r3, r4, r6
 800a6c2:	3b15      	subs	r3, #21
 800a6c4:	089b      	lsrs	r3, r3, #2
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	9901      	ldr	r1, [sp, #4]
 800a6cc:	18cc      	adds	r4, r1, r3
 800a6ce:	9905      	ldr	r1, [sp, #20]
 800a6d0:	0026      	movs	r6, r4
 800a6d2:	18cb      	adds	r3, r1, r3
 800a6d4:	469c      	mov	ip, r3
 800a6d6:	9902      	ldr	r1, [sp, #8]
 800a6d8:	428e      	cmp	r6, r1
 800a6da:	d310      	bcc.n	800a6fe <__mdiff+0x102>
 800a6dc:	9e02      	ldr	r6, [sp, #8]
 800a6de:	1ee1      	subs	r1, r4, #3
 800a6e0:	2500      	movs	r5, #0
 800a6e2:	428e      	cmp	r6, r1
 800a6e4:	d304      	bcc.n	800a6f0 <__mdiff+0xf4>
 800a6e6:	0031      	movs	r1, r6
 800a6e8:	3103      	adds	r1, #3
 800a6ea:	1b0c      	subs	r4, r1, r4
 800a6ec:	08a4      	lsrs	r4, r4, #2
 800a6ee:	00a5      	lsls	r5, r4, #2
 800a6f0:	195b      	adds	r3, r3, r5
 800a6f2:	3b04      	subs	r3, #4
 800a6f4:	6819      	ldr	r1, [r3, #0]
 800a6f6:	2900      	cmp	r1, #0
 800a6f8:	d00f      	beq.n	800a71a <__mdiff+0x11e>
 800a6fa:	6110      	str	r0, [r2, #16]
 800a6fc:	e797      	b.n	800a62e <__mdiff+0x32>
 800a6fe:	ce02      	ldmia	r6!, {r1}
 800a700:	b28d      	uxth	r5, r1
 800a702:	19ed      	adds	r5, r5, r7
 800a704:	0c0f      	lsrs	r7, r1, #16
 800a706:	1429      	asrs	r1, r5, #16
 800a708:	1879      	adds	r1, r7, r1
 800a70a:	140f      	asrs	r7, r1, #16
 800a70c:	b2ad      	uxth	r5, r5
 800a70e:	0409      	lsls	r1, r1, #16
 800a710:	430d      	orrs	r5, r1
 800a712:	4661      	mov	r1, ip
 800a714:	c120      	stmia	r1!, {r5}
 800a716:	468c      	mov	ip, r1
 800a718:	e7dd      	b.n	800a6d6 <__mdiff+0xda>
 800a71a:	3801      	subs	r0, #1
 800a71c:	e7e9      	b.n	800a6f2 <__mdiff+0xf6>
 800a71e:	46c0      	nop			; (mov r8, r8)
 800a720:	0800c610 	.word	0x0800c610
 800a724:	00000232 	.word	0x00000232
 800a728:	0800c69c 	.word	0x0800c69c

0800a72c <__ulp>:
 800a72c:	4b0f      	ldr	r3, [pc, #60]	; (800a76c <__ulp+0x40>)
 800a72e:	4019      	ands	r1, r3
 800a730:	4b0f      	ldr	r3, [pc, #60]	; (800a770 <__ulp+0x44>)
 800a732:	18c9      	adds	r1, r1, r3
 800a734:	2900      	cmp	r1, #0
 800a736:	dd04      	ble.n	800a742 <__ulp+0x16>
 800a738:	2200      	movs	r2, #0
 800a73a:	000b      	movs	r3, r1
 800a73c:	0010      	movs	r0, r2
 800a73e:	0019      	movs	r1, r3
 800a740:	4770      	bx	lr
 800a742:	4249      	negs	r1, r1
 800a744:	2200      	movs	r2, #0
 800a746:	2300      	movs	r3, #0
 800a748:	1509      	asrs	r1, r1, #20
 800a74a:	2913      	cmp	r1, #19
 800a74c:	dc04      	bgt.n	800a758 <__ulp+0x2c>
 800a74e:	2080      	movs	r0, #128	; 0x80
 800a750:	0300      	lsls	r0, r0, #12
 800a752:	4108      	asrs	r0, r1
 800a754:	0003      	movs	r3, r0
 800a756:	e7f1      	b.n	800a73c <__ulp+0x10>
 800a758:	3914      	subs	r1, #20
 800a75a:	2001      	movs	r0, #1
 800a75c:	291e      	cmp	r1, #30
 800a75e:	dc02      	bgt.n	800a766 <__ulp+0x3a>
 800a760:	2080      	movs	r0, #128	; 0x80
 800a762:	0600      	lsls	r0, r0, #24
 800a764:	40c8      	lsrs	r0, r1
 800a766:	0002      	movs	r2, r0
 800a768:	e7e8      	b.n	800a73c <__ulp+0x10>
 800a76a:	46c0      	nop			; (mov r8, r8)
 800a76c:	7ff00000 	.word	0x7ff00000
 800a770:	fcc00000 	.word	0xfcc00000

0800a774 <__b2d>:
 800a774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a776:	0006      	movs	r6, r0
 800a778:	6903      	ldr	r3, [r0, #16]
 800a77a:	3614      	adds	r6, #20
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	18f3      	adds	r3, r6, r3
 800a780:	1f1d      	subs	r5, r3, #4
 800a782:	682c      	ldr	r4, [r5, #0]
 800a784:	000f      	movs	r7, r1
 800a786:	0020      	movs	r0, r4
 800a788:	9301      	str	r3, [sp, #4]
 800a78a:	f7ff fd43 	bl	800a214 <__hi0bits>
 800a78e:	2320      	movs	r3, #32
 800a790:	1a1b      	subs	r3, r3, r0
 800a792:	491f      	ldr	r1, [pc, #124]	; (800a810 <__b2d+0x9c>)
 800a794:	603b      	str	r3, [r7, #0]
 800a796:	280a      	cmp	r0, #10
 800a798:	dc16      	bgt.n	800a7c8 <__b2d+0x54>
 800a79a:	230b      	movs	r3, #11
 800a79c:	0027      	movs	r7, r4
 800a79e:	1a1b      	subs	r3, r3, r0
 800a7a0:	40df      	lsrs	r7, r3
 800a7a2:	4339      	orrs	r1, r7
 800a7a4:	469c      	mov	ip, r3
 800a7a6:	000b      	movs	r3, r1
 800a7a8:	2100      	movs	r1, #0
 800a7aa:	42ae      	cmp	r6, r5
 800a7ac:	d202      	bcs.n	800a7b4 <__b2d+0x40>
 800a7ae:	9901      	ldr	r1, [sp, #4]
 800a7b0:	3908      	subs	r1, #8
 800a7b2:	6809      	ldr	r1, [r1, #0]
 800a7b4:	3015      	adds	r0, #21
 800a7b6:	4084      	lsls	r4, r0
 800a7b8:	4660      	mov	r0, ip
 800a7ba:	40c1      	lsrs	r1, r0
 800a7bc:	430c      	orrs	r4, r1
 800a7be:	0022      	movs	r2, r4
 800a7c0:	0010      	movs	r0, r2
 800a7c2:	0019      	movs	r1, r3
 800a7c4:	b003      	add	sp, #12
 800a7c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7c8:	2700      	movs	r7, #0
 800a7ca:	42ae      	cmp	r6, r5
 800a7cc:	d202      	bcs.n	800a7d4 <__b2d+0x60>
 800a7ce:	9d01      	ldr	r5, [sp, #4]
 800a7d0:	3d08      	subs	r5, #8
 800a7d2:	682f      	ldr	r7, [r5, #0]
 800a7d4:	230b      	movs	r3, #11
 800a7d6:	425b      	negs	r3, r3
 800a7d8:	469c      	mov	ip, r3
 800a7da:	4484      	add	ip, r0
 800a7dc:	280b      	cmp	r0, #11
 800a7de:	d013      	beq.n	800a808 <__b2d+0x94>
 800a7e0:	4663      	mov	r3, ip
 800a7e2:	2020      	movs	r0, #32
 800a7e4:	409c      	lsls	r4, r3
 800a7e6:	1ac0      	subs	r0, r0, r3
 800a7e8:	003b      	movs	r3, r7
 800a7ea:	40c3      	lsrs	r3, r0
 800a7ec:	431c      	orrs	r4, r3
 800a7ee:	4321      	orrs	r1, r4
 800a7f0:	000b      	movs	r3, r1
 800a7f2:	2100      	movs	r1, #0
 800a7f4:	42b5      	cmp	r5, r6
 800a7f6:	d901      	bls.n	800a7fc <__b2d+0x88>
 800a7f8:	3d04      	subs	r5, #4
 800a7fa:	6829      	ldr	r1, [r5, #0]
 800a7fc:	4664      	mov	r4, ip
 800a7fe:	40c1      	lsrs	r1, r0
 800a800:	40a7      	lsls	r7, r4
 800a802:	430f      	orrs	r7, r1
 800a804:	003a      	movs	r2, r7
 800a806:	e7db      	b.n	800a7c0 <__b2d+0x4c>
 800a808:	4321      	orrs	r1, r4
 800a80a:	000b      	movs	r3, r1
 800a80c:	e7fa      	b.n	800a804 <__b2d+0x90>
 800a80e:	46c0      	nop			; (mov r8, r8)
 800a810:	3ff00000 	.word	0x3ff00000

0800a814 <__d2b>:
 800a814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a816:	2101      	movs	r1, #1
 800a818:	0014      	movs	r4, r2
 800a81a:	001e      	movs	r6, r3
 800a81c:	9f08      	ldr	r7, [sp, #32]
 800a81e:	f7ff fc01 	bl	800a024 <_Balloc>
 800a822:	1e05      	subs	r5, r0, #0
 800a824:	d105      	bne.n	800a832 <__d2b+0x1e>
 800a826:	0002      	movs	r2, r0
 800a828:	4b26      	ldr	r3, [pc, #152]	; (800a8c4 <__d2b+0xb0>)
 800a82a:	4927      	ldr	r1, [pc, #156]	; (800a8c8 <__d2b+0xb4>)
 800a82c:	4827      	ldr	r0, [pc, #156]	; (800a8cc <__d2b+0xb8>)
 800a82e:	f000 ffc3 	bl	800b7b8 <__assert_func>
 800a832:	0333      	lsls	r3, r6, #12
 800a834:	0076      	lsls	r6, r6, #1
 800a836:	0b1b      	lsrs	r3, r3, #12
 800a838:	0d76      	lsrs	r6, r6, #21
 800a83a:	d124      	bne.n	800a886 <__d2b+0x72>
 800a83c:	9301      	str	r3, [sp, #4]
 800a83e:	2c00      	cmp	r4, #0
 800a840:	d027      	beq.n	800a892 <__d2b+0x7e>
 800a842:	4668      	mov	r0, sp
 800a844:	9400      	str	r4, [sp, #0]
 800a846:	f7ff fcff 	bl	800a248 <__lo0bits>
 800a84a:	9c00      	ldr	r4, [sp, #0]
 800a84c:	2800      	cmp	r0, #0
 800a84e:	d01e      	beq.n	800a88e <__d2b+0x7a>
 800a850:	9b01      	ldr	r3, [sp, #4]
 800a852:	2120      	movs	r1, #32
 800a854:	001a      	movs	r2, r3
 800a856:	1a09      	subs	r1, r1, r0
 800a858:	408a      	lsls	r2, r1
 800a85a:	40c3      	lsrs	r3, r0
 800a85c:	4322      	orrs	r2, r4
 800a85e:	616a      	str	r2, [r5, #20]
 800a860:	9301      	str	r3, [sp, #4]
 800a862:	9c01      	ldr	r4, [sp, #4]
 800a864:	61ac      	str	r4, [r5, #24]
 800a866:	1e63      	subs	r3, r4, #1
 800a868:	419c      	sbcs	r4, r3
 800a86a:	3401      	adds	r4, #1
 800a86c:	612c      	str	r4, [r5, #16]
 800a86e:	2e00      	cmp	r6, #0
 800a870:	d018      	beq.n	800a8a4 <__d2b+0x90>
 800a872:	4b17      	ldr	r3, [pc, #92]	; (800a8d0 <__d2b+0xbc>)
 800a874:	18f6      	adds	r6, r6, r3
 800a876:	2335      	movs	r3, #53	; 0x35
 800a878:	1836      	adds	r6, r6, r0
 800a87a:	1a18      	subs	r0, r3, r0
 800a87c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a87e:	603e      	str	r6, [r7, #0]
 800a880:	6018      	str	r0, [r3, #0]
 800a882:	0028      	movs	r0, r5
 800a884:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a886:	2280      	movs	r2, #128	; 0x80
 800a888:	0352      	lsls	r2, r2, #13
 800a88a:	4313      	orrs	r3, r2
 800a88c:	e7d6      	b.n	800a83c <__d2b+0x28>
 800a88e:	616c      	str	r4, [r5, #20]
 800a890:	e7e7      	b.n	800a862 <__d2b+0x4e>
 800a892:	a801      	add	r0, sp, #4
 800a894:	f7ff fcd8 	bl	800a248 <__lo0bits>
 800a898:	2401      	movs	r4, #1
 800a89a:	9b01      	ldr	r3, [sp, #4]
 800a89c:	612c      	str	r4, [r5, #16]
 800a89e:	616b      	str	r3, [r5, #20]
 800a8a0:	3020      	adds	r0, #32
 800a8a2:	e7e4      	b.n	800a86e <__d2b+0x5a>
 800a8a4:	4b0b      	ldr	r3, [pc, #44]	; (800a8d4 <__d2b+0xc0>)
 800a8a6:	18c0      	adds	r0, r0, r3
 800a8a8:	4b0b      	ldr	r3, [pc, #44]	; (800a8d8 <__d2b+0xc4>)
 800a8aa:	6038      	str	r0, [r7, #0]
 800a8ac:	18e3      	adds	r3, r4, r3
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	18eb      	adds	r3, r5, r3
 800a8b2:	6958      	ldr	r0, [r3, #20]
 800a8b4:	f7ff fcae 	bl	800a214 <__hi0bits>
 800a8b8:	0164      	lsls	r4, r4, #5
 800a8ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8bc:	1a24      	subs	r4, r4, r0
 800a8be:	601c      	str	r4, [r3, #0]
 800a8c0:	e7df      	b.n	800a882 <__d2b+0x6e>
 800a8c2:	46c0      	nop			; (mov r8, r8)
 800a8c4:	0800c610 	.word	0x0800c610
 800a8c8:	0000030a 	.word	0x0000030a
 800a8cc:	0800c69c 	.word	0x0800c69c
 800a8d0:	fffffbcd 	.word	0xfffffbcd
 800a8d4:	fffffbce 	.word	0xfffffbce
 800a8d8:	3fffffff 	.word	0x3fffffff

0800a8dc <__ratio>:
 800a8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8de:	b087      	sub	sp, #28
 800a8e0:	000f      	movs	r7, r1
 800a8e2:	a904      	add	r1, sp, #16
 800a8e4:	0006      	movs	r6, r0
 800a8e6:	f7ff ff45 	bl	800a774 <__b2d>
 800a8ea:	9000      	str	r0, [sp, #0]
 800a8ec:	9101      	str	r1, [sp, #4]
 800a8ee:	9c00      	ldr	r4, [sp, #0]
 800a8f0:	9d01      	ldr	r5, [sp, #4]
 800a8f2:	0038      	movs	r0, r7
 800a8f4:	a905      	add	r1, sp, #20
 800a8f6:	f7ff ff3d 	bl	800a774 <__b2d>
 800a8fa:	9002      	str	r0, [sp, #8]
 800a8fc:	9103      	str	r1, [sp, #12]
 800a8fe:	9a02      	ldr	r2, [sp, #8]
 800a900:	9b03      	ldr	r3, [sp, #12]
 800a902:	6931      	ldr	r1, [r6, #16]
 800a904:	6938      	ldr	r0, [r7, #16]
 800a906:	9e05      	ldr	r6, [sp, #20]
 800a908:	1a08      	subs	r0, r1, r0
 800a90a:	9904      	ldr	r1, [sp, #16]
 800a90c:	0140      	lsls	r0, r0, #5
 800a90e:	1b89      	subs	r1, r1, r6
 800a910:	1841      	adds	r1, r0, r1
 800a912:	0508      	lsls	r0, r1, #20
 800a914:	2900      	cmp	r1, #0
 800a916:	dd07      	ble.n	800a928 <__ratio+0x4c>
 800a918:	9901      	ldr	r1, [sp, #4]
 800a91a:	1845      	adds	r5, r0, r1
 800a91c:	0020      	movs	r0, r4
 800a91e:	0029      	movs	r1, r5
 800a920:	f7f6 fc44 	bl	80011ac <__aeabi_ddiv>
 800a924:	b007      	add	sp, #28
 800a926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a928:	9903      	ldr	r1, [sp, #12]
 800a92a:	1a0b      	subs	r3, r1, r0
 800a92c:	e7f6      	b.n	800a91c <__ratio+0x40>

0800a92e <__copybits>:
 800a92e:	b570      	push	{r4, r5, r6, lr}
 800a930:	0014      	movs	r4, r2
 800a932:	0005      	movs	r5, r0
 800a934:	3901      	subs	r1, #1
 800a936:	6913      	ldr	r3, [r2, #16]
 800a938:	1149      	asrs	r1, r1, #5
 800a93a:	3101      	adds	r1, #1
 800a93c:	0089      	lsls	r1, r1, #2
 800a93e:	3414      	adds	r4, #20
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	1841      	adds	r1, r0, r1
 800a944:	18e3      	adds	r3, r4, r3
 800a946:	42a3      	cmp	r3, r4
 800a948:	d80d      	bhi.n	800a966 <__copybits+0x38>
 800a94a:	0014      	movs	r4, r2
 800a94c:	3411      	adds	r4, #17
 800a94e:	2500      	movs	r5, #0
 800a950:	429c      	cmp	r4, r3
 800a952:	d803      	bhi.n	800a95c <__copybits+0x2e>
 800a954:	1a9b      	subs	r3, r3, r2
 800a956:	3b11      	subs	r3, #17
 800a958:	089b      	lsrs	r3, r3, #2
 800a95a:	009d      	lsls	r5, r3, #2
 800a95c:	2300      	movs	r3, #0
 800a95e:	1940      	adds	r0, r0, r5
 800a960:	4281      	cmp	r1, r0
 800a962:	d803      	bhi.n	800a96c <__copybits+0x3e>
 800a964:	bd70      	pop	{r4, r5, r6, pc}
 800a966:	cc40      	ldmia	r4!, {r6}
 800a968:	c540      	stmia	r5!, {r6}
 800a96a:	e7ec      	b.n	800a946 <__copybits+0x18>
 800a96c:	c008      	stmia	r0!, {r3}
 800a96e:	e7f7      	b.n	800a960 <__copybits+0x32>

0800a970 <__any_on>:
 800a970:	0002      	movs	r2, r0
 800a972:	6900      	ldr	r0, [r0, #16]
 800a974:	b510      	push	{r4, lr}
 800a976:	3214      	adds	r2, #20
 800a978:	114b      	asrs	r3, r1, #5
 800a97a:	4298      	cmp	r0, r3
 800a97c:	db13      	blt.n	800a9a6 <__any_on+0x36>
 800a97e:	dd0c      	ble.n	800a99a <__any_on+0x2a>
 800a980:	241f      	movs	r4, #31
 800a982:	0008      	movs	r0, r1
 800a984:	4020      	ands	r0, r4
 800a986:	4221      	tst	r1, r4
 800a988:	d007      	beq.n	800a99a <__any_on+0x2a>
 800a98a:	0099      	lsls	r1, r3, #2
 800a98c:	588c      	ldr	r4, [r1, r2]
 800a98e:	0021      	movs	r1, r4
 800a990:	40c1      	lsrs	r1, r0
 800a992:	4081      	lsls	r1, r0
 800a994:	2001      	movs	r0, #1
 800a996:	428c      	cmp	r4, r1
 800a998:	d104      	bne.n	800a9a4 <__any_on+0x34>
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	18d3      	adds	r3, r2, r3
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d803      	bhi.n	800a9aa <__any_on+0x3a>
 800a9a2:	2000      	movs	r0, #0
 800a9a4:	bd10      	pop	{r4, pc}
 800a9a6:	0003      	movs	r3, r0
 800a9a8:	e7f7      	b.n	800a99a <__any_on+0x2a>
 800a9aa:	3b04      	subs	r3, #4
 800a9ac:	6819      	ldr	r1, [r3, #0]
 800a9ae:	2900      	cmp	r1, #0
 800a9b0:	d0f5      	beq.n	800a99e <__any_on+0x2e>
 800a9b2:	2001      	movs	r0, #1
 800a9b4:	e7f6      	b.n	800a9a4 <__any_on+0x34>

0800a9b6 <_calloc_r>:
 800a9b6:	b570      	push	{r4, r5, r6, lr}
 800a9b8:	0c13      	lsrs	r3, r2, #16
 800a9ba:	0c0d      	lsrs	r5, r1, #16
 800a9bc:	d11e      	bne.n	800a9fc <_calloc_r+0x46>
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d10c      	bne.n	800a9dc <_calloc_r+0x26>
 800a9c2:	b289      	uxth	r1, r1
 800a9c4:	b294      	uxth	r4, r2
 800a9c6:	434c      	muls	r4, r1
 800a9c8:	0021      	movs	r1, r4
 800a9ca:	f000 f88d 	bl	800aae8 <_malloc_r>
 800a9ce:	1e05      	subs	r5, r0, #0
 800a9d0:	d01b      	beq.n	800aa0a <_calloc_r+0x54>
 800a9d2:	0022      	movs	r2, r4
 800a9d4:	2100      	movs	r1, #0
 800a9d6:	f7fc fabf 	bl	8006f58 <memset>
 800a9da:	e016      	b.n	800aa0a <_calloc_r+0x54>
 800a9dc:	1c1d      	adds	r5, r3, #0
 800a9de:	1c0b      	adds	r3, r1, #0
 800a9e0:	b292      	uxth	r2, r2
 800a9e2:	b289      	uxth	r1, r1
 800a9e4:	b29c      	uxth	r4, r3
 800a9e6:	4351      	muls	r1, r2
 800a9e8:	b2ab      	uxth	r3, r5
 800a9ea:	4363      	muls	r3, r4
 800a9ec:	0c0c      	lsrs	r4, r1, #16
 800a9ee:	191c      	adds	r4, r3, r4
 800a9f0:	0c22      	lsrs	r2, r4, #16
 800a9f2:	d107      	bne.n	800aa04 <_calloc_r+0x4e>
 800a9f4:	0424      	lsls	r4, r4, #16
 800a9f6:	b289      	uxth	r1, r1
 800a9f8:	430c      	orrs	r4, r1
 800a9fa:	e7e5      	b.n	800a9c8 <_calloc_r+0x12>
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d101      	bne.n	800aa04 <_calloc_r+0x4e>
 800aa00:	1c13      	adds	r3, r2, #0
 800aa02:	e7ed      	b.n	800a9e0 <_calloc_r+0x2a>
 800aa04:	230c      	movs	r3, #12
 800aa06:	2500      	movs	r5, #0
 800aa08:	6003      	str	r3, [r0, #0]
 800aa0a:	0028      	movs	r0, r5
 800aa0c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aa10 <_free_r>:
 800aa10:	b570      	push	{r4, r5, r6, lr}
 800aa12:	0005      	movs	r5, r0
 800aa14:	2900      	cmp	r1, #0
 800aa16:	d010      	beq.n	800aa3a <_free_r+0x2a>
 800aa18:	1f0c      	subs	r4, r1, #4
 800aa1a:	6823      	ldr	r3, [r4, #0]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	da00      	bge.n	800aa22 <_free_r+0x12>
 800aa20:	18e4      	adds	r4, r4, r3
 800aa22:	0028      	movs	r0, r5
 800aa24:	f001 f8da 	bl	800bbdc <__malloc_lock>
 800aa28:	4a1d      	ldr	r2, [pc, #116]	; (800aaa0 <_free_r+0x90>)
 800aa2a:	6813      	ldr	r3, [r2, #0]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d105      	bne.n	800aa3c <_free_r+0x2c>
 800aa30:	6063      	str	r3, [r4, #4]
 800aa32:	6014      	str	r4, [r2, #0]
 800aa34:	0028      	movs	r0, r5
 800aa36:	f001 f8d9 	bl	800bbec <__malloc_unlock>
 800aa3a:	bd70      	pop	{r4, r5, r6, pc}
 800aa3c:	42a3      	cmp	r3, r4
 800aa3e:	d908      	bls.n	800aa52 <_free_r+0x42>
 800aa40:	6821      	ldr	r1, [r4, #0]
 800aa42:	1860      	adds	r0, r4, r1
 800aa44:	4283      	cmp	r3, r0
 800aa46:	d1f3      	bne.n	800aa30 <_free_r+0x20>
 800aa48:	6818      	ldr	r0, [r3, #0]
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	1841      	adds	r1, r0, r1
 800aa4e:	6021      	str	r1, [r4, #0]
 800aa50:	e7ee      	b.n	800aa30 <_free_r+0x20>
 800aa52:	001a      	movs	r2, r3
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d001      	beq.n	800aa5e <_free_r+0x4e>
 800aa5a:	42a3      	cmp	r3, r4
 800aa5c:	d9f9      	bls.n	800aa52 <_free_r+0x42>
 800aa5e:	6811      	ldr	r1, [r2, #0]
 800aa60:	1850      	adds	r0, r2, r1
 800aa62:	42a0      	cmp	r0, r4
 800aa64:	d10b      	bne.n	800aa7e <_free_r+0x6e>
 800aa66:	6820      	ldr	r0, [r4, #0]
 800aa68:	1809      	adds	r1, r1, r0
 800aa6a:	1850      	adds	r0, r2, r1
 800aa6c:	6011      	str	r1, [r2, #0]
 800aa6e:	4283      	cmp	r3, r0
 800aa70:	d1e0      	bne.n	800aa34 <_free_r+0x24>
 800aa72:	6818      	ldr	r0, [r3, #0]
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	1841      	adds	r1, r0, r1
 800aa78:	6011      	str	r1, [r2, #0]
 800aa7a:	6053      	str	r3, [r2, #4]
 800aa7c:	e7da      	b.n	800aa34 <_free_r+0x24>
 800aa7e:	42a0      	cmp	r0, r4
 800aa80:	d902      	bls.n	800aa88 <_free_r+0x78>
 800aa82:	230c      	movs	r3, #12
 800aa84:	602b      	str	r3, [r5, #0]
 800aa86:	e7d5      	b.n	800aa34 <_free_r+0x24>
 800aa88:	6821      	ldr	r1, [r4, #0]
 800aa8a:	1860      	adds	r0, r4, r1
 800aa8c:	4283      	cmp	r3, r0
 800aa8e:	d103      	bne.n	800aa98 <_free_r+0x88>
 800aa90:	6818      	ldr	r0, [r3, #0]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	1841      	adds	r1, r0, r1
 800aa96:	6021      	str	r1, [r4, #0]
 800aa98:	6063      	str	r3, [r4, #4]
 800aa9a:	6054      	str	r4, [r2, #4]
 800aa9c:	e7ca      	b.n	800aa34 <_free_r+0x24>
 800aa9e:	46c0      	nop			; (mov r8, r8)
 800aaa0:	20000420 	.word	0x20000420

0800aaa4 <sbrk_aligned>:
 800aaa4:	b570      	push	{r4, r5, r6, lr}
 800aaa6:	4e0f      	ldr	r6, [pc, #60]	; (800aae4 <sbrk_aligned+0x40>)
 800aaa8:	000d      	movs	r5, r1
 800aaaa:	6831      	ldr	r1, [r6, #0]
 800aaac:	0004      	movs	r4, r0
 800aaae:	2900      	cmp	r1, #0
 800aab0:	d102      	bne.n	800aab8 <sbrk_aligned+0x14>
 800aab2:	f000 fd47 	bl	800b544 <_sbrk_r>
 800aab6:	6030      	str	r0, [r6, #0]
 800aab8:	0029      	movs	r1, r5
 800aaba:	0020      	movs	r0, r4
 800aabc:	f000 fd42 	bl	800b544 <_sbrk_r>
 800aac0:	1c43      	adds	r3, r0, #1
 800aac2:	d00a      	beq.n	800aada <sbrk_aligned+0x36>
 800aac4:	2303      	movs	r3, #3
 800aac6:	1cc5      	adds	r5, r0, #3
 800aac8:	439d      	bics	r5, r3
 800aaca:	42a8      	cmp	r0, r5
 800aacc:	d007      	beq.n	800aade <sbrk_aligned+0x3a>
 800aace:	1a29      	subs	r1, r5, r0
 800aad0:	0020      	movs	r0, r4
 800aad2:	f000 fd37 	bl	800b544 <_sbrk_r>
 800aad6:	1c43      	adds	r3, r0, #1
 800aad8:	d101      	bne.n	800aade <sbrk_aligned+0x3a>
 800aada:	2501      	movs	r5, #1
 800aadc:	426d      	negs	r5, r5
 800aade:	0028      	movs	r0, r5
 800aae0:	bd70      	pop	{r4, r5, r6, pc}
 800aae2:	46c0      	nop			; (mov r8, r8)
 800aae4:	20000424 	.word	0x20000424

0800aae8 <_malloc_r>:
 800aae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aaea:	2203      	movs	r2, #3
 800aaec:	1ccb      	adds	r3, r1, #3
 800aaee:	4393      	bics	r3, r2
 800aaf0:	3308      	adds	r3, #8
 800aaf2:	0006      	movs	r6, r0
 800aaf4:	001f      	movs	r7, r3
 800aaf6:	2b0c      	cmp	r3, #12
 800aaf8:	d232      	bcs.n	800ab60 <_malloc_r+0x78>
 800aafa:	270c      	movs	r7, #12
 800aafc:	42b9      	cmp	r1, r7
 800aafe:	d831      	bhi.n	800ab64 <_malloc_r+0x7c>
 800ab00:	0030      	movs	r0, r6
 800ab02:	f001 f86b 	bl	800bbdc <__malloc_lock>
 800ab06:	4d32      	ldr	r5, [pc, #200]	; (800abd0 <_malloc_r+0xe8>)
 800ab08:	682b      	ldr	r3, [r5, #0]
 800ab0a:	001c      	movs	r4, r3
 800ab0c:	2c00      	cmp	r4, #0
 800ab0e:	d12e      	bne.n	800ab6e <_malloc_r+0x86>
 800ab10:	0039      	movs	r1, r7
 800ab12:	0030      	movs	r0, r6
 800ab14:	f7ff ffc6 	bl	800aaa4 <sbrk_aligned>
 800ab18:	0004      	movs	r4, r0
 800ab1a:	1c43      	adds	r3, r0, #1
 800ab1c:	d11e      	bne.n	800ab5c <_malloc_r+0x74>
 800ab1e:	682c      	ldr	r4, [r5, #0]
 800ab20:	0025      	movs	r5, r4
 800ab22:	2d00      	cmp	r5, #0
 800ab24:	d14a      	bne.n	800abbc <_malloc_r+0xd4>
 800ab26:	6823      	ldr	r3, [r4, #0]
 800ab28:	0029      	movs	r1, r5
 800ab2a:	18e3      	adds	r3, r4, r3
 800ab2c:	0030      	movs	r0, r6
 800ab2e:	9301      	str	r3, [sp, #4]
 800ab30:	f000 fd08 	bl	800b544 <_sbrk_r>
 800ab34:	9b01      	ldr	r3, [sp, #4]
 800ab36:	4283      	cmp	r3, r0
 800ab38:	d143      	bne.n	800abc2 <_malloc_r+0xda>
 800ab3a:	6823      	ldr	r3, [r4, #0]
 800ab3c:	3703      	adds	r7, #3
 800ab3e:	1aff      	subs	r7, r7, r3
 800ab40:	2303      	movs	r3, #3
 800ab42:	439f      	bics	r7, r3
 800ab44:	3708      	adds	r7, #8
 800ab46:	2f0c      	cmp	r7, #12
 800ab48:	d200      	bcs.n	800ab4c <_malloc_r+0x64>
 800ab4a:	270c      	movs	r7, #12
 800ab4c:	0039      	movs	r1, r7
 800ab4e:	0030      	movs	r0, r6
 800ab50:	f7ff ffa8 	bl	800aaa4 <sbrk_aligned>
 800ab54:	1c43      	adds	r3, r0, #1
 800ab56:	d034      	beq.n	800abc2 <_malloc_r+0xda>
 800ab58:	6823      	ldr	r3, [r4, #0]
 800ab5a:	19df      	adds	r7, r3, r7
 800ab5c:	6027      	str	r7, [r4, #0]
 800ab5e:	e013      	b.n	800ab88 <_malloc_r+0xa0>
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	dacb      	bge.n	800aafc <_malloc_r+0x14>
 800ab64:	230c      	movs	r3, #12
 800ab66:	2500      	movs	r5, #0
 800ab68:	6033      	str	r3, [r6, #0]
 800ab6a:	0028      	movs	r0, r5
 800ab6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ab6e:	6822      	ldr	r2, [r4, #0]
 800ab70:	1bd1      	subs	r1, r2, r7
 800ab72:	d420      	bmi.n	800abb6 <_malloc_r+0xce>
 800ab74:	290b      	cmp	r1, #11
 800ab76:	d917      	bls.n	800aba8 <_malloc_r+0xc0>
 800ab78:	19e2      	adds	r2, r4, r7
 800ab7a:	6027      	str	r7, [r4, #0]
 800ab7c:	42a3      	cmp	r3, r4
 800ab7e:	d111      	bne.n	800aba4 <_malloc_r+0xbc>
 800ab80:	602a      	str	r2, [r5, #0]
 800ab82:	6863      	ldr	r3, [r4, #4]
 800ab84:	6011      	str	r1, [r2, #0]
 800ab86:	6053      	str	r3, [r2, #4]
 800ab88:	0030      	movs	r0, r6
 800ab8a:	0025      	movs	r5, r4
 800ab8c:	f001 f82e 	bl	800bbec <__malloc_unlock>
 800ab90:	2207      	movs	r2, #7
 800ab92:	350b      	adds	r5, #11
 800ab94:	1d23      	adds	r3, r4, #4
 800ab96:	4395      	bics	r5, r2
 800ab98:	1aea      	subs	r2, r5, r3
 800ab9a:	429d      	cmp	r5, r3
 800ab9c:	d0e5      	beq.n	800ab6a <_malloc_r+0x82>
 800ab9e:	1b5b      	subs	r3, r3, r5
 800aba0:	50a3      	str	r3, [r4, r2]
 800aba2:	e7e2      	b.n	800ab6a <_malloc_r+0x82>
 800aba4:	605a      	str	r2, [r3, #4]
 800aba6:	e7ec      	b.n	800ab82 <_malloc_r+0x9a>
 800aba8:	6862      	ldr	r2, [r4, #4]
 800abaa:	42a3      	cmp	r3, r4
 800abac:	d101      	bne.n	800abb2 <_malloc_r+0xca>
 800abae:	602a      	str	r2, [r5, #0]
 800abb0:	e7ea      	b.n	800ab88 <_malloc_r+0xa0>
 800abb2:	605a      	str	r2, [r3, #4]
 800abb4:	e7e8      	b.n	800ab88 <_malloc_r+0xa0>
 800abb6:	0023      	movs	r3, r4
 800abb8:	6864      	ldr	r4, [r4, #4]
 800abba:	e7a7      	b.n	800ab0c <_malloc_r+0x24>
 800abbc:	002c      	movs	r4, r5
 800abbe:	686d      	ldr	r5, [r5, #4]
 800abc0:	e7af      	b.n	800ab22 <_malloc_r+0x3a>
 800abc2:	230c      	movs	r3, #12
 800abc4:	0030      	movs	r0, r6
 800abc6:	6033      	str	r3, [r6, #0]
 800abc8:	f001 f810 	bl	800bbec <__malloc_unlock>
 800abcc:	e7cd      	b.n	800ab6a <_malloc_r+0x82>
 800abce:	46c0      	nop			; (mov r8, r8)
 800abd0:	20000420 	.word	0x20000420

0800abd4 <__ssputs_r>:
 800abd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abd6:	688e      	ldr	r6, [r1, #8]
 800abd8:	b085      	sub	sp, #20
 800abda:	0007      	movs	r7, r0
 800abdc:	000c      	movs	r4, r1
 800abde:	9203      	str	r2, [sp, #12]
 800abe0:	9301      	str	r3, [sp, #4]
 800abe2:	429e      	cmp	r6, r3
 800abe4:	d83c      	bhi.n	800ac60 <__ssputs_r+0x8c>
 800abe6:	2390      	movs	r3, #144	; 0x90
 800abe8:	898a      	ldrh	r2, [r1, #12]
 800abea:	00db      	lsls	r3, r3, #3
 800abec:	421a      	tst	r2, r3
 800abee:	d034      	beq.n	800ac5a <__ssputs_r+0x86>
 800abf0:	6909      	ldr	r1, [r1, #16]
 800abf2:	6823      	ldr	r3, [r4, #0]
 800abf4:	6960      	ldr	r0, [r4, #20]
 800abf6:	1a5b      	subs	r3, r3, r1
 800abf8:	9302      	str	r3, [sp, #8]
 800abfa:	2303      	movs	r3, #3
 800abfc:	4343      	muls	r3, r0
 800abfe:	0fdd      	lsrs	r5, r3, #31
 800ac00:	18ed      	adds	r5, r5, r3
 800ac02:	9b01      	ldr	r3, [sp, #4]
 800ac04:	9802      	ldr	r0, [sp, #8]
 800ac06:	3301      	adds	r3, #1
 800ac08:	181b      	adds	r3, r3, r0
 800ac0a:	106d      	asrs	r5, r5, #1
 800ac0c:	42ab      	cmp	r3, r5
 800ac0e:	d900      	bls.n	800ac12 <__ssputs_r+0x3e>
 800ac10:	001d      	movs	r5, r3
 800ac12:	0553      	lsls	r3, r2, #21
 800ac14:	d532      	bpl.n	800ac7c <__ssputs_r+0xa8>
 800ac16:	0029      	movs	r1, r5
 800ac18:	0038      	movs	r0, r7
 800ac1a:	f7ff ff65 	bl	800aae8 <_malloc_r>
 800ac1e:	1e06      	subs	r6, r0, #0
 800ac20:	d109      	bne.n	800ac36 <__ssputs_r+0x62>
 800ac22:	230c      	movs	r3, #12
 800ac24:	603b      	str	r3, [r7, #0]
 800ac26:	2340      	movs	r3, #64	; 0x40
 800ac28:	2001      	movs	r0, #1
 800ac2a:	89a2      	ldrh	r2, [r4, #12]
 800ac2c:	4240      	negs	r0, r0
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	81a3      	strh	r3, [r4, #12]
 800ac32:	b005      	add	sp, #20
 800ac34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac36:	9a02      	ldr	r2, [sp, #8]
 800ac38:	6921      	ldr	r1, [r4, #16]
 800ac3a:	f7ff f9ea 	bl	800a012 <memcpy>
 800ac3e:	89a3      	ldrh	r3, [r4, #12]
 800ac40:	4a14      	ldr	r2, [pc, #80]	; (800ac94 <__ssputs_r+0xc0>)
 800ac42:	401a      	ands	r2, r3
 800ac44:	2380      	movs	r3, #128	; 0x80
 800ac46:	4313      	orrs	r3, r2
 800ac48:	81a3      	strh	r3, [r4, #12]
 800ac4a:	9b02      	ldr	r3, [sp, #8]
 800ac4c:	6126      	str	r6, [r4, #16]
 800ac4e:	18f6      	adds	r6, r6, r3
 800ac50:	6026      	str	r6, [r4, #0]
 800ac52:	6165      	str	r5, [r4, #20]
 800ac54:	9e01      	ldr	r6, [sp, #4]
 800ac56:	1aed      	subs	r5, r5, r3
 800ac58:	60a5      	str	r5, [r4, #8]
 800ac5a:	9b01      	ldr	r3, [sp, #4]
 800ac5c:	429e      	cmp	r6, r3
 800ac5e:	d900      	bls.n	800ac62 <__ssputs_r+0x8e>
 800ac60:	9e01      	ldr	r6, [sp, #4]
 800ac62:	0032      	movs	r2, r6
 800ac64:	9903      	ldr	r1, [sp, #12]
 800ac66:	6820      	ldr	r0, [r4, #0]
 800ac68:	f000 ffa5 	bl	800bbb6 <memmove>
 800ac6c:	68a3      	ldr	r3, [r4, #8]
 800ac6e:	2000      	movs	r0, #0
 800ac70:	1b9b      	subs	r3, r3, r6
 800ac72:	60a3      	str	r3, [r4, #8]
 800ac74:	6823      	ldr	r3, [r4, #0]
 800ac76:	199e      	adds	r6, r3, r6
 800ac78:	6026      	str	r6, [r4, #0]
 800ac7a:	e7da      	b.n	800ac32 <__ssputs_r+0x5e>
 800ac7c:	002a      	movs	r2, r5
 800ac7e:	0038      	movs	r0, r7
 800ac80:	f000 ffbc 	bl	800bbfc <_realloc_r>
 800ac84:	1e06      	subs	r6, r0, #0
 800ac86:	d1e0      	bne.n	800ac4a <__ssputs_r+0x76>
 800ac88:	0038      	movs	r0, r7
 800ac8a:	6921      	ldr	r1, [r4, #16]
 800ac8c:	f7ff fec0 	bl	800aa10 <_free_r>
 800ac90:	e7c7      	b.n	800ac22 <__ssputs_r+0x4e>
 800ac92:	46c0      	nop			; (mov r8, r8)
 800ac94:	fffffb7f 	.word	0xfffffb7f

0800ac98 <_svfiprintf_r>:
 800ac98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac9a:	b0a1      	sub	sp, #132	; 0x84
 800ac9c:	9003      	str	r0, [sp, #12]
 800ac9e:	001d      	movs	r5, r3
 800aca0:	898b      	ldrh	r3, [r1, #12]
 800aca2:	000f      	movs	r7, r1
 800aca4:	0016      	movs	r6, r2
 800aca6:	061b      	lsls	r3, r3, #24
 800aca8:	d511      	bpl.n	800acce <_svfiprintf_r+0x36>
 800acaa:	690b      	ldr	r3, [r1, #16]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d10e      	bne.n	800acce <_svfiprintf_r+0x36>
 800acb0:	2140      	movs	r1, #64	; 0x40
 800acb2:	f7ff ff19 	bl	800aae8 <_malloc_r>
 800acb6:	6038      	str	r0, [r7, #0]
 800acb8:	6138      	str	r0, [r7, #16]
 800acba:	2800      	cmp	r0, #0
 800acbc:	d105      	bne.n	800acca <_svfiprintf_r+0x32>
 800acbe:	230c      	movs	r3, #12
 800acc0:	9a03      	ldr	r2, [sp, #12]
 800acc2:	3801      	subs	r0, #1
 800acc4:	6013      	str	r3, [r2, #0]
 800acc6:	b021      	add	sp, #132	; 0x84
 800acc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acca:	2340      	movs	r3, #64	; 0x40
 800accc:	617b      	str	r3, [r7, #20]
 800acce:	2300      	movs	r3, #0
 800acd0:	ac08      	add	r4, sp, #32
 800acd2:	6163      	str	r3, [r4, #20]
 800acd4:	3320      	adds	r3, #32
 800acd6:	7663      	strb	r3, [r4, #25]
 800acd8:	3310      	adds	r3, #16
 800acda:	76a3      	strb	r3, [r4, #26]
 800acdc:	9507      	str	r5, [sp, #28]
 800acde:	0035      	movs	r5, r6
 800ace0:	782b      	ldrb	r3, [r5, #0]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d001      	beq.n	800acea <_svfiprintf_r+0x52>
 800ace6:	2b25      	cmp	r3, #37	; 0x25
 800ace8:	d147      	bne.n	800ad7a <_svfiprintf_r+0xe2>
 800acea:	1bab      	subs	r3, r5, r6
 800acec:	9305      	str	r3, [sp, #20]
 800acee:	42b5      	cmp	r5, r6
 800acf0:	d00c      	beq.n	800ad0c <_svfiprintf_r+0x74>
 800acf2:	0032      	movs	r2, r6
 800acf4:	0039      	movs	r1, r7
 800acf6:	9803      	ldr	r0, [sp, #12]
 800acf8:	f7ff ff6c 	bl	800abd4 <__ssputs_r>
 800acfc:	1c43      	adds	r3, r0, #1
 800acfe:	d100      	bne.n	800ad02 <_svfiprintf_r+0x6a>
 800ad00:	e0ae      	b.n	800ae60 <_svfiprintf_r+0x1c8>
 800ad02:	6962      	ldr	r2, [r4, #20]
 800ad04:	9b05      	ldr	r3, [sp, #20]
 800ad06:	4694      	mov	ip, r2
 800ad08:	4463      	add	r3, ip
 800ad0a:	6163      	str	r3, [r4, #20]
 800ad0c:	782b      	ldrb	r3, [r5, #0]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d100      	bne.n	800ad14 <_svfiprintf_r+0x7c>
 800ad12:	e0a5      	b.n	800ae60 <_svfiprintf_r+0x1c8>
 800ad14:	2201      	movs	r2, #1
 800ad16:	2300      	movs	r3, #0
 800ad18:	4252      	negs	r2, r2
 800ad1a:	6062      	str	r2, [r4, #4]
 800ad1c:	a904      	add	r1, sp, #16
 800ad1e:	3254      	adds	r2, #84	; 0x54
 800ad20:	1852      	adds	r2, r2, r1
 800ad22:	1c6e      	adds	r6, r5, #1
 800ad24:	6023      	str	r3, [r4, #0]
 800ad26:	60e3      	str	r3, [r4, #12]
 800ad28:	60a3      	str	r3, [r4, #8]
 800ad2a:	7013      	strb	r3, [r2, #0]
 800ad2c:	65a3      	str	r3, [r4, #88]	; 0x58
 800ad2e:	2205      	movs	r2, #5
 800ad30:	7831      	ldrb	r1, [r6, #0]
 800ad32:	4854      	ldr	r0, [pc, #336]	; (800ae84 <_svfiprintf_r+0x1ec>)
 800ad34:	f7ff f962 	bl	8009ffc <memchr>
 800ad38:	1c75      	adds	r5, r6, #1
 800ad3a:	2800      	cmp	r0, #0
 800ad3c:	d11f      	bne.n	800ad7e <_svfiprintf_r+0xe6>
 800ad3e:	6822      	ldr	r2, [r4, #0]
 800ad40:	06d3      	lsls	r3, r2, #27
 800ad42:	d504      	bpl.n	800ad4e <_svfiprintf_r+0xb6>
 800ad44:	2353      	movs	r3, #83	; 0x53
 800ad46:	a904      	add	r1, sp, #16
 800ad48:	185b      	adds	r3, r3, r1
 800ad4a:	2120      	movs	r1, #32
 800ad4c:	7019      	strb	r1, [r3, #0]
 800ad4e:	0713      	lsls	r3, r2, #28
 800ad50:	d504      	bpl.n	800ad5c <_svfiprintf_r+0xc4>
 800ad52:	2353      	movs	r3, #83	; 0x53
 800ad54:	a904      	add	r1, sp, #16
 800ad56:	185b      	adds	r3, r3, r1
 800ad58:	212b      	movs	r1, #43	; 0x2b
 800ad5a:	7019      	strb	r1, [r3, #0]
 800ad5c:	7833      	ldrb	r3, [r6, #0]
 800ad5e:	2b2a      	cmp	r3, #42	; 0x2a
 800ad60:	d016      	beq.n	800ad90 <_svfiprintf_r+0xf8>
 800ad62:	0035      	movs	r5, r6
 800ad64:	2100      	movs	r1, #0
 800ad66:	200a      	movs	r0, #10
 800ad68:	68e3      	ldr	r3, [r4, #12]
 800ad6a:	782a      	ldrb	r2, [r5, #0]
 800ad6c:	1c6e      	adds	r6, r5, #1
 800ad6e:	3a30      	subs	r2, #48	; 0x30
 800ad70:	2a09      	cmp	r2, #9
 800ad72:	d94e      	bls.n	800ae12 <_svfiprintf_r+0x17a>
 800ad74:	2900      	cmp	r1, #0
 800ad76:	d111      	bne.n	800ad9c <_svfiprintf_r+0x104>
 800ad78:	e017      	b.n	800adaa <_svfiprintf_r+0x112>
 800ad7a:	3501      	adds	r5, #1
 800ad7c:	e7b0      	b.n	800ace0 <_svfiprintf_r+0x48>
 800ad7e:	4b41      	ldr	r3, [pc, #260]	; (800ae84 <_svfiprintf_r+0x1ec>)
 800ad80:	6822      	ldr	r2, [r4, #0]
 800ad82:	1ac0      	subs	r0, r0, r3
 800ad84:	2301      	movs	r3, #1
 800ad86:	4083      	lsls	r3, r0
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	002e      	movs	r6, r5
 800ad8c:	6023      	str	r3, [r4, #0]
 800ad8e:	e7ce      	b.n	800ad2e <_svfiprintf_r+0x96>
 800ad90:	9b07      	ldr	r3, [sp, #28]
 800ad92:	1d19      	adds	r1, r3, #4
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	9107      	str	r1, [sp, #28]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	db01      	blt.n	800ada0 <_svfiprintf_r+0x108>
 800ad9c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad9e:	e004      	b.n	800adaa <_svfiprintf_r+0x112>
 800ada0:	425b      	negs	r3, r3
 800ada2:	60e3      	str	r3, [r4, #12]
 800ada4:	2302      	movs	r3, #2
 800ada6:	4313      	orrs	r3, r2
 800ada8:	6023      	str	r3, [r4, #0]
 800adaa:	782b      	ldrb	r3, [r5, #0]
 800adac:	2b2e      	cmp	r3, #46	; 0x2e
 800adae:	d10a      	bne.n	800adc6 <_svfiprintf_r+0x12e>
 800adb0:	786b      	ldrb	r3, [r5, #1]
 800adb2:	2b2a      	cmp	r3, #42	; 0x2a
 800adb4:	d135      	bne.n	800ae22 <_svfiprintf_r+0x18a>
 800adb6:	9b07      	ldr	r3, [sp, #28]
 800adb8:	3502      	adds	r5, #2
 800adba:	1d1a      	adds	r2, r3, #4
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	9207      	str	r2, [sp, #28]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	db2b      	blt.n	800ae1c <_svfiprintf_r+0x184>
 800adc4:	9309      	str	r3, [sp, #36]	; 0x24
 800adc6:	4e30      	ldr	r6, [pc, #192]	; (800ae88 <_svfiprintf_r+0x1f0>)
 800adc8:	2203      	movs	r2, #3
 800adca:	0030      	movs	r0, r6
 800adcc:	7829      	ldrb	r1, [r5, #0]
 800adce:	f7ff f915 	bl	8009ffc <memchr>
 800add2:	2800      	cmp	r0, #0
 800add4:	d006      	beq.n	800ade4 <_svfiprintf_r+0x14c>
 800add6:	2340      	movs	r3, #64	; 0x40
 800add8:	1b80      	subs	r0, r0, r6
 800adda:	4083      	lsls	r3, r0
 800addc:	6822      	ldr	r2, [r4, #0]
 800adde:	3501      	adds	r5, #1
 800ade0:	4313      	orrs	r3, r2
 800ade2:	6023      	str	r3, [r4, #0]
 800ade4:	7829      	ldrb	r1, [r5, #0]
 800ade6:	2206      	movs	r2, #6
 800ade8:	4828      	ldr	r0, [pc, #160]	; (800ae8c <_svfiprintf_r+0x1f4>)
 800adea:	1c6e      	adds	r6, r5, #1
 800adec:	7621      	strb	r1, [r4, #24]
 800adee:	f7ff f905 	bl	8009ffc <memchr>
 800adf2:	2800      	cmp	r0, #0
 800adf4:	d03c      	beq.n	800ae70 <_svfiprintf_r+0x1d8>
 800adf6:	4b26      	ldr	r3, [pc, #152]	; (800ae90 <_svfiprintf_r+0x1f8>)
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d125      	bne.n	800ae48 <_svfiprintf_r+0x1b0>
 800adfc:	2207      	movs	r2, #7
 800adfe:	9b07      	ldr	r3, [sp, #28]
 800ae00:	3307      	adds	r3, #7
 800ae02:	4393      	bics	r3, r2
 800ae04:	3308      	adds	r3, #8
 800ae06:	9307      	str	r3, [sp, #28]
 800ae08:	6963      	ldr	r3, [r4, #20]
 800ae0a:	9a04      	ldr	r2, [sp, #16]
 800ae0c:	189b      	adds	r3, r3, r2
 800ae0e:	6163      	str	r3, [r4, #20]
 800ae10:	e765      	b.n	800acde <_svfiprintf_r+0x46>
 800ae12:	4343      	muls	r3, r0
 800ae14:	0035      	movs	r5, r6
 800ae16:	2101      	movs	r1, #1
 800ae18:	189b      	adds	r3, r3, r2
 800ae1a:	e7a6      	b.n	800ad6a <_svfiprintf_r+0xd2>
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	425b      	negs	r3, r3
 800ae20:	e7d0      	b.n	800adc4 <_svfiprintf_r+0x12c>
 800ae22:	2300      	movs	r3, #0
 800ae24:	200a      	movs	r0, #10
 800ae26:	001a      	movs	r2, r3
 800ae28:	3501      	adds	r5, #1
 800ae2a:	6063      	str	r3, [r4, #4]
 800ae2c:	7829      	ldrb	r1, [r5, #0]
 800ae2e:	1c6e      	adds	r6, r5, #1
 800ae30:	3930      	subs	r1, #48	; 0x30
 800ae32:	2909      	cmp	r1, #9
 800ae34:	d903      	bls.n	800ae3e <_svfiprintf_r+0x1a6>
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d0c5      	beq.n	800adc6 <_svfiprintf_r+0x12e>
 800ae3a:	9209      	str	r2, [sp, #36]	; 0x24
 800ae3c:	e7c3      	b.n	800adc6 <_svfiprintf_r+0x12e>
 800ae3e:	4342      	muls	r2, r0
 800ae40:	0035      	movs	r5, r6
 800ae42:	2301      	movs	r3, #1
 800ae44:	1852      	adds	r2, r2, r1
 800ae46:	e7f1      	b.n	800ae2c <_svfiprintf_r+0x194>
 800ae48:	ab07      	add	r3, sp, #28
 800ae4a:	9300      	str	r3, [sp, #0]
 800ae4c:	003a      	movs	r2, r7
 800ae4e:	0021      	movs	r1, r4
 800ae50:	4b10      	ldr	r3, [pc, #64]	; (800ae94 <_svfiprintf_r+0x1fc>)
 800ae52:	9803      	ldr	r0, [sp, #12]
 800ae54:	f7fc f932 	bl	80070bc <_printf_float>
 800ae58:	9004      	str	r0, [sp, #16]
 800ae5a:	9b04      	ldr	r3, [sp, #16]
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	d1d3      	bne.n	800ae08 <_svfiprintf_r+0x170>
 800ae60:	89bb      	ldrh	r3, [r7, #12]
 800ae62:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ae64:	065b      	lsls	r3, r3, #25
 800ae66:	d400      	bmi.n	800ae6a <_svfiprintf_r+0x1d2>
 800ae68:	e72d      	b.n	800acc6 <_svfiprintf_r+0x2e>
 800ae6a:	2001      	movs	r0, #1
 800ae6c:	4240      	negs	r0, r0
 800ae6e:	e72a      	b.n	800acc6 <_svfiprintf_r+0x2e>
 800ae70:	ab07      	add	r3, sp, #28
 800ae72:	9300      	str	r3, [sp, #0]
 800ae74:	003a      	movs	r2, r7
 800ae76:	0021      	movs	r1, r4
 800ae78:	4b06      	ldr	r3, [pc, #24]	; (800ae94 <_svfiprintf_r+0x1fc>)
 800ae7a:	9803      	ldr	r0, [sp, #12]
 800ae7c:	f7fc fbd0 	bl	8007620 <_printf_i>
 800ae80:	e7ea      	b.n	800ae58 <_svfiprintf_r+0x1c0>
 800ae82:	46c0      	nop			; (mov r8, r8)
 800ae84:	0800c7f4 	.word	0x0800c7f4
 800ae88:	0800c7fa 	.word	0x0800c7fa
 800ae8c:	0800c7fe 	.word	0x0800c7fe
 800ae90:	080070bd 	.word	0x080070bd
 800ae94:	0800abd5 	.word	0x0800abd5

0800ae98 <_sungetc_r>:
 800ae98:	b570      	push	{r4, r5, r6, lr}
 800ae9a:	0014      	movs	r4, r2
 800ae9c:	1c4b      	adds	r3, r1, #1
 800ae9e:	d103      	bne.n	800aea8 <_sungetc_r+0x10>
 800aea0:	2501      	movs	r5, #1
 800aea2:	426d      	negs	r5, r5
 800aea4:	0028      	movs	r0, r5
 800aea6:	bd70      	pop	{r4, r5, r6, pc}
 800aea8:	8993      	ldrh	r3, [r2, #12]
 800aeaa:	2220      	movs	r2, #32
 800aeac:	4393      	bics	r3, r2
 800aeae:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800aeb0:	81a3      	strh	r3, [r4, #12]
 800aeb2:	b2ce      	uxtb	r6, r1
 800aeb4:	6863      	ldr	r3, [r4, #4]
 800aeb6:	b2cd      	uxtb	r5, r1
 800aeb8:	2a00      	cmp	r2, #0
 800aeba:	d010      	beq.n	800aede <_sungetc_r+0x46>
 800aebc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800aebe:	429a      	cmp	r2, r3
 800aec0:	dd07      	ble.n	800aed2 <_sungetc_r+0x3a>
 800aec2:	6823      	ldr	r3, [r4, #0]
 800aec4:	3b01      	subs	r3, #1
 800aec6:	6023      	str	r3, [r4, #0]
 800aec8:	701e      	strb	r6, [r3, #0]
 800aeca:	6863      	ldr	r3, [r4, #4]
 800aecc:	3301      	adds	r3, #1
 800aece:	6063      	str	r3, [r4, #4]
 800aed0:	e7e8      	b.n	800aea4 <_sungetc_r+0xc>
 800aed2:	0021      	movs	r1, r4
 800aed4:	f000 fc24 	bl	800b720 <__submore>
 800aed8:	2800      	cmp	r0, #0
 800aeda:	d0f2      	beq.n	800aec2 <_sungetc_r+0x2a>
 800aedc:	e7e0      	b.n	800aea0 <_sungetc_r+0x8>
 800aede:	6921      	ldr	r1, [r4, #16]
 800aee0:	6822      	ldr	r2, [r4, #0]
 800aee2:	2900      	cmp	r1, #0
 800aee4:	d007      	beq.n	800aef6 <_sungetc_r+0x5e>
 800aee6:	4291      	cmp	r1, r2
 800aee8:	d205      	bcs.n	800aef6 <_sungetc_r+0x5e>
 800aeea:	1e51      	subs	r1, r2, #1
 800aeec:	7808      	ldrb	r0, [r1, #0]
 800aeee:	42a8      	cmp	r0, r5
 800aef0:	d101      	bne.n	800aef6 <_sungetc_r+0x5e>
 800aef2:	6021      	str	r1, [r4, #0]
 800aef4:	e7ea      	b.n	800aecc <_sungetc_r+0x34>
 800aef6:	6423      	str	r3, [r4, #64]	; 0x40
 800aef8:	0023      	movs	r3, r4
 800aefa:	3344      	adds	r3, #68	; 0x44
 800aefc:	6363      	str	r3, [r4, #52]	; 0x34
 800aefe:	2303      	movs	r3, #3
 800af00:	63a3      	str	r3, [r4, #56]	; 0x38
 800af02:	0023      	movs	r3, r4
 800af04:	3346      	adds	r3, #70	; 0x46
 800af06:	63e2      	str	r2, [r4, #60]	; 0x3c
 800af08:	701e      	strb	r6, [r3, #0]
 800af0a:	6023      	str	r3, [r4, #0]
 800af0c:	2301      	movs	r3, #1
 800af0e:	e7de      	b.n	800aece <_sungetc_r+0x36>

0800af10 <__ssrefill_r>:
 800af10:	b510      	push	{r4, lr}
 800af12:	000c      	movs	r4, r1
 800af14:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800af16:	2900      	cmp	r1, #0
 800af18:	d00e      	beq.n	800af38 <__ssrefill_r+0x28>
 800af1a:	0023      	movs	r3, r4
 800af1c:	3344      	adds	r3, #68	; 0x44
 800af1e:	4299      	cmp	r1, r3
 800af20:	d001      	beq.n	800af26 <__ssrefill_r+0x16>
 800af22:	f7ff fd75 	bl	800aa10 <_free_r>
 800af26:	2000      	movs	r0, #0
 800af28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af2a:	6360      	str	r0, [r4, #52]	; 0x34
 800af2c:	6063      	str	r3, [r4, #4]
 800af2e:	4283      	cmp	r3, r0
 800af30:	d002      	beq.n	800af38 <__ssrefill_r+0x28>
 800af32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800af34:	6023      	str	r3, [r4, #0]
 800af36:	bd10      	pop	{r4, pc}
 800af38:	6923      	ldr	r3, [r4, #16]
 800af3a:	2001      	movs	r0, #1
 800af3c:	6023      	str	r3, [r4, #0]
 800af3e:	2300      	movs	r3, #0
 800af40:	89a2      	ldrh	r2, [r4, #12]
 800af42:	6063      	str	r3, [r4, #4]
 800af44:	3320      	adds	r3, #32
 800af46:	4313      	orrs	r3, r2
 800af48:	81a3      	strh	r3, [r4, #12]
 800af4a:	4240      	negs	r0, r0
 800af4c:	e7f3      	b.n	800af36 <__ssrefill_r+0x26>
	...

0800af50 <__ssvfiscanf_r>:
 800af50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af52:	4cb8      	ldr	r4, [pc, #736]	; (800b234 <__ssvfiscanf_r+0x2e4>)
 800af54:	0006      	movs	r6, r0
 800af56:	44a5      	add	sp, r4
 800af58:	000c      	movs	r4, r1
 800af5a:	2100      	movs	r1, #0
 800af5c:	9146      	str	r1, [sp, #280]	; 0x118
 800af5e:	9147      	str	r1, [sp, #284]	; 0x11c
 800af60:	a903      	add	r1, sp, #12
 800af62:	9148      	str	r1, [sp, #288]	; 0x120
 800af64:	21be      	movs	r1, #190	; 0xbe
 800af66:	48b4      	ldr	r0, [pc, #720]	; (800b238 <__ssvfiscanf_r+0x2e8>)
 800af68:	0049      	lsls	r1, r1, #1
 800af6a:	ad43      	add	r5, sp, #268	; 0x10c
 800af6c:	5068      	str	r0, [r5, r1]
 800af6e:	25c0      	movs	r5, #192	; 0xc0
 800af70:	49b2      	ldr	r1, [pc, #712]	; (800b23c <__ssvfiscanf_r+0x2ec>)
 800af72:	006d      	lsls	r5, r5, #1
 800af74:	a843      	add	r0, sp, #268	; 0x10c
 800af76:	5141      	str	r1, [r0, r5]
 800af78:	9302      	str	r3, [sp, #8]
 800af7a:	7813      	ldrb	r3, [r2, #0]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d100      	bne.n	800af82 <__ssvfiscanf_r+0x32>
 800af80:	e155      	b.n	800b22e <__ssvfiscanf_r+0x2de>
 800af82:	49af      	ldr	r1, [pc, #700]	; (800b240 <__ssvfiscanf_r+0x2f0>)
 800af84:	2508      	movs	r5, #8
 800af86:	5cc8      	ldrb	r0, [r1, r3]
 800af88:	2108      	movs	r1, #8
 800af8a:	1c57      	adds	r7, r2, #1
 800af8c:	4001      	ands	r1, r0
 800af8e:	4228      	tst	r0, r5
 800af90:	d020      	beq.n	800afd4 <__ssvfiscanf_r+0x84>
 800af92:	6863      	ldr	r3, [r4, #4]
 800af94:	2b00      	cmp	r3, #0
 800af96:	dd12      	ble.n	800afbe <__ssvfiscanf_r+0x6e>
 800af98:	6823      	ldr	r3, [r4, #0]
 800af9a:	49a9      	ldr	r1, [pc, #676]	; (800b240 <__ssvfiscanf_r+0x2f0>)
 800af9c:	781a      	ldrb	r2, [r3, #0]
 800af9e:	5c8a      	ldrb	r2, [r1, r2]
 800afa0:	2108      	movs	r1, #8
 800afa2:	420a      	tst	r2, r1
 800afa4:	d101      	bne.n	800afaa <__ssvfiscanf_r+0x5a>
 800afa6:	003a      	movs	r2, r7
 800afa8:	e7e7      	b.n	800af7a <__ssvfiscanf_r+0x2a>
 800afaa:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800afac:	3301      	adds	r3, #1
 800afae:	9200      	str	r2, [sp, #0]
 800afb0:	3201      	adds	r2, #1
 800afb2:	9247      	str	r2, [sp, #284]	; 0x11c
 800afb4:	6862      	ldr	r2, [r4, #4]
 800afb6:	6023      	str	r3, [r4, #0]
 800afb8:	3a01      	subs	r2, #1
 800afba:	6062      	str	r2, [r4, #4]
 800afbc:	e7e9      	b.n	800af92 <__ssvfiscanf_r+0x42>
 800afbe:	22c0      	movs	r2, #192	; 0xc0
 800afc0:	ab43      	add	r3, sp, #268	; 0x10c
 800afc2:	0052      	lsls	r2, r2, #1
 800afc4:	589b      	ldr	r3, [r3, r2]
 800afc6:	0021      	movs	r1, r4
 800afc8:	0030      	movs	r0, r6
 800afca:	9300      	str	r3, [sp, #0]
 800afcc:	4798      	blx	r3
 800afce:	2800      	cmp	r0, #0
 800afd0:	d0e2      	beq.n	800af98 <__ssvfiscanf_r+0x48>
 800afd2:	e7e8      	b.n	800afa6 <__ssvfiscanf_r+0x56>
 800afd4:	001d      	movs	r5, r3
 800afd6:	2b25      	cmp	r3, #37	; 0x25
 800afd8:	d164      	bne.n	800b0a4 <__ssvfiscanf_r+0x154>
 800afda:	9145      	str	r1, [sp, #276]	; 0x114
 800afdc:	9143      	str	r1, [sp, #268]	; 0x10c
 800afde:	7853      	ldrb	r3, [r2, #1]
 800afe0:	2b2a      	cmp	r3, #42	; 0x2a
 800afe2:	d102      	bne.n	800afea <__ssvfiscanf_r+0x9a>
 800afe4:	3b1a      	subs	r3, #26
 800afe6:	9343      	str	r3, [sp, #268]	; 0x10c
 800afe8:	1c97      	adds	r7, r2, #2
 800afea:	003d      	movs	r5, r7
 800afec:	220a      	movs	r2, #10
 800afee:	7829      	ldrb	r1, [r5, #0]
 800aff0:	1c6b      	adds	r3, r5, #1
 800aff2:	9300      	str	r3, [sp, #0]
 800aff4:	000b      	movs	r3, r1
 800aff6:	3b30      	subs	r3, #48	; 0x30
 800aff8:	2b09      	cmp	r3, #9
 800affa:	d91f      	bls.n	800b03c <__ssvfiscanf_r+0xec>
 800affc:	4f91      	ldr	r7, [pc, #580]	; (800b244 <__ssvfiscanf_r+0x2f4>)
 800affe:	2203      	movs	r2, #3
 800b000:	0038      	movs	r0, r7
 800b002:	f7fe fffb 	bl	8009ffc <memchr>
 800b006:	2800      	cmp	r0, #0
 800b008:	d007      	beq.n	800b01a <__ssvfiscanf_r+0xca>
 800b00a:	2301      	movs	r3, #1
 800b00c:	1bc0      	subs	r0, r0, r7
 800b00e:	4083      	lsls	r3, r0
 800b010:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800b012:	9d00      	ldr	r5, [sp, #0]
 800b014:	4313      	orrs	r3, r2
 800b016:	9201      	str	r2, [sp, #4]
 800b018:	9343      	str	r3, [sp, #268]	; 0x10c
 800b01a:	1c6f      	adds	r7, r5, #1
 800b01c:	782d      	ldrb	r5, [r5, #0]
 800b01e:	2d78      	cmp	r5, #120	; 0x78
 800b020:	d807      	bhi.n	800b032 <__ssvfiscanf_r+0xe2>
 800b022:	2d57      	cmp	r5, #87	; 0x57
 800b024:	d812      	bhi.n	800b04c <__ssvfiscanf_r+0xfc>
 800b026:	2d25      	cmp	r5, #37	; 0x25
 800b028:	d03c      	beq.n	800b0a4 <__ssvfiscanf_r+0x154>
 800b02a:	d836      	bhi.n	800b09a <__ssvfiscanf_r+0x14a>
 800b02c:	2d00      	cmp	r5, #0
 800b02e:	d100      	bne.n	800b032 <__ssvfiscanf_r+0xe2>
 800b030:	e0fa      	b.n	800b228 <__ssvfiscanf_r+0x2d8>
 800b032:	2303      	movs	r3, #3
 800b034:	9349      	str	r3, [sp, #292]	; 0x124
 800b036:	3307      	adds	r3, #7
 800b038:	9344      	str	r3, [sp, #272]	; 0x110
 800b03a:	e06d      	b.n	800b118 <__ssvfiscanf_r+0x1c8>
 800b03c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b03e:	9d00      	ldr	r5, [sp, #0]
 800b040:	9301      	str	r3, [sp, #4]
 800b042:	4353      	muls	r3, r2
 800b044:	3b30      	subs	r3, #48	; 0x30
 800b046:	185b      	adds	r3, r3, r1
 800b048:	9345      	str	r3, [sp, #276]	; 0x114
 800b04a:	e7d0      	b.n	800afee <__ssvfiscanf_r+0x9e>
 800b04c:	0028      	movs	r0, r5
 800b04e:	3858      	subs	r0, #88	; 0x58
 800b050:	2820      	cmp	r0, #32
 800b052:	d8ee      	bhi.n	800b032 <__ssvfiscanf_r+0xe2>
 800b054:	f7f5 f86a 	bl	800012c <__gnu_thumb1_case_shi>
 800b058:	ffed0051 	.word	0xffed0051
 800b05c:	0087ffed 	.word	0x0087ffed
 800b060:	ffedffed 	.word	0xffedffed
 800b064:	ffedffed 	.word	0xffedffed
 800b068:	ffedffed 	.word	0xffedffed
 800b06c:	0095ffed 	.word	0x0095ffed
 800b070:	0024007d 	.word	0x0024007d
 800b074:	00240024 	.word	0x00240024
 800b078:	007fffed 	.word	0x007fffed
 800b07c:	ffedffed 	.word	0xffedffed
 800b080:	ffedffed 	.word	0xffedffed
 800b084:	0083009f 	.word	0x0083009f
 800b088:	ffed004b 	.word	0xffed004b
 800b08c:	009dffed 	.word	0x009dffed
 800b090:	007dffed 	.word	0x007dffed
 800b094:	ffedffed 	.word	0xffedffed
 800b098:	0051      	.short	0x0051
 800b09a:	3d45      	subs	r5, #69	; 0x45
 800b09c:	2d02      	cmp	r5, #2
 800b09e:	d8c8      	bhi.n	800b032 <__ssvfiscanf_r+0xe2>
 800b0a0:	2305      	movs	r3, #5
 800b0a2:	e06c      	b.n	800b17e <__ssvfiscanf_r+0x22e>
 800b0a4:	6863      	ldr	r3, [r4, #4]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	dd0e      	ble.n	800b0c8 <__ssvfiscanf_r+0x178>
 800b0aa:	6823      	ldr	r3, [r4, #0]
 800b0ac:	781a      	ldrb	r2, [r3, #0]
 800b0ae:	42aa      	cmp	r2, r5
 800b0b0:	d000      	beq.n	800b0b4 <__ssvfiscanf_r+0x164>
 800b0b2:	e0bc      	b.n	800b22e <__ssvfiscanf_r+0x2de>
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	6862      	ldr	r2, [r4, #4]
 800b0b8:	6023      	str	r3, [r4, #0]
 800b0ba:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b0bc:	3a01      	subs	r2, #1
 800b0be:	9300      	str	r3, [sp, #0]
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	6062      	str	r2, [r4, #4]
 800b0c4:	9347      	str	r3, [sp, #284]	; 0x11c
 800b0c6:	e76e      	b.n	800afa6 <__ssvfiscanf_r+0x56>
 800b0c8:	22c0      	movs	r2, #192	; 0xc0
 800b0ca:	ab43      	add	r3, sp, #268	; 0x10c
 800b0cc:	0052      	lsls	r2, r2, #1
 800b0ce:	589b      	ldr	r3, [r3, r2]
 800b0d0:	0021      	movs	r1, r4
 800b0d2:	0030      	movs	r0, r6
 800b0d4:	9300      	str	r3, [sp, #0]
 800b0d6:	4798      	blx	r3
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	d0e6      	beq.n	800b0aa <__ssvfiscanf_r+0x15a>
 800b0dc:	9846      	ldr	r0, [sp, #280]	; 0x118
 800b0de:	2800      	cmp	r0, #0
 800b0e0:	d000      	beq.n	800b0e4 <__ssvfiscanf_r+0x194>
 800b0e2:	e09d      	b.n	800b220 <__ssvfiscanf_r+0x2d0>
 800b0e4:	3801      	subs	r0, #1
 800b0e6:	23a5      	movs	r3, #165	; 0xa5
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	449d      	add	sp, r3
 800b0ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0ee:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b0f0:	9300      	str	r3, [sp, #0]
 800b0f2:	2320      	movs	r3, #32
 800b0f4:	9a00      	ldr	r2, [sp, #0]
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	9343      	str	r3, [sp, #268]	; 0x10c
 800b0fa:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b0fc:	9300      	str	r3, [sp, #0]
 800b0fe:	2380      	movs	r3, #128	; 0x80
 800b100:	9a00      	ldr	r2, [sp, #0]
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	4313      	orrs	r3, r2
 800b106:	9343      	str	r3, [sp, #268]	; 0x10c
 800b108:	2310      	movs	r3, #16
 800b10a:	9344      	str	r3, [sp, #272]	; 0x110
 800b10c:	236e      	movs	r3, #110	; 0x6e
 800b10e:	42ab      	cmp	r3, r5
 800b110:	41ad      	sbcs	r5, r5
 800b112:	426d      	negs	r5, r5
 800b114:	3503      	adds	r5, #3
 800b116:	9549      	str	r5, [sp, #292]	; 0x124
 800b118:	6863      	ldr	r3, [r4, #4]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	dd4a      	ble.n	800b1b4 <__ssvfiscanf_r+0x264>
 800b11e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b120:	9300      	str	r3, [sp, #0]
 800b122:	065b      	lsls	r3, r3, #25
 800b124:	d406      	bmi.n	800b134 <__ssvfiscanf_r+0x1e4>
 800b126:	6823      	ldr	r3, [r4, #0]
 800b128:	4945      	ldr	r1, [pc, #276]	; (800b240 <__ssvfiscanf_r+0x2f0>)
 800b12a:	781a      	ldrb	r2, [r3, #0]
 800b12c:	5c8a      	ldrb	r2, [r1, r2]
 800b12e:	2108      	movs	r1, #8
 800b130:	420a      	tst	r2, r1
 800b132:	d14a      	bne.n	800b1ca <__ssvfiscanf_r+0x27a>
 800b134:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800b136:	2b02      	cmp	r3, #2
 800b138:	dc5e      	bgt.n	800b1f8 <__ssvfiscanf_r+0x2a8>
 800b13a:	0022      	movs	r2, r4
 800b13c:	0030      	movs	r0, r6
 800b13e:	ab02      	add	r3, sp, #8
 800b140:	a943      	add	r1, sp, #268	; 0x10c
 800b142:	f000 f883 	bl	800b24c <_scanf_chars>
 800b146:	2801      	cmp	r0, #1
 800b148:	d071      	beq.n	800b22e <__ssvfiscanf_r+0x2de>
 800b14a:	2802      	cmp	r0, #2
 800b14c:	d000      	beq.n	800b150 <__ssvfiscanf_r+0x200>
 800b14e:	e72a      	b.n	800afa6 <__ssvfiscanf_r+0x56>
 800b150:	e7c4      	b.n	800b0dc <__ssvfiscanf_r+0x18c>
 800b152:	230a      	movs	r3, #10
 800b154:	e7d9      	b.n	800b10a <__ssvfiscanf_r+0x1ba>
 800b156:	2300      	movs	r3, #0
 800b158:	2503      	movs	r5, #3
 800b15a:	9344      	str	r3, [sp, #272]	; 0x110
 800b15c:	e7db      	b.n	800b116 <__ssvfiscanf_r+0x1c6>
 800b15e:	2308      	movs	r3, #8
 800b160:	2504      	movs	r5, #4
 800b162:	9344      	str	r3, [sp, #272]	; 0x110
 800b164:	e7d7      	b.n	800b116 <__ssvfiscanf_r+0x1c6>
 800b166:	0039      	movs	r1, r7
 800b168:	a803      	add	r0, sp, #12
 800b16a:	f000 f9fd 	bl	800b568 <__sccl>
 800b16e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b170:	0007      	movs	r7, r0
 800b172:	9300      	str	r3, [sp, #0]
 800b174:	2340      	movs	r3, #64	; 0x40
 800b176:	9a00      	ldr	r2, [sp, #0]
 800b178:	4313      	orrs	r3, r2
 800b17a:	9343      	str	r3, [sp, #268]	; 0x10c
 800b17c:	2301      	movs	r3, #1
 800b17e:	9349      	str	r3, [sp, #292]	; 0x124
 800b180:	e7ca      	b.n	800b118 <__ssvfiscanf_r+0x1c8>
 800b182:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b184:	9300      	str	r3, [sp, #0]
 800b186:	2340      	movs	r3, #64	; 0x40
 800b188:	9a00      	ldr	r2, [sp, #0]
 800b18a:	4313      	orrs	r3, r2
 800b18c:	9343      	str	r3, [sp, #268]	; 0x10c
 800b18e:	2300      	movs	r3, #0
 800b190:	e7f5      	b.n	800b17e <__ssvfiscanf_r+0x22e>
 800b192:	2302      	movs	r3, #2
 800b194:	e7f3      	b.n	800b17e <__ssvfiscanf_r+0x22e>
 800b196:	9843      	ldr	r0, [sp, #268]	; 0x10c
 800b198:	06c3      	lsls	r3, r0, #27
 800b19a:	d500      	bpl.n	800b19e <__ssvfiscanf_r+0x24e>
 800b19c:	e703      	b.n	800afa6 <__ssvfiscanf_r+0x56>
 800b19e:	9b02      	ldr	r3, [sp, #8]
 800b1a0:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800b1a2:	1d19      	adds	r1, r3, #4
 800b1a4:	9102      	str	r1, [sp, #8]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	07c5      	lsls	r5, r0, #31
 800b1aa:	d501      	bpl.n	800b1b0 <__ssvfiscanf_r+0x260>
 800b1ac:	801a      	strh	r2, [r3, #0]
 800b1ae:	e6fa      	b.n	800afa6 <__ssvfiscanf_r+0x56>
 800b1b0:	601a      	str	r2, [r3, #0]
 800b1b2:	e6f8      	b.n	800afa6 <__ssvfiscanf_r+0x56>
 800b1b4:	22c0      	movs	r2, #192	; 0xc0
 800b1b6:	ab43      	add	r3, sp, #268	; 0x10c
 800b1b8:	0052      	lsls	r2, r2, #1
 800b1ba:	589b      	ldr	r3, [r3, r2]
 800b1bc:	0021      	movs	r1, r4
 800b1be:	0030      	movs	r0, r6
 800b1c0:	9300      	str	r3, [sp, #0]
 800b1c2:	4798      	blx	r3
 800b1c4:	2800      	cmp	r0, #0
 800b1c6:	d0aa      	beq.n	800b11e <__ssvfiscanf_r+0x1ce>
 800b1c8:	e788      	b.n	800b0dc <__ssvfiscanf_r+0x18c>
 800b1ca:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800b1cc:	9200      	str	r2, [sp, #0]
 800b1ce:	3201      	adds	r2, #1
 800b1d0:	9247      	str	r2, [sp, #284]	; 0x11c
 800b1d2:	6862      	ldr	r2, [r4, #4]
 800b1d4:	3a01      	subs	r2, #1
 800b1d6:	6062      	str	r2, [r4, #4]
 800b1d8:	2a00      	cmp	r2, #0
 800b1da:	dd02      	ble.n	800b1e2 <__ssvfiscanf_r+0x292>
 800b1dc:	3301      	adds	r3, #1
 800b1de:	6023      	str	r3, [r4, #0]
 800b1e0:	e7a1      	b.n	800b126 <__ssvfiscanf_r+0x1d6>
 800b1e2:	22c0      	movs	r2, #192	; 0xc0
 800b1e4:	ab43      	add	r3, sp, #268	; 0x10c
 800b1e6:	0052      	lsls	r2, r2, #1
 800b1e8:	589b      	ldr	r3, [r3, r2]
 800b1ea:	0021      	movs	r1, r4
 800b1ec:	0030      	movs	r0, r6
 800b1ee:	9300      	str	r3, [sp, #0]
 800b1f0:	4798      	blx	r3
 800b1f2:	2800      	cmp	r0, #0
 800b1f4:	d097      	beq.n	800b126 <__ssvfiscanf_r+0x1d6>
 800b1f6:	e771      	b.n	800b0dc <__ssvfiscanf_r+0x18c>
 800b1f8:	2b04      	cmp	r3, #4
 800b1fa:	dc06      	bgt.n	800b20a <__ssvfiscanf_r+0x2ba>
 800b1fc:	0022      	movs	r2, r4
 800b1fe:	0030      	movs	r0, r6
 800b200:	ab02      	add	r3, sp, #8
 800b202:	a943      	add	r1, sp, #268	; 0x10c
 800b204:	f000 f880 	bl	800b308 <_scanf_i>
 800b208:	e79d      	b.n	800b146 <__ssvfiscanf_r+0x1f6>
 800b20a:	4b0f      	ldr	r3, [pc, #60]	; (800b248 <__ssvfiscanf_r+0x2f8>)
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d100      	bne.n	800b212 <__ssvfiscanf_r+0x2c2>
 800b210:	e6c9      	b.n	800afa6 <__ssvfiscanf_r+0x56>
 800b212:	0022      	movs	r2, r4
 800b214:	0030      	movs	r0, r6
 800b216:	ab02      	add	r3, sp, #8
 800b218:	a943      	add	r1, sp, #268	; 0x10c
 800b21a:	f7fc fb13 	bl	8007844 <_scanf_float>
 800b21e:	e792      	b.n	800b146 <__ssvfiscanf_r+0x1f6>
 800b220:	89a3      	ldrh	r3, [r4, #12]
 800b222:	065b      	lsls	r3, r3, #25
 800b224:	d400      	bmi.n	800b228 <__ssvfiscanf_r+0x2d8>
 800b226:	e75e      	b.n	800b0e6 <__ssvfiscanf_r+0x196>
 800b228:	2001      	movs	r0, #1
 800b22a:	4240      	negs	r0, r0
 800b22c:	e75b      	b.n	800b0e6 <__ssvfiscanf_r+0x196>
 800b22e:	9846      	ldr	r0, [sp, #280]	; 0x118
 800b230:	e759      	b.n	800b0e6 <__ssvfiscanf_r+0x196>
 800b232:	46c0      	nop			; (mov r8, r8)
 800b234:	fffffd6c 	.word	0xfffffd6c
 800b238:	0800ae99 	.word	0x0800ae99
 800b23c:	0800af11 	.word	0x0800af11
 800b240:	0800c491 	.word	0x0800c491
 800b244:	0800c7fa 	.word	0x0800c7fa
 800b248:	08007845 	.word	0x08007845

0800b24c <_scanf_chars>:
 800b24c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b24e:	0015      	movs	r5, r2
 800b250:	688a      	ldr	r2, [r1, #8]
 800b252:	000c      	movs	r4, r1
 800b254:	9001      	str	r0, [sp, #4]
 800b256:	2a00      	cmp	r2, #0
 800b258:	d105      	bne.n	800b266 <_scanf_chars+0x1a>
 800b25a:	6989      	ldr	r1, [r1, #24]
 800b25c:	3201      	adds	r2, #1
 800b25e:	2900      	cmp	r1, #0
 800b260:	d000      	beq.n	800b264 <_scanf_chars+0x18>
 800b262:	3a02      	subs	r2, #2
 800b264:	60a2      	str	r2, [r4, #8]
 800b266:	6822      	ldr	r2, [r4, #0]
 800b268:	06d2      	lsls	r2, r2, #27
 800b26a:	d403      	bmi.n	800b274 <_scanf_chars+0x28>
 800b26c:	681a      	ldr	r2, [r3, #0]
 800b26e:	1d11      	adds	r1, r2, #4
 800b270:	6019      	str	r1, [r3, #0]
 800b272:	6817      	ldr	r7, [r2, #0]
 800b274:	2600      	movs	r6, #0
 800b276:	69a0      	ldr	r0, [r4, #24]
 800b278:	2800      	cmp	r0, #0
 800b27a:	d013      	beq.n	800b2a4 <_scanf_chars+0x58>
 800b27c:	2801      	cmp	r0, #1
 800b27e:	d108      	bne.n	800b292 <_scanf_chars+0x46>
 800b280:	682b      	ldr	r3, [r5, #0]
 800b282:	6962      	ldr	r2, [r4, #20]
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	5cd3      	ldrb	r3, [r2, r3]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d10b      	bne.n	800b2a4 <_scanf_chars+0x58>
 800b28c:	2e00      	cmp	r6, #0
 800b28e:	d038      	beq.n	800b302 <_scanf_chars+0xb6>
 800b290:	e026      	b.n	800b2e0 <_scanf_chars+0x94>
 800b292:	2802      	cmp	r0, #2
 800b294:	d124      	bne.n	800b2e0 <_scanf_chars+0x94>
 800b296:	682b      	ldr	r3, [r5, #0]
 800b298:	4a1a      	ldr	r2, [pc, #104]	; (800b304 <_scanf_chars+0xb8>)
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	5cd3      	ldrb	r3, [r2, r3]
 800b29e:	2208      	movs	r2, #8
 800b2a0:	4213      	tst	r3, r2
 800b2a2:	d11d      	bne.n	800b2e0 <_scanf_chars+0x94>
 800b2a4:	2210      	movs	r2, #16
 800b2a6:	6823      	ldr	r3, [r4, #0]
 800b2a8:	3601      	adds	r6, #1
 800b2aa:	4213      	tst	r3, r2
 800b2ac:	d103      	bne.n	800b2b6 <_scanf_chars+0x6a>
 800b2ae:	682b      	ldr	r3, [r5, #0]
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	703b      	strb	r3, [r7, #0]
 800b2b4:	3701      	adds	r7, #1
 800b2b6:	682a      	ldr	r2, [r5, #0]
 800b2b8:	686b      	ldr	r3, [r5, #4]
 800b2ba:	3201      	adds	r2, #1
 800b2bc:	602a      	str	r2, [r5, #0]
 800b2be:	68a2      	ldr	r2, [r4, #8]
 800b2c0:	3b01      	subs	r3, #1
 800b2c2:	3a01      	subs	r2, #1
 800b2c4:	606b      	str	r3, [r5, #4]
 800b2c6:	60a2      	str	r2, [r4, #8]
 800b2c8:	2a00      	cmp	r2, #0
 800b2ca:	d009      	beq.n	800b2e0 <_scanf_chars+0x94>
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	dcd2      	bgt.n	800b276 <_scanf_chars+0x2a>
 800b2d0:	23c0      	movs	r3, #192	; 0xc0
 800b2d2:	005b      	lsls	r3, r3, #1
 800b2d4:	0029      	movs	r1, r5
 800b2d6:	58e3      	ldr	r3, [r4, r3]
 800b2d8:	9801      	ldr	r0, [sp, #4]
 800b2da:	4798      	blx	r3
 800b2dc:	2800      	cmp	r0, #0
 800b2de:	d0ca      	beq.n	800b276 <_scanf_chars+0x2a>
 800b2e0:	6822      	ldr	r2, [r4, #0]
 800b2e2:	2310      	movs	r3, #16
 800b2e4:	0011      	movs	r1, r2
 800b2e6:	4019      	ands	r1, r3
 800b2e8:	421a      	tst	r2, r3
 800b2ea:	d106      	bne.n	800b2fa <_scanf_chars+0xae>
 800b2ec:	68e3      	ldr	r3, [r4, #12]
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	60e3      	str	r3, [r4, #12]
 800b2f2:	69a3      	ldr	r3, [r4, #24]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d000      	beq.n	800b2fa <_scanf_chars+0xae>
 800b2f8:	7039      	strb	r1, [r7, #0]
 800b2fa:	2000      	movs	r0, #0
 800b2fc:	6923      	ldr	r3, [r4, #16]
 800b2fe:	199e      	adds	r6, r3, r6
 800b300:	6126      	str	r6, [r4, #16]
 800b302:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b304:	0800c491 	.word	0x0800c491

0800b308 <_scanf_i>:
 800b308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b30a:	000c      	movs	r4, r1
 800b30c:	b08d      	sub	sp, #52	; 0x34
 800b30e:	9302      	str	r3, [sp, #8]
 800b310:	4b79      	ldr	r3, [pc, #484]	; (800b4f8 <_scanf_i+0x1f0>)
 800b312:	0016      	movs	r6, r2
 800b314:	9005      	str	r0, [sp, #20]
 800b316:	aa09      	add	r2, sp, #36	; 0x24
 800b318:	cb23      	ldmia	r3!, {r0, r1, r5}
 800b31a:	c223      	stmia	r2!, {r0, r1, r5}
 800b31c:	4b77      	ldr	r3, [pc, #476]	; (800b4fc <_scanf_i+0x1f4>)
 800b31e:	9306      	str	r3, [sp, #24]
 800b320:	69a3      	ldr	r3, [r4, #24]
 800b322:	2b03      	cmp	r3, #3
 800b324:	d001      	beq.n	800b32a <_scanf_i+0x22>
 800b326:	4b76      	ldr	r3, [pc, #472]	; (800b500 <_scanf_i+0x1f8>)
 800b328:	9306      	str	r3, [sp, #24]
 800b32a:	22ae      	movs	r2, #174	; 0xae
 800b32c:	2000      	movs	r0, #0
 800b32e:	68a3      	ldr	r3, [r4, #8]
 800b330:	0052      	lsls	r2, r2, #1
 800b332:	1e59      	subs	r1, r3, #1
 800b334:	9004      	str	r0, [sp, #16]
 800b336:	4291      	cmp	r1, r2
 800b338:	d905      	bls.n	800b346 <_scanf_i+0x3e>
 800b33a:	3b5e      	subs	r3, #94	; 0x5e
 800b33c:	3bff      	subs	r3, #255	; 0xff
 800b33e:	9304      	str	r3, [sp, #16]
 800b340:	235e      	movs	r3, #94	; 0x5e
 800b342:	33ff      	adds	r3, #255	; 0xff
 800b344:	60a3      	str	r3, [r4, #8]
 800b346:	0023      	movs	r3, r4
 800b348:	331c      	adds	r3, #28
 800b34a:	9301      	str	r3, [sp, #4]
 800b34c:	23d0      	movs	r3, #208	; 0xd0
 800b34e:	2700      	movs	r7, #0
 800b350:	6822      	ldr	r2, [r4, #0]
 800b352:	011b      	lsls	r3, r3, #4
 800b354:	4313      	orrs	r3, r2
 800b356:	6023      	str	r3, [r4, #0]
 800b358:	9b01      	ldr	r3, [sp, #4]
 800b35a:	9303      	str	r3, [sp, #12]
 800b35c:	6833      	ldr	r3, [r6, #0]
 800b35e:	a809      	add	r0, sp, #36	; 0x24
 800b360:	7819      	ldrb	r1, [r3, #0]
 800b362:	00bb      	lsls	r3, r7, #2
 800b364:	2202      	movs	r2, #2
 800b366:	5818      	ldr	r0, [r3, r0]
 800b368:	f7fe fe48 	bl	8009ffc <memchr>
 800b36c:	2800      	cmp	r0, #0
 800b36e:	d02b      	beq.n	800b3c8 <_scanf_i+0xc0>
 800b370:	2f01      	cmp	r7, #1
 800b372:	d162      	bne.n	800b43a <_scanf_i+0x132>
 800b374:	6863      	ldr	r3, [r4, #4]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d106      	bne.n	800b388 <_scanf_i+0x80>
 800b37a:	3308      	adds	r3, #8
 800b37c:	6822      	ldr	r2, [r4, #0]
 800b37e:	6063      	str	r3, [r4, #4]
 800b380:	33f9      	adds	r3, #249	; 0xf9
 800b382:	33ff      	adds	r3, #255	; 0xff
 800b384:	4313      	orrs	r3, r2
 800b386:	6023      	str	r3, [r4, #0]
 800b388:	4b5e      	ldr	r3, [pc, #376]	; (800b504 <_scanf_i+0x1fc>)
 800b38a:	6822      	ldr	r2, [r4, #0]
 800b38c:	4013      	ands	r3, r2
 800b38e:	6023      	str	r3, [r4, #0]
 800b390:	68a3      	ldr	r3, [r4, #8]
 800b392:	1e5a      	subs	r2, r3, #1
 800b394:	60a2      	str	r2, [r4, #8]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d016      	beq.n	800b3c8 <_scanf_i+0xc0>
 800b39a:	6833      	ldr	r3, [r6, #0]
 800b39c:	1c5a      	adds	r2, r3, #1
 800b39e:	6032      	str	r2, [r6, #0]
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	9a03      	ldr	r2, [sp, #12]
 800b3a4:	7013      	strb	r3, [r2, #0]
 800b3a6:	6873      	ldr	r3, [r6, #4]
 800b3a8:	1c55      	adds	r5, r2, #1
 800b3aa:	3b01      	subs	r3, #1
 800b3ac:	6073      	str	r3, [r6, #4]
 800b3ae:	9503      	str	r5, [sp, #12]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	dc09      	bgt.n	800b3c8 <_scanf_i+0xc0>
 800b3b4:	23c0      	movs	r3, #192	; 0xc0
 800b3b6:	005b      	lsls	r3, r3, #1
 800b3b8:	58e3      	ldr	r3, [r4, r3]
 800b3ba:	0031      	movs	r1, r6
 800b3bc:	9805      	ldr	r0, [sp, #20]
 800b3be:	9307      	str	r3, [sp, #28]
 800b3c0:	4798      	blx	r3
 800b3c2:	2800      	cmp	r0, #0
 800b3c4:	d000      	beq.n	800b3c8 <_scanf_i+0xc0>
 800b3c6:	e081      	b.n	800b4cc <_scanf_i+0x1c4>
 800b3c8:	3701      	adds	r7, #1
 800b3ca:	2f03      	cmp	r7, #3
 800b3cc:	d1c6      	bne.n	800b35c <_scanf_i+0x54>
 800b3ce:	6863      	ldr	r3, [r4, #4]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d101      	bne.n	800b3d8 <_scanf_i+0xd0>
 800b3d4:	330a      	adds	r3, #10
 800b3d6:	6063      	str	r3, [r4, #4]
 800b3d8:	2110      	movs	r1, #16
 800b3da:	2700      	movs	r7, #0
 800b3dc:	6863      	ldr	r3, [r4, #4]
 800b3de:	6960      	ldr	r0, [r4, #20]
 800b3e0:	1ac9      	subs	r1, r1, r3
 800b3e2:	4b49      	ldr	r3, [pc, #292]	; (800b508 <_scanf_i+0x200>)
 800b3e4:	18c9      	adds	r1, r1, r3
 800b3e6:	f000 f8bf 	bl	800b568 <__sccl>
 800b3ea:	9d03      	ldr	r5, [sp, #12]
 800b3ec:	68a3      	ldr	r3, [r4, #8]
 800b3ee:	6822      	ldr	r2, [r4, #0]
 800b3f0:	9303      	str	r3, [sp, #12]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d041      	beq.n	800b47a <_scanf_i+0x172>
 800b3f6:	6831      	ldr	r1, [r6, #0]
 800b3f8:	6963      	ldr	r3, [r4, #20]
 800b3fa:	7808      	ldrb	r0, [r1, #0]
 800b3fc:	5c1b      	ldrb	r3, [r3, r0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d03b      	beq.n	800b47a <_scanf_i+0x172>
 800b402:	2830      	cmp	r0, #48	; 0x30
 800b404:	d129      	bne.n	800b45a <_scanf_i+0x152>
 800b406:	2380      	movs	r3, #128	; 0x80
 800b408:	011b      	lsls	r3, r3, #4
 800b40a:	421a      	tst	r2, r3
 800b40c:	d025      	beq.n	800b45a <_scanf_i+0x152>
 800b40e:	9b04      	ldr	r3, [sp, #16]
 800b410:	3701      	adds	r7, #1
 800b412:	2b00      	cmp	r3, #0
 800b414:	d005      	beq.n	800b422 <_scanf_i+0x11a>
 800b416:	001a      	movs	r2, r3
 800b418:	9b03      	ldr	r3, [sp, #12]
 800b41a:	3a01      	subs	r2, #1
 800b41c:	3301      	adds	r3, #1
 800b41e:	9204      	str	r2, [sp, #16]
 800b420:	60a3      	str	r3, [r4, #8]
 800b422:	6873      	ldr	r3, [r6, #4]
 800b424:	3b01      	subs	r3, #1
 800b426:	6073      	str	r3, [r6, #4]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	dd1d      	ble.n	800b468 <_scanf_i+0x160>
 800b42c:	6833      	ldr	r3, [r6, #0]
 800b42e:	3301      	adds	r3, #1
 800b430:	6033      	str	r3, [r6, #0]
 800b432:	68a3      	ldr	r3, [r4, #8]
 800b434:	3b01      	subs	r3, #1
 800b436:	60a3      	str	r3, [r4, #8]
 800b438:	e7d8      	b.n	800b3ec <_scanf_i+0xe4>
 800b43a:	2f02      	cmp	r7, #2
 800b43c:	d1a8      	bne.n	800b390 <_scanf_i+0x88>
 800b43e:	21c0      	movs	r1, #192	; 0xc0
 800b440:	2380      	movs	r3, #128	; 0x80
 800b442:	6822      	ldr	r2, [r4, #0]
 800b444:	00c9      	lsls	r1, r1, #3
 800b446:	4011      	ands	r1, r2
 800b448:	009b      	lsls	r3, r3, #2
 800b44a:	4299      	cmp	r1, r3
 800b44c:	d1bf      	bne.n	800b3ce <_scanf_i+0xc6>
 800b44e:	3bf1      	subs	r3, #241	; 0xf1
 800b450:	3bff      	subs	r3, #255	; 0xff
 800b452:	6063      	str	r3, [r4, #4]
 800b454:	33f0      	adds	r3, #240	; 0xf0
 800b456:	4313      	orrs	r3, r2
 800b458:	e799      	b.n	800b38e <_scanf_i+0x86>
 800b45a:	4b2c      	ldr	r3, [pc, #176]	; (800b50c <_scanf_i+0x204>)
 800b45c:	4013      	ands	r3, r2
 800b45e:	6023      	str	r3, [r4, #0]
 800b460:	780b      	ldrb	r3, [r1, #0]
 800b462:	702b      	strb	r3, [r5, #0]
 800b464:	3501      	adds	r5, #1
 800b466:	e7dc      	b.n	800b422 <_scanf_i+0x11a>
 800b468:	23c0      	movs	r3, #192	; 0xc0
 800b46a:	005b      	lsls	r3, r3, #1
 800b46c:	58e3      	ldr	r3, [r4, r3]
 800b46e:	0031      	movs	r1, r6
 800b470:	9805      	ldr	r0, [sp, #20]
 800b472:	9303      	str	r3, [sp, #12]
 800b474:	4798      	blx	r3
 800b476:	2800      	cmp	r0, #0
 800b478:	d0db      	beq.n	800b432 <_scanf_i+0x12a>
 800b47a:	6823      	ldr	r3, [r4, #0]
 800b47c:	05db      	lsls	r3, r3, #23
 800b47e:	d50e      	bpl.n	800b49e <_scanf_i+0x196>
 800b480:	9b01      	ldr	r3, [sp, #4]
 800b482:	429d      	cmp	r5, r3
 800b484:	d907      	bls.n	800b496 <_scanf_i+0x18e>
 800b486:	23be      	movs	r3, #190	; 0xbe
 800b488:	3d01      	subs	r5, #1
 800b48a:	005b      	lsls	r3, r3, #1
 800b48c:	0032      	movs	r2, r6
 800b48e:	7829      	ldrb	r1, [r5, #0]
 800b490:	58e3      	ldr	r3, [r4, r3]
 800b492:	9805      	ldr	r0, [sp, #20]
 800b494:	4798      	blx	r3
 800b496:	9b01      	ldr	r3, [sp, #4]
 800b498:	2001      	movs	r0, #1
 800b49a:	429d      	cmp	r5, r3
 800b49c:	d029      	beq.n	800b4f2 <_scanf_i+0x1ea>
 800b49e:	6821      	ldr	r1, [r4, #0]
 800b4a0:	2310      	movs	r3, #16
 800b4a2:	000a      	movs	r2, r1
 800b4a4:	401a      	ands	r2, r3
 800b4a6:	4219      	tst	r1, r3
 800b4a8:	d11c      	bne.n	800b4e4 <_scanf_i+0x1dc>
 800b4aa:	702a      	strb	r2, [r5, #0]
 800b4ac:	6863      	ldr	r3, [r4, #4]
 800b4ae:	9901      	ldr	r1, [sp, #4]
 800b4b0:	9805      	ldr	r0, [sp, #20]
 800b4b2:	9e06      	ldr	r6, [sp, #24]
 800b4b4:	47b0      	blx	r6
 800b4b6:	9b02      	ldr	r3, [sp, #8]
 800b4b8:	6821      	ldr	r1, [r4, #0]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	068a      	lsls	r2, r1, #26
 800b4be:	d507      	bpl.n	800b4d0 <_scanf_i+0x1c8>
 800b4c0:	1d1a      	adds	r2, r3, #4
 800b4c2:	9902      	ldr	r1, [sp, #8]
 800b4c4:	600a      	str	r2, [r1, #0]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	6018      	str	r0, [r3, #0]
 800b4ca:	e008      	b.n	800b4de <_scanf_i+0x1d6>
 800b4cc:	2700      	movs	r7, #0
 800b4ce:	e7d4      	b.n	800b47a <_scanf_i+0x172>
 800b4d0:	1d1a      	adds	r2, r3, #4
 800b4d2:	07ce      	lsls	r6, r1, #31
 800b4d4:	d5f5      	bpl.n	800b4c2 <_scanf_i+0x1ba>
 800b4d6:	9902      	ldr	r1, [sp, #8]
 800b4d8:	600a      	str	r2, [r1, #0]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	8018      	strh	r0, [r3, #0]
 800b4de:	68e3      	ldr	r3, [r4, #12]
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	60e3      	str	r3, [r4, #12]
 800b4e4:	2000      	movs	r0, #0
 800b4e6:	9b01      	ldr	r3, [sp, #4]
 800b4e8:	1aed      	subs	r5, r5, r3
 800b4ea:	6923      	ldr	r3, [r4, #16]
 800b4ec:	19ef      	adds	r7, r5, r7
 800b4ee:	19df      	adds	r7, r3, r7
 800b4f0:	6127      	str	r7, [r4, #16]
 800b4f2:	b00d      	add	sp, #52	; 0x34
 800b4f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4f6:	46c0      	nop			; (mov r8, r8)
 800b4f8:	0800c2bc 	.word	0x0800c2bc
 800b4fc:	08008b0d 	.word	0x08008b0d
 800b500:	0800b719 	.word	0x0800b719
 800b504:	fffffaff 	.word	0xfffffaff
 800b508:	0800c80e 	.word	0x0800c80e
 800b50c:	fffff6ff 	.word	0xfffff6ff

0800b510 <_read_r>:
 800b510:	b570      	push	{r4, r5, r6, lr}
 800b512:	0004      	movs	r4, r0
 800b514:	0008      	movs	r0, r1
 800b516:	0011      	movs	r1, r2
 800b518:	001a      	movs	r2, r3
 800b51a:	2300      	movs	r3, #0
 800b51c:	4d05      	ldr	r5, [pc, #20]	; (800b534 <_read_r+0x24>)
 800b51e:	602b      	str	r3, [r5, #0]
 800b520:	f7f7 ff02 	bl	8003328 <_read>
 800b524:	1c43      	adds	r3, r0, #1
 800b526:	d103      	bne.n	800b530 <_read_r+0x20>
 800b528:	682b      	ldr	r3, [r5, #0]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d000      	beq.n	800b530 <_read_r+0x20>
 800b52e:	6023      	str	r3, [r4, #0]
 800b530:	bd70      	pop	{r4, r5, r6, pc}
 800b532:	46c0      	nop			; (mov r8, r8)
 800b534:	20000428 	.word	0x20000428

0800b538 <nan>:
 800b538:	2000      	movs	r0, #0
 800b53a:	4901      	ldr	r1, [pc, #4]	; (800b540 <nan+0x8>)
 800b53c:	4770      	bx	lr
 800b53e:	46c0      	nop			; (mov r8, r8)
 800b540:	7ff80000 	.word	0x7ff80000

0800b544 <_sbrk_r>:
 800b544:	2300      	movs	r3, #0
 800b546:	b570      	push	{r4, r5, r6, lr}
 800b548:	4d06      	ldr	r5, [pc, #24]	; (800b564 <_sbrk_r+0x20>)
 800b54a:	0004      	movs	r4, r0
 800b54c:	0008      	movs	r0, r1
 800b54e:	602b      	str	r3, [r5, #0]
 800b550:	f7f7 ff50 	bl	80033f4 <_sbrk>
 800b554:	1c43      	adds	r3, r0, #1
 800b556:	d103      	bne.n	800b560 <_sbrk_r+0x1c>
 800b558:	682b      	ldr	r3, [r5, #0]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d000      	beq.n	800b560 <_sbrk_r+0x1c>
 800b55e:	6023      	str	r3, [r4, #0]
 800b560:	bd70      	pop	{r4, r5, r6, pc}
 800b562:	46c0      	nop			; (mov r8, r8)
 800b564:	20000428 	.word	0x20000428

0800b568 <__sccl>:
 800b568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b56a:	780b      	ldrb	r3, [r1, #0]
 800b56c:	0004      	movs	r4, r0
 800b56e:	2b5e      	cmp	r3, #94	; 0x5e
 800b570:	d00c      	beq.n	800b58c <__sccl+0x24>
 800b572:	1c48      	adds	r0, r1, #1
 800b574:	2100      	movs	r1, #0
 800b576:	0022      	movs	r2, r4
 800b578:	1c65      	adds	r5, r4, #1
 800b57a:	35ff      	adds	r5, #255	; 0xff
 800b57c:	7011      	strb	r1, [r2, #0]
 800b57e:	3201      	adds	r2, #1
 800b580:	42aa      	cmp	r2, r5
 800b582:	d1fb      	bne.n	800b57c <__sccl+0x14>
 800b584:	2b00      	cmp	r3, #0
 800b586:	d105      	bne.n	800b594 <__sccl+0x2c>
 800b588:	3801      	subs	r0, #1
 800b58a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b58c:	784b      	ldrb	r3, [r1, #1]
 800b58e:	1c88      	adds	r0, r1, #2
 800b590:	2101      	movs	r1, #1
 800b592:	e7f0      	b.n	800b576 <__sccl+0xe>
 800b594:	2201      	movs	r2, #1
 800b596:	262d      	movs	r6, #45	; 0x2d
 800b598:	4051      	eors	r1, r2
 800b59a:	0002      	movs	r2, r0
 800b59c:	54e1      	strb	r1, [r4, r3]
 800b59e:	7815      	ldrb	r5, [r2, #0]
 800b5a0:	1c50      	adds	r0, r2, #1
 800b5a2:	2d2d      	cmp	r5, #45	; 0x2d
 800b5a4:	d009      	beq.n	800b5ba <__sccl+0x52>
 800b5a6:	2d5d      	cmp	r5, #93	; 0x5d
 800b5a8:	d0ef      	beq.n	800b58a <__sccl+0x22>
 800b5aa:	2d00      	cmp	r5, #0
 800b5ac:	d101      	bne.n	800b5b2 <__sccl+0x4a>
 800b5ae:	0010      	movs	r0, r2
 800b5b0:	e7eb      	b.n	800b58a <__sccl+0x22>
 800b5b2:	002b      	movs	r3, r5
 800b5b4:	e7f1      	b.n	800b59a <__sccl+0x32>
 800b5b6:	0033      	movs	r3, r6
 800b5b8:	e7ef      	b.n	800b59a <__sccl+0x32>
 800b5ba:	7855      	ldrb	r5, [r2, #1]
 800b5bc:	2d5d      	cmp	r5, #93	; 0x5d
 800b5be:	d0fa      	beq.n	800b5b6 <__sccl+0x4e>
 800b5c0:	42ab      	cmp	r3, r5
 800b5c2:	dcf8      	bgt.n	800b5b6 <__sccl+0x4e>
 800b5c4:	0018      	movs	r0, r3
 800b5c6:	3202      	adds	r2, #2
 800b5c8:	3001      	adds	r0, #1
 800b5ca:	5421      	strb	r1, [r4, r0]
 800b5cc:	4285      	cmp	r5, r0
 800b5ce:	dcfb      	bgt.n	800b5c8 <__sccl+0x60>
 800b5d0:	2000      	movs	r0, #0
 800b5d2:	1c5f      	adds	r7, r3, #1
 800b5d4:	42ab      	cmp	r3, r5
 800b5d6:	da01      	bge.n	800b5dc <__sccl+0x74>
 800b5d8:	1ae8      	subs	r0, r5, r3
 800b5da:	3801      	subs	r0, #1
 800b5dc:	183b      	adds	r3, r7, r0
 800b5de:	e7de      	b.n	800b59e <__sccl+0x36>

0800b5e0 <strncmp>:
 800b5e0:	b530      	push	{r4, r5, lr}
 800b5e2:	0005      	movs	r5, r0
 800b5e4:	1e10      	subs	r0, r2, #0
 800b5e6:	d008      	beq.n	800b5fa <strncmp+0x1a>
 800b5e8:	2400      	movs	r4, #0
 800b5ea:	3a01      	subs	r2, #1
 800b5ec:	5d2b      	ldrb	r3, [r5, r4]
 800b5ee:	5d08      	ldrb	r0, [r1, r4]
 800b5f0:	4283      	cmp	r3, r0
 800b5f2:	d101      	bne.n	800b5f8 <strncmp+0x18>
 800b5f4:	4294      	cmp	r4, r2
 800b5f6:	d101      	bne.n	800b5fc <strncmp+0x1c>
 800b5f8:	1a18      	subs	r0, r3, r0
 800b5fa:	bd30      	pop	{r4, r5, pc}
 800b5fc:	3401      	adds	r4, #1
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d1f4      	bne.n	800b5ec <strncmp+0xc>
 800b602:	e7f9      	b.n	800b5f8 <strncmp+0x18>

0800b604 <_strtoul_l.constprop.0>:
 800b604:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b606:	b087      	sub	sp, #28
 800b608:	9202      	str	r2, [sp, #8]
 800b60a:	4a42      	ldr	r2, [pc, #264]	; (800b714 <_strtoul_l.constprop.0+0x110>)
 800b60c:	001e      	movs	r6, r3
 800b60e:	9101      	str	r1, [sp, #4]
 800b610:	000b      	movs	r3, r1
 800b612:	4694      	mov	ip, r2
 800b614:	2108      	movs	r1, #8
 800b616:	9005      	str	r0, [sp, #20]
 800b618:	001a      	movs	r2, r3
 800b61a:	4660      	mov	r0, ip
 800b61c:	7814      	ldrb	r4, [r2, #0]
 800b61e:	3301      	adds	r3, #1
 800b620:	5d00      	ldrb	r0, [r0, r4]
 800b622:	001d      	movs	r5, r3
 800b624:	0007      	movs	r7, r0
 800b626:	400f      	ands	r7, r1
 800b628:	4208      	tst	r0, r1
 800b62a:	d1f5      	bne.n	800b618 <_strtoul_l.constprop.0+0x14>
 800b62c:	2c2d      	cmp	r4, #45	; 0x2d
 800b62e:	d13a      	bne.n	800b6a6 <_strtoul_l.constprop.0+0xa2>
 800b630:	2701      	movs	r7, #1
 800b632:	781c      	ldrb	r4, [r3, #0]
 800b634:	1c95      	adds	r5, r2, #2
 800b636:	2e00      	cmp	r6, #0
 800b638:	d067      	beq.n	800b70a <_strtoul_l.constprop.0+0x106>
 800b63a:	2e10      	cmp	r6, #16
 800b63c:	d109      	bne.n	800b652 <_strtoul_l.constprop.0+0x4e>
 800b63e:	2c30      	cmp	r4, #48	; 0x30
 800b640:	d107      	bne.n	800b652 <_strtoul_l.constprop.0+0x4e>
 800b642:	2220      	movs	r2, #32
 800b644:	782b      	ldrb	r3, [r5, #0]
 800b646:	4393      	bics	r3, r2
 800b648:	2b58      	cmp	r3, #88	; 0x58
 800b64a:	d159      	bne.n	800b700 <_strtoul_l.constprop.0+0xfc>
 800b64c:	2610      	movs	r6, #16
 800b64e:	786c      	ldrb	r4, [r5, #1]
 800b650:	3502      	adds	r5, #2
 800b652:	2001      	movs	r0, #1
 800b654:	0031      	movs	r1, r6
 800b656:	4240      	negs	r0, r0
 800b658:	f7f4 fd72 	bl	8000140 <__udivsi3>
 800b65c:	9003      	str	r0, [sp, #12]
 800b65e:	2001      	movs	r0, #1
 800b660:	0031      	movs	r1, r6
 800b662:	4240      	negs	r0, r0
 800b664:	f7f4 fdf2 	bl	800024c <__aeabi_uidivmod>
 800b668:	2300      	movs	r3, #0
 800b66a:	9104      	str	r1, [sp, #16]
 800b66c:	2101      	movs	r1, #1
 800b66e:	2201      	movs	r2, #1
 800b670:	0018      	movs	r0, r3
 800b672:	468c      	mov	ip, r1
 800b674:	4252      	negs	r2, r2
 800b676:	0021      	movs	r1, r4
 800b678:	3930      	subs	r1, #48	; 0x30
 800b67a:	2909      	cmp	r1, #9
 800b67c:	d818      	bhi.n	800b6b0 <_strtoul_l.constprop.0+0xac>
 800b67e:	000c      	movs	r4, r1
 800b680:	42a6      	cmp	r6, r4
 800b682:	dd23      	ble.n	800b6cc <_strtoul_l.constprop.0+0xc8>
 800b684:	2b00      	cmp	r3, #0
 800b686:	db1f      	blt.n	800b6c8 <_strtoul_l.constprop.0+0xc4>
 800b688:	9903      	ldr	r1, [sp, #12]
 800b68a:	0013      	movs	r3, r2
 800b68c:	4281      	cmp	r1, r0
 800b68e:	d307      	bcc.n	800b6a0 <_strtoul_l.constprop.0+0x9c>
 800b690:	d103      	bne.n	800b69a <_strtoul_l.constprop.0+0x96>
 800b692:	9904      	ldr	r1, [sp, #16]
 800b694:	0013      	movs	r3, r2
 800b696:	42a1      	cmp	r1, r4
 800b698:	db02      	blt.n	800b6a0 <_strtoul_l.constprop.0+0x9c>
 800b69a:	4663      	mov	r3, ip
 800b69c:	4370      	muls	r0, r6
 800b69e:	1820      	adds	r0, r4, r0
 800b6a0:	782c      	ldrb	r4, [r5, #0]
 800b6a2:	3501      	adds	r5, #1
 800b6a4:	e7e7      	b.n	800b676 <_strtoul_l.constprop.0+0x72>
 800b6a6:	2c2b      	cmp	r4, #43	; 0x2b
 800b6a8:	d1c5      	bne.n	800b636 <_strtoul_l.constprop.0+0x32>
 800b6aa:	781c      	ldrb	r4, [r3, #0]
 800b6ac:	1c95      	adds	r5, r2, #2
 800b6ae:	e7c2      	b.n	800b636 <_strtoul_l.constprop.0+0x32>
 800b6b0:	0021      	movs	r1, r4
 800b6b2:	3941      	subs	r1, #65	; 0x41
 800b6b4:	2919      	cmp	r1, #25
 800b6b6:	d801      	bhi.n	800b6bc <_strtoul_l.constprop.0+0xb8>
 800b6b8:	3c37      	subs	r4, #55	; 0x37
 800b6ba:	e7e1      	b.n	800b680 <_strtoul_l.constprop.0+0x7c>
 800b6bc:	0021      	movs	r1, r4
 800b6be:	3961      	subs	r1, #97	; 0x61
 800b6c0:	2919      	cmp	r1, #25
 800b6c2:	d803      	bhi.n	800b6cc <_strtoul_l.constprop.0+0xc8>
 800b6c4:	3c57      	subs	r4, #87	; 0x57
 800b6c6:	e7db      	b.n	800b680 <_strtoul_l.constprop.0+0x7c>
 800b6c8:	0013      	movs	r3, r2
 800b6ca:	e7e9      	b.n	800b6a0 <_strtoul_l.constprop.0+0x9c>
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	da09      	bge.n	800b6e4 <_strtoul_l.constprop.0+0xe0>
 800b6d0:	2322      	movs	r3, #34	; 0x22
 800b6d2:	2001      	movs	r0, #1
 800b6d4:	9a05      	ldr	r2, [sp, #20]
 800b6d6:	4240      	negs	r0, r0
 800b6d8:	6013      	str	r3, [r2, #0]
 800b6da:	9b02      	ldr	r3, [sp, #8]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d109      	bne.n	800b6f4 <_strtoul_l.constprop.0+0xf0>
 800b6e0:	b007      	add	sp, #28
 800b6e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6e4:	2f00      	cmp	r7, #0
 800b6e6:	d000      	beq.n	800b6ea <_strtoul_l.constprop.0+0xe6>
 800b6e8:	4240      	negs	r0, r0
 800b6ea:	9a02      	ldr	r2, [sp, #8]
 800b6ec:	2a00      	cmp	r2, #0
 800b6ee:	d0f7      	beq.n	800b6e0 <_strtoul_l.constprop.0+0xdc>
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d001      	beq.n	800b6f8 <_strtoul_l.constprop.0+0xf4>
 800b6f4:	1e6b      	subs	r3, r5, #1
 800b6f6:	9301      	str	r3, [sp, #4]
 800b6f8:	9b02      	ldr	r3, [sp, #8]
 800b6fa:	9a01      	ldr	r2, [sp, #4]
 800b6fc:	601a      	str	r2, [r3, #0]
 800b6fe:	e7ef      	b.n	800b6e0 <_strtoul_l.constprop.0+0xdc>
 800b700:	2430      	movs	r4, #48	; 0x30
 800b702:	2e00      	cmp	r6, #0
 800b704:	d1a5      	bne.n	800b652 <_strtoul_l.constprop.0+0x4e>
 800b706:	3608      	adds	r6, #8
 800b708:	e7a3      	b.n	800b652 <_strtoul_l.constprop.0+0x4e>
 800b70a:	2c30      	cmp	r4, #48	; 0x30
 800b70c:	d099      	beq.n	800b642 <_strtoul_l.constprop.0+0x3e>
 800b70e:	260a      	movs	r6, #10
 800b710:	e79f      	b.n	800b652 <_strtoul_l.constprop.0+0x4e>
 800b712:	46c0      	nop			; (mov r8, r8)
 800b714:	0800c491 	.word	0x0800c491

0800b718 <_strtoul_r>:
 800b718:	b510      	push	{r4, lr}
 800b71a:	f7ff ff73 	bl	800b604 <_strtoul_l.constprop.0>
 800b71e:	bd10      	pop	{r4, pc}

0800b720 <__submore>:
 800b720:	000b      	movs	r3, r1
 800b722:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b724:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800b726:	3344      	adds	r3, #68	; 0x44
 800b728:	000c      	movs	r4, r1
 800b72a:	429d      	cmp	r5, r3
 800b72c:	d11c      	bne.n	800b768 <__submore+0x48>
 800b72e:	2680      	movs	r6, #128	; 0x80
 800b730:	00f6      	lsls	r6, r6, #3
 800b732:	0031      	movs	r1, r6
 800b734:	f7ff f9d8 	bl	800aae8 <_malloc_r>
 800b738:	2800      	cmp	r0, #0
 800b73a:	d102      	bne.n	800b742 <__submore+0x22>
 800b73c:	2001      	movs	r0, #1
 800b73e:	4240      	negs	r0, r0
 800b740:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b742:	0023      	movs	r3, r4
 800b744:	6360      	str	r0, [r4, #52]	; 0x34
 800b746:	63a6      	str	r6, [r4, #56]	; 0x38
 800b748:	3346      	adds	r3, #70	; 0x46
 800b74a:	781a      	ldrb	r2, [r3, #0]
 800b74c:	4b10      	ldr	r3, [pc, #64]	; (800b790 <__submore+0x70>)
 800b74e:	54c2      	strb	r2, [r0, r3]
 800b750:	0023      	movs	r3, r4
 800b752:	3345      	adds	r3, #69	; 0x45
 800b754:	781a      	ldrb	r2, [r3, #0]
 800b756:	4b0f      	ldr	r3, [pc, #60]	; (800b794 <__submore+0x74>)
 800b758:	54c2      	strb	r2, [r0, r3]
 800b75a:	782a      	ldrb	r2, [r5, #0]
 800b75c:	4b0e      	ldr	r3, [pc, #56]	; (800b798 <__submore+0x78>)
 800b75e:	54c2      	strb	r2, [r0, r3]
 800b760:	18c0      	adds	r0, r0, r3
 800b762:	6020      	str	r0, [r4, #0]
 800b764:	2000      	movs	r0, #0
 800b766:	e7eb      	b.n	800b740 <__submore+0x20>
 800b768:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 800b76a:	0029      	movs	r1, r5
 800b76c:	0073      	lsls	r3, r6, #1
 800b76e:	001a      	movs	r2, r3
 800b770:	9301      	str	r3, [sp, #4]
 800b772:	f000 fa43 	bl	800bbfc <_realloc_r>
 800b776:	1e05      	subs	r5, r0, #0
 800b778:	d0e0      	beq.n	800b73c <__submore+0x1c>
 800b77a:	1987      	adds	r7, r0, r6
 800b77c:	0001      	movs	r1, r0
 800b77e:	0032      	movs	r2, r6
 800b780:	0038      	movs	r0, r7
 800b782:	f7fe fc46 	bl	800a012 <memcpy>
 800b786:	9b01      	ldr	r3, [sp, #4]
 800b788:	6027      	str	r7, [r4, #0]
 800b78a:	6365      	str	r5, [r4, #52]	; 0x34
 800b78c:	63a3      	str	r3, [r4, #56]	; 0x38
 800b78e:	e7e9      	b.n	800b764 <__submore+0x44>
 800b790:	000003ff 	.word	0x000003ff
 800b794:	000003fe 	.word	0x000003fe
 800b798:	000003fd 	.word	0x000003fd

0800b79c <__ascii_wctomb>:
 800b79c:	0003      	movs	r3, r0
 800b79e:	1e08      	subs	r0, r1, #0
 800b7a0:	d005      	beq.n	800b7ae <__ascii_wctomb+0x12>
 800b7a2:	2aff      	cmp	r2, #255	; 0xff
 800b7a4:	d904      	bls.n	800b7b0 <__ascii_wctomb+0x14>
 800b7a6:	228a      	movs	r2, #138	; 0x8a
 800b7a8:	2001      	movs	r0, #1
 800b7aa:	601a      	str	r2, [r3, #0]
 800b7ac:	4240      	negs	r0, r0
 800b7ae:	4770      	bx	lr
 800b7b0:	2001      	movs	r0, #1
 800b7b2:	700a      	strb	r2, [r1, #0]
 800b7b4:	e7fb      	b.n	800b7ae <__ascii_wctomb+0x12>
	...

0800b7b8 <__assert_func>:
 800b7b8:	b530      	push	{r4, r5, lr}
 800b7ba:	0014      	movs	r4, r2
 800b7bc:	001a      	movs	r2, r3
 800b7be:	4b09      	ldr	r3, [pc, #36]	; (800b7e4 <__assert_func+0x2c>)
 800b7c0:	0005      	movs	r5, r0
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	b085      	sub	sp, #20
 800b7c6:	68d8      	ldr	r0, [r3, #12]
 800b7c8:	4b07      	ldr	r3, [pc, #28]	; (800b7e8 <__assert_func+0x30>)
 800b7ca:	2c00      	cmp	r4, #0
 800b7cc:	d101      	bne.n	800b7d2 <__assert_func+0x1a>
 800b7ce:	4b07      	ldr	r3, [pc, #28]	; (800b7ec <__assert_func+0x34>)
 800b7d0:	001c      	movs	r4, r3
 800b7d2:	9301      	str	r3, [sp, #4]
 800b7d4:	9100      	str	r1, [sp, #0]
 800b7d6:	002b      	movs	r3, r5
 800b7d8:	4905      	ldr	r1, [pc, #20]	; (800b7f0 <__assert_func+0x38>)
 800b7da:	9402      	str	r4, [sp, #8]
 800b7dc:	f000 f9b8 	bl	800bb50 <fiprintf>
 800b7e0:	f000 fc6a 	bl	800c0b8 <abort>
 800b7e4:	20000014 	.word	0x20000014
 800b7e8:	0800c820 	.word	0x0800c820
 800b7ec:	0800c85b 	.word	0x0800c85b
 800b7f0:	0800c82d 	.word	0x0800c82d

0800b7f4 <__sflush_r>:
 800b7f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7f6:	898b      	ldrh	r3, [r1, #12]
 800b7f8:	0005      	movs	r5, r0
 800b7fa:	000c      	movs	r4, r1
 800b7fc:	071a      	lsls	r2, r3, #28
 800b7fe:	d45f      	bmi.n	800b8c0 <__sflush_r+0xcc>
 800b800:	684a      	ldr	r2, [r1, #4]
 800b802:	2a00      	cmp	r2, #0
 800b804:	dc04      	bgt.n	800b810 <__sflush_r+0x1c>
 800b806:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800b808:	2a00      	cmp	r2, #0
 800b80a:	dc01      	bgt.n	800b810 <__sflush_r+0x1c>
 800b80c:	2000      	movs	r0, #0
 800b80e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b810:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b812:	2f00      	cmp	r7, #0
 800b814:	d0fa      	beq.n	800b80c <__sflush_r+0x18>
 800b816:	2200      	movs	r2, #0
 800b818:	2180      	movs	r1, #128	; 0x80
 800b81a:	682e      	ldr	r6, [r5, #0]
 800b81c:	602a      	str	r2, [r5, #0]
 800b81e:	001a      	movs	r2, r3
 800b820:	0149      	lsls	r1, r1, #5
 800b822:	400a      	ands	r2, r1
 800b824:	420b      	tst	r3, r1
 800b826:	d034      	beq.n	800b892 <__sflush_r+0x9e>
 800b828:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b82a:	89a3      	ldrh	r3, [r4, #12]
 800b82c:	075b      	lsls	r3, r3, #29
 800b82e:	d506      	bpl.n	800b83e <__sflush_r+0x4a>
 800b830:	6863      	ldr	r3, [r4, #4]
 800b832:	1ac0      	subs	r0, r0, r3
 800b834:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b836:	2b00      	cmp	r3, #0
 800b838:	d001      	beq.n	800b83e <__sflush_r+0x4a>
 800b83a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b83c:	1ac0      	subs	r0, r0, r3
 800b83e:	0002      	movs	r2, r0
 800b840:	6a21      	ldr	r1, [r4, #32]
 800b842:	2300      	movs	r3, #0
 800b844:	0028      	movs	r0, r5
 800b846:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b848:	47b8      	blx	r7
 800b84a:	89a1      	ldrh	r1, [r4, #12]
 800b84c:	1c43      	adds	r3, r0, #1
 800b84e:	d106      	bne.n	800b85e <__sflush_r+0x6a>
 800b850:	682b      	ldr	r3, [r5, #0]
 800b852:	2b1d      	cmp	r3, #29
 800b854:	d831      	bhi.n	800b8ba <__sflush_r+0xc6>
 800b856:	4a2c      	ldr	r2, [pc, #176]	; (800b908 <__sflush_r+0x114>)
 800b858:	40da      	lsrs	r2, r3
 800b85a:	07d3      	lsls	r3, r2, #31
 800b85c:	d52d      	bpl.n	800b8ba <__sflush_r+0xc6>
 800b85e:	2300      	movs	r3, #0
 800b860:	6063      	str	r3, [r4, #4]
 800b862:	6923      	ldr	r3, [r4, #16]
 800b864:	6023      	str	r3, [r4, #0]
 800b866:	04cb      	lsls	r3, r1, #19
 800b868:	d505      	bpl.n	800b876 <__sflush_r+0x82>
 800b86a:	1c43      	adds	r3, r0, #1
 800b86c:	d102      	bne.n	800b874 <__sflush_r+0x80>
 800b86e:	682b      	ldr	r3, [r5, #0]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d100      	bne.n	800b876 <__sflush_r+0x82>
 800b874:	6560      	str	r0, [r4, #84]	; 0x54
 800b876:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b878:	602e      	str	r6, [r5, #0]
 800b87a:	2900      	cmp	r1, #0
 800b87c:	d0c6      	beq.n	800b80c <__sflush_r+0x18>
 800b87e:	0023      	movs	r3, r4
 800b880:	3344      	adds	r3, #68	; 0x44
 800b882:	4299      	cmp	r1, r3
 800b884:	d002      	beq.n	800b88c <__sflush_r+0x98>
 800b886:	0028      	movs	r0, r5
 800b888:	f7ff f8c2 	bl	800aa10 <_free_r>
 800b88c:	2000      	movs	r0, #0
 800b88e:	6360      	str	r0, [r4, #52]	; 0x34
 800b890:	e7bd      	b.n	800b80e <__sflush_r+0x1a>
 800b892:	2301      	movs	r3, #1
 800b894:	0028      	movs	r0, r5
 800b896:	6a21      	ldr	r1, [r4, #32]
 800b898:	47b8      	blx	r7
 800b89a:	1c43      	adds	r3, r0, #1
 800b89c:	d1c5      	bne.n	800b82a <__sflush_r+0x36>
 800b89e:	682b      	ldr	r3, [r5, #0]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d0c2      	beq.n	800b82a <__sflush_r+0x36>
 800b8a4:	2b1d      	cmp	r3, #29
 800b8a6:	d001      	beq.n	800b8ac <__sflush_r+0xb8>
 800b8a8:	2b16      	cmp	r3, #22
 800b8aa:	d101      	bne.n	800b8b0 <__sflush_r+0xbc>
 800b8ac:	602e      	str	r6, [r5, #0]
 800b8ae:	e7ad      	b.n	800b80c <__sflush_r+0x18>
 800b8b0:	2340      	movs	r3, #64	; 0x40
 800b8b2:	89a2      	ldrh	r2, [r4, #12]
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	81a3      	strh	r3, [r4, #12]
 800b8b8:	e7a9      	b.n	800b80e <__sflush_r+0x1a>
 800b8ba:	2340      	movs	r3, #64	; 0x40
 800b8bc:	430b      	orrs	r3, r1
 800b8be:	e7fa      	b.n	800b8b6 <__sflush_r+0xc2>
 800b8c0:	690f      	ldr	r7, [r1, #16]
 800b8c2:	2f00      	cmp	r7, #0
 800b8c4:	d0a2      	beq.n	800b80c <__sflush_r+0x18>
 800b8c6:	680a      	ldr	r2, [r1, #0]
 800b8c8:	600f      	str	r7, [r1, #0]
 800b8ca:	1bd2      	subs	r2, r2, r7
 800b8cc:	9201      	str	r2, [sp, #4]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	079b      	lsls	r3, r3, #30
 800b8d2:	d100      	bne.n	800b8d6 <__sflush_r+0xe2>
 800b8d4:	694a      	ldr	r2, [r1, #20]
 800b8d6:	60a2      	str	r2, [r4, #8]
 800b8d8:	9b01      	ldr	r3, [sp, #4]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	dc00      	bgt.n	800b8e0 <__sflush_r+0xec>
 800b8de:	e795      	b.n	800b80c <__sflush_r+0x18>
 800b8e0:	003a      	movs	r2, r7
 800b8e2:	0028      	movs	r0, r5
 800b8e4:	9b01      	ldr	r3, [sp, #4]
 800b8e6:	6a21      	ldr	r1, [r4, #32]
 800b8e8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b8ea:	47b0      	blx	r6
 800b8ec:	2800      	cmp	r0, #0
 800b8ee:	dc06      	bgt.n	800b8fe <__sflush_r+0x10a>
 800b8f0:	2340      	movs	r3, #64	; 0x40
 800b8f2:	2001      	movs	r0, #1
 800b8f4:	89a2      	ldrh	r2, [r4, #12]
 800b8f6:	4240      	negs	r0, r0
 800b8f8:	4313      	orrs	r3, r2
 800b8fa:	81a3      	strh	r3, [r4, #12]
 800b8fc:	e787      	b.n	800b80e <__sflush_r+0x1a>
 800b8fe:	9b01      	ldr	r3, [sp, #4]
 800b900:	183f      	adds	r7, r7, r0
 800b902:	1a1b      	subs	r3, r3, r0
 800b904:	9301      	str	r3, [sp, #4]
 800b906:	e7e7      	b.n	800b8d8 <__sflush_r+0xe4>
 800b908:	20400001 	.word	0x20400001

0800b90c <_fflush_r>:
 800b90c:	690b      	ldr	r3, [r1, #16]
 800b90e:	b570      	push	{r4, r5, r6, lr}
 800b910:	0005      	movs	r5, r0
 800b912:	000c      	movs	r4, r1
 800b914:	2b00      	cmp	r3, #0
 800b916:	d102      	bne.n	800b91e <_fflush_r+0x12>
 800b918:	2500      	movs	r5, #0
 800b91a:	0028      	movs	r0, r5
 800b91c:	bd70      	pop	{r4, r5, r6, pc}
 800b91e:	2800      	cmp	r0, #0
 800b920:	d004      	beq.n	800b92c <_fflush_r+0x20>
 800b922:	6983      	ldr	r3, [r0, #24]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d101      	bne.n	800b92c <_fflush_r+0x20>
 800b928:	f000 f892 	bl	800ba50 <__sinit>
 800b92c:	4b14      	ldr	r3, [pc, #80]	; (800b980 <_fflush_r+0x74>)
 800b92e:	429c      	cmp	r4, r3
 800b930:	d11b      	bne.n	800b96a <_fflush_r+0x5e>
 800b932:	686c      	ldr	r4, [r5, #4]
 800b934:	220c      	movs	r2, #12
 800b936:	5ea3      	ldrsh	r3, [r4, r2]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d0ed      	beq.n	800b918 <_fflush_r+0xc>
 800b93c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b93e:	07d2      	lsls	r2, r2, #31
 800b940:	d404      	bmi.n	800b94c <_fflush_r+0x40>
 800b942:	059b      	lsls	r3, r3, #22
 800b944:	d402      	bmi.n	800b94c <_fflush_r+0x40>
 800b946:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b948:	f000 f933 	bl	800bbb2 <__retarget_lock_acquire_recursive>
 800b94c:	0028      	movs	r0, r5
 800b94e:	0021      	movs	r1, r4
 800b950:	f7ff ff50 	bl	800b7f4 <__sflush_r>
 800b954:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b956:	0005      	movs	r5, r0
 800b958:	07db      	lsls	r3, r3, #31
 800b95a:	d4de      	bmi.n	800b91a <_fflush_r+0xe>
 800b95c:	89a3      	ldrh	r3, [r4, #12]
 800b95e:	059b      	lsls	r3, r3, #22
 800b960:	d4db      	bmi.n	800b91a <_fflush_r+0xe>
 800b962:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b964:	f000 f926 	bl	800bbb4 <__retarget_lock_release_recursive>
 800b968:	e7d7      	b.n	800b91a <_fflush_r+0xe>
 800b96a:	4b06      	ldr	r3, [pc, #24]	; (800b984 <_fflush_r+0x78>)
 800b96c:	429c      	cmp	r4, r3
 800b96e:	d101      	bne.n	800b974 <_fflush_r+0x68>
 800b970:	68ac      	ldr	r4, [r5, #8]
 800b972:	e7df      	b.n	800b934 <_fflush_r+0x28>
 800b974:	4b04      	ldr	r3, [pc, #16]	; (800b988 <_fflush_r+0x7c>)
 800b976:	429c      	cmp	r4, r3
 800b978:	d1dc      	bne.n	800b934 <_fflush_r+0x28>
 800b97a:	68ec      	ldr	r4, [r5, #12]
 800b97c:	e7da      	b.n	800b934 <_fflush_r+0x28>
 800b97e:	46c0      	nop			; (mov r8, r8)
 800b980:	0800c87c 	.word	0x0800c87c
 800b984:	0800c89c 	.word	0x0800c89c
 800b988:	0800c85c 	.word	0x0800c85c

0800b98c <std>:
 800b98c:	2300      	movs	r3, #0
 800b98e:	b510      	push	{r4, lr}
 800b990:	0004      	movs	r4, r0
 800b992:	6003      	str	r3, [r0, #0]
 800b994:	6043      	str	r3, [r0, #4]
 800b996:	6083      	str	r3, [r0, #8]
 800b998:	8181      	strh	r1, [r0, #12]
 800b99a:	6643      	str	r3, [r0, #100]	; 0x64
 800b99c:	0019      	movs	r1, r3
 800b99e:	81c2      	strh	r2, [r0, #14]
 800b9a0:	6103      	str	r3, [r0, #16]
 800b9a2:	6143      	str	r3, [r0, #20]
 800b9a4:	6183      	str	r3, [r0, #24]
 800b9a6:	2208      	movs	r2, #8
 800b9a8:	305c      	adds	r0, #92	; 0x5c
 800b9aa:	f7fb fad5 	bl	8006f58 <memset>
 800b9ae:	4b05      	ldr	r3, [pc, #20]	; (800b9c4 <std+0x38>)
 800b9b0:	6224      	str	r4, [r4, #32]
 800b9b2:	6263      	str	r3, [r4, #36]	; 0x24
 800b9b4:	4b04      	ldr	r3, [pc, #16]	; (800b9c8 <std+0x3c>)
 800b9b6:	62a3      	str	r3, [r4, #40]	; 0x28
 800b9b8:	4b04      	ldr	r3, [pc, #16]	; (800b9cc <std+0x40>)
 800b9ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b9bc:	4b04      	ldr	r3, [pc, #16]	; (800b9d0 <std+0x44>)
 800b9be:	6323      	str	r3, [r4, #48]	; 0x30
 800b9c0:	bd10      	pop	{r4, pc}
 800b9c2:	46c0      	nop			; (mov r8, r8)
 800b9c4:	08007ced 	.word	0x08007ced
 800b9c8:	08007d19 	.word	0x08007d19
 800b9cc:	08007d51 	.word	0x08007d51
 800b9d0:	08007d7d 	.word	0x08007d7d

0800b9d4 <_cleanup_r>:
 800b9d4:	b510      	push	{r4, lr}
 800b9d6:	4902      	ldr	r1, [pc, #8]	; (800b9e0 <_cleanup_r+0xc>)
 800b9d8:	f000 f8ca 	bl	800bb70 <_fwalk_reent>
 800b9dc:	bd10      	pop	{r4, pc}
 800b9de:	46c0      	nop			; (mov r8, r8)
 800b9e0:	0800b90d 	.word	0x0800b90d

0800b9e4 <__sfmoreglue>:
 800b9e4:	b570      	push	{r4, r5, r6, lr}
 800b9e6:	2568      	movs	r5, #104	; 0x68
 800b9e8:	1e4a      	subs	r2, r1, #1
 800b9ea:	4355      	muls	r5, r2
 800b9ec:	000e      	movs	r6, r1
 800b9ee:	0029      	movs	r1, r5
 800b9f0:	3174      	adds	r1, #116	; 0x74
 800b9f2:	f7ff f879 	bl	800aae8 <_malloc_r>
 800b9f6:	1e04      	subs	r4, r0, #0
 800b9f8:	d008      	beq.n	800ba0c <__sfmoreglue+0x28>
 800b9fa:	2100      	movs	r1, #0
 800b9fc:	002a      	movs	r2, r5
 800b9fe:	6001      	str	r1, [r0, #0]
 800ba00:	6046      	str	r6, [r0, #4]
 800ba02:	300c      	adds	r0, #12
 800ba04:	60a0      	str	r0, [r4, #8]
 800ba06:	3268      	adds	r2, #104	; 0x68
 800ba08:	f7fb faa6 	bl	8006f58 <memset>
 800ba0c:	0020      	movs	r0, r4
 800ba0e:	bd70      	pop	{r4, r5, r6, pc}

0800ba10 <__sfp_lock_acquire>:
 800ba10:	b510      	push	{r4, lr}
 800ba12:	4802      	ldr	r0, [pc, #8]	; (800ba1c <__sfp_lock_acquire+0xc>)
 800ba14:	f000 f8cd 	bl	800bbb2 <__retarget_lock_acquire_recursive>
 800ba18:	bd10      	pop	{r4, pc}
 800ba1a:	46c0      	nop			; (mov r8, r8)
 800ba1c:	2000042d 	.word	0x2000042d

0800ba20 <__sfp_lock_release>:
 800ba20:	b510      	push	{r4, lr}
 800ba22:	4802      	ldr	r0, [pc, #8]	; (800ba2c <__sfp_lock_release+0xc>)
 800ba24:	f000 f8c6 	bl	800bbb4 <__retarget_lock_release_recursive>
 800ba28:	bd10      	pop	{r4, pc}
 800ba2a:	46c0      	nop			; (mov r8, r8)
 800ba2c:	2000042d 	.word	0x2000042d

0800ba30 <__sinit_lock_acquire>:
 800ba30:	b510      	push	{r4, lr}
 800ba32:	4802      	ldr	r0, [pc, #8]	; (800ba3c <__sinit_lock_acquire+0xc>)
 800ba34:	f000 f8bd 	bl	800bbb2 <__retarget_lock_acquire_recursive>
 800ba38:	bd10      	pop	{r4, pc}
 800ba3a:	46c0      	nop			; (mov r8, r8)
 800ba3c:	2000042e 	.word	0x2000042e

0800ba40 <__sinit_lock_release>:
 800ba40:	b510      	push	{r4, lr}
 800ba42:	4802      	ldr	r0, [pc, #8]	; (800ba4c <__sinit_lock_release+0xc>)
 800ba44:	f000 f8b6 	bl	800bbb4 <__retarget_lock_release_recursive>
 800ba48:	bd10      	pop	{r4, pc}
 800ba4a:	46c0      	nop			; (mov r8, r8)
 800ba4c:	2000042e 	.word	0x2000042e

0800ba50 <__sinit>:
 800ba50:	b513      	push	{r0, r1, r4, lr}
 800ba52:	0004      	movs	r4, r0
 800ba54:	f7ff ffec 	bl	800ba30 <__sinit_lock_acquire>
 800ba58:	69a3      	ldr	r3, [r4, #24]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d002      	beq.n	800ba64 <__sinit+0x14>
 800ba5e:	f7ff ffef 	bl	800ba40 <__sinit_lock_release>
 800ba62:	bd13      	pop	{r0, r1, r4, pc}
 800ba64:	64a3      	str	r3, [r4, #72]	; 0x48
 800ba66:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ba68:	6523      	str	r3, [r4, #80]	; 0x50
 800ba6a:	4b13      	ldr	r3, [pc, #76]	; (800bab8 <__sinit+0x68>)
 800ba6c:	4a13      	ldr	r2, [pc, #76]	; (800babc <__sinit+0x6c>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	62a2      	str	r2, [r4, #40]	; 0x28
 800ba72:	9301      	str	r3, [sp, #4]
 800ba74:	42a3      	cmp	r3, r4
 800ba76:	d101      	bne.n	800ba7c <__sinit+0x2c>
 800ba78:	2301      	movs	r3, #1
 800ba7a:	61a3      	str	r3, [r4, #24]
 800ba7c:	0020      	movs	r0, r4
 800ba7e:	f000 f81f 	bl	800bac0 <__sfp>
 800ba82:	6060      	str	r0, [r4, #4]
 800ba84:	0020      	movs	r0, r4
 800ba86:	f000 f81b 	bl	800bac0 <__sfp>
 800ba8a:	60a0      	str	r0, [r4, #8]
 800ba8c:	0020      	movs	r0, r4
 800ba8e:	f000 f817 	bl	800bac0 <__sfp>
 800ba92:	2200      	movs	r2, #0
 800ba94:	2104      	movs	r1, #4
 800ba96:	60e0      	str	r0, [r4, #12]
 800ba98:	6860      	ldr	r0, [r4, #4]
 800ba9a:	f7ff ff77 	bl	800b98c <std>
 800ba9e:	2201      	movs	r2, #1
 800baa0:	2109      	movs	r1, #9
 800baa2:	68a0      	ldr	r0, [r4, #8]
 800baa4:	f7ff ff72 	bl	800b98c <std>
 800baa8:	2202      	movs	r2, #2
 800baaa:	2112      	movs	r1, #18
 800baac:	68e0      	ldr	r0, [r4, #12]
 800baae:	f7ff ff6d 	bl	800b98c <std>
 800bab2:	2301      	movs	r3, #1
 800bab4:	61a3      	str	r3, [r4, #24]
 800bab6:	e7d2      	b.n	800ba5e <__sinit+0xe>
 800bab8:	0800c400 	.word	0x0800c400
 800babc:	0800b9d5 	.word	0x0800b9d5

0800bac0 <__sfp>:
 800bac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bac2:	0007      	movs	r7, r0
 800bac4:	f7ff ffa4 	bl	800ba10 <__sfp_lock_acquire>
 800bac8:	4b1f      	ldr	r3, [pc, #124]	; (800bb48 <__sfp+0x88>)
 800baca:	681e      	ldr	r6, [r3, #0]
 800bacc:	69b3      	ldr	r3, [r6, #24]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d102      	bne.n	800bad8 <__sfp+0x18>
 800bad2:	0030      	movs	r0, r6
 800bad4:	f7ff ffbc 	bl	800ba50 <__sinit>
 800bad8:	3648      	adds	r6, #72	; 0x48
 800bada:	68b4      	ldr	r4, [r6, #8]
 800badc:	6873      	ldr	r3, [r6, #4]
 800bade:	3b01      	subs	r3, #1
 800bae0:	d504      	bpl.n	800baec <__sfp+0x2c>
 800bae2:	6833      	ldr	r3, [r6, #0]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d022      	beq.n	800bb2e <__sfp+0x6e>
 800bae8:	6836      	ldr	r6, [r6, #0]
 800baea:	e7f6      	b.n	800bada <__sfp+0x1a>
 800baec:	220c      	movs	r2, #12
 800baee:	5ea5      	ldrsh	r5, [r4, r2]
 800baf0:	2d00      	cmp	r5, #0
 800baf2:	d11a      	bne.n	800bb2a <__sfp+0x6a>
 800baf4:	0020      	movs	r0, r4
 800baf6:	4b15      	ldr	r3, [pc, #84]	; (800bb4c <__sfp+0x8c>)
 800baf8:	3058      	adds	r0, #88	; 0x58
 800bafa:	60e3      	str	r3, [r4, #12]
 800bafc:	6665      	str	r5, [r4, #100]	; 0x64
 800bafe:	f000 f857 	bl	800bbb0 <__retarget_lock_init_recursive>
 800bb02:	f7ff ff8d 	bl	800ba20 <__sfp_lock_release>
 800bb06:	0020      	movs	r0, r4
 800bb08:	2208      	movs	r2, #8
 800bb0a:	0029      	movs	r1, r5
 800bb0c:	6025      	str	r5, [r4, #0]
 800bb0e:	60a5      	str	r5, [r4, #8]
 800bb10:	6065      	str	r5, [r4, #4]
 800bb12:	6125      	str	r5, [r4, #16]
 800bb14:	6165      	str	r5, [r4, #20]
 800bb16:	61a5      	str	r5, [r4, #24]
 800bb18:	305c      	adds	r0, #92	; 0x5c
 800bb1a:	f7fb fa1d 	bl	8006f58 <memset>
 800bb1e:	6365      	str	r5, [r4, #52]	; 0x34
 800bb20:	63a5      	str	r5, [r4, #56]	; 0x38
 800bb22:	64a5      	str	r5, [r4, #72]	; 0x48
 800bb24:	64e5      	str	r5, [r4, #76]	; 0x4c
 800bb26:	0020      	movs	r0, r4
 800bb28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb2a:	3468      	adds	r4, #104	; 0x68
 800bb2c:	e7d7      	b.n	800bade <__sfp+0x1e>
 800bb2e:	2104      	movs	r1, #4
 800bb30:	0038      	movs	r0, r7
 800bb32:	f7ff ff57 	bl	800b9e4 <__sfmoreglue>
 800bb36:	1e04      	subs	r4, r0, #0
 800bb38:	6030      	str	r0, [r6, #0]
 800bb3a:	d1d5      	bne.n	800bae8 <__sfp+0x28>
 800bb3c:	f7ff ff70 	bl	800ba20 <__sfp_lock_release>
 800bb40:	230c      	movs	r3, #12
 800bb42:	603b      	str	r3, [r7, #0]
 800bb44:	e7ef      	b.n	800bb26 <__sfp+0x66>
 800bb46:	46c0      	nop			; (mov r8, r8)
 800bb48:	0800c400 	.word	0x0800c400
 800bb4c:	ffff0001 	.word	0xffff0001

0800bb50 <fiprintf>:
 800bb50:	b40e      	push	{r1, r2, r3}
 800bb52:	b503      	push	{r0, r1, lr}
 800bb54:	0001      	movs	r1, r0
 800bb56:	ab03      	add	r3, sp, #12
 800bb58:	4804      	ldr	r0, [pc, #16]	; (800bb6c <fiprintf+0x1c>)
 800bb5a:	cb04      	ldmia	r3!, {r2}
 800bb5c:	6800      	ldr	r0, [r0, #0]
 800bb5e:	9301      	str	r3, [sp, #4]
 800bb60:	f000 f8a2 	bl	800bca8 <_vfiprintf_r>
 800bb64:	b002      	add	sp, #8
 800bb66:	bc08      	pop	{r3}
 800bb68:	b003      	add	sp, #12
 800bb6a:	4718      	bx	r3
 800bb6c:	20000014 	.word	0x20000014

0800bb70 <_fwalk_reent>:
 800bb70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb72:	0004      	movs	r4, r0
 800bb74:	0006      	movs	r6, r0
 800bb76:	2700      	movs	r7, #0
 800bb78:	9101      	str	r1, [sp, #4]
 800bb7a:	3448      	adds	r4, #72	; 0x48
 800bb7c:	6863      	ldr	r3, [r4, #4]
 800bb7e:	68a5      	ldr	r5, [r4, #8]
 800bb80:	9300      	str	r3, [sp, #0]
 800bb82:	9b00      	ldr	r3, [sp, #0]
 800bb84:	3b01      	subs	r3, #1
 800bb86:	9300      	str	r3, [sp, #0]
 800bb88:	d504      	bpl.n	800bb94 <_fwalk_reent+0x24>
 800bb8a:	6824      	ldr	r4, [r4, #0]
 800bb8c:	2c00      	cmp	r4, #0
 800bb8e:	d1f5      	bne.n	800bb7c <_fwalk_reent+0xc>
 800bb90:	0038      	movs	r0, r7
 800bb92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bb94:	89ab      	ldrh	r3, [r5, #12]
 800bb96:	2b01      	cmp	r3, #1
 800bb98:	d908      	bls.n	800bbac <_fwalk_reent+0x3c>
 800bb9a:	220e      	movs	r2, #14
 800bb9c:	5eab      	ldrsh	r3, [r5, r2]
 800bb9e:	3301      	adds	r3, #1
 800bba0:	d004      	beq.n	800bbac <_fwalk_reent+0x3c>
 800bba2:	0029      	movs	r1, r5
 800bba4:	0030      	movs	r0, r6
 800bba6:	9b01      	ldr	r3, [sp, #4]
 800bba8:	4798      	blx	r3
 800bbaa:	4307      	orrs	r7, r0
 800bbac:	3568      	adds	r5, #104	; 0x68
 800bbae:	e7e8      	b.n	800bb82 <_fwalk_reent+0x12>

0800bbb0 <__retarget_lock_init_recursive>:
 800bbb0:	4770      	bx	lr

0800bbb2 <__retarget_lock_acquire_recursive>:
 800bbb2:	4770      	bx	lr

0800bbb4 <__retarget_lock_release_recursive>:
 800bbb4:	4770      	bx	lr

0800bbb6 <memmove>:
 800bbb6:	b510      	push	{r4, lr}
 800bbb8:	4288      	cmp	r0, r1
 800bbba:	d902      	bls.n	800bbc2 <memmove+0xc>
 800bbbc:	188b      	adds	r3, r1, r2
 800bbbe:	4298      	cmp	r0, r3
 800bbc0:	d303      	bcc.n	800bbca <memmove+0x14>
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	e007      	b.n	800bbd6 <memmove+0x20>
 800bbc6:	5c8b      	ldrb	r3, [r1, r2]
 800bbc8:	5483      	strb	r3, [r0, r2]
 800bbca:	3a01      	subs	r2, #1
 800bbcc:	d2fb      	bcs.n	800bbc6 <memmove+0x10>
 800bbce:	bd10      	pop	{r4, pc}
 800bbd0:	5ccc      	ldrb	r4, [r1, r3]
 800bbd2:	54c4      	strb	r4, [r0, r3]
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d1fa      	bne.n	800bbd0 <memmove+0x1a>
 800bbda:	e7f8      	b.n	800bbce <memmove+0x18>

0800bbdc <__malloc_lock>:
 800bbdc:	b510      	push	{r4, lr}
 800bbde:	4802      	ldr	r0, [pc, #8]	; (800bbe8 <__malloc_lock+0xc>)
 800bbe0:	f7ff ffe7 	bl	800bbb2 <__retarget_lock_acquire_recursive>
 800bbe4:	bd10      	pop	{r4, pc}
 800bbe6:	46c0      	nop			; (mov r8, r8)
 800bbe8:	2000042c 	.word	0x2000042c

0800bbec <__malloc_unlock>:
 800bbec:	b510      	push	{r4, lr}
 800bbee:	4802      	ldr	r0, [pc, #8]	; (800bbf8 <__malloc_unlock+0xc>)
 800bbf0:	f7ff ffe0 	bl	800bbb4 <__retarget_lock_release_recursive>
 800bbf4:	bd10      	pop	{r4, pc}
 800bbf6:	46c0      	nop			; (mov r8, r8)
 800bbf8:	2000042c 	.word	0x2000042c

0800bbfc <_realloc_r>:
 800bbfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbfe:	0007      	movs	r7, r0
 800bc00:	000e      	movs	r6, r1
 800bc02:	0014      	movs	r4, r2
 800bc04:	2900      	cmp	r1, #0
 800bc06:	d105      	bne.n	800bc14 <_realloc_r+0x18>
 800bc08:	0011      	movs	r1, r2
 800bc0a:	f7fe ff6d 	bl	800aae8 <_malloc_r>
 800bc0e:	0005      	movs	r5, r0
 800bc10:	0028      	movs	r0, r5
 800bc12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bc14:	2a00      	cmp	r2, #0
 800bc16:	d103      	bne.n	800bc20 <_realloc_r+0x24>
 800bc18:	f7fe fefa 	bl	800aa10 <_free_r>
 800bc1c:	0025      	movs	r5, r4
 800bc1e:	e7f7      	b.n	800bc10 <_realloc_r+0x14>
 800bc20:	f000 fabe 	bl	800c1a0 <_malloc_usable_size_r>
 800bc24:	9001      	str	r0, [sp, #4]
 800bc26:	4284      	cmp	r4, r0
 800bc28:	d803      	bhi.n	800bc32 <_realloc_r+0x36>
 800bc2a:	0035      	movs	r5, r6
 800bc2c:	0843      	lsrs	r3, r0, #1
 800bc2e:	42a3      	cmp	r3, r4
 800bc30:	d3ee      	bcc.n	800bc10 <_realloc_r+0x14>
 800bc32:	0021      	movs	r1, r4
 800bc34:	0038      	movs	r0, r7
 800bc36:	f7fe ff57 	bl	800aae8 <_malloc_r>
 800bc3a:	1e05      	subs	r5, r0, #0
 800bc3c:	d0e8      	beq.n	800bc10 <_realloc_r+0x14>
 800bc3e:	9b01      	ldr	r3, [sp, #4]
 800bc40:	0022      	movs	r2, r4
 800bc42:	429c      	cmp	r4, r3
 800bc44:	d900      	bls.n	800bc48 <_realloc_r+0x4c>
 800bc46:	001a      	movs	r2, r3
 800bc48:	0031      	movs	r1, r6
 800bc4a:	0028      	movs	r0, r5
 800bc4c:	f7fe f9e1 	bl	800a012 <memcpy>
 800bc50:	0031      	movs	r1, r6
 800bc52:	0038      	movs	r0, r7
 800bc54:	f7fe fedc 	bl	800aa10 <_free_r>
 800bc58:	e7da      	b.n	800bc10 <_realloc_r+0x14>

0800bc5a <__sfputc_r>:
 800bc5a:	6893      	ldr	r3, [r2, #8]
 800bc5c:	b510      	push	{r4, lr}
 800bc5e:	3b01      	subs	r3, #1
 800bc60:	6093      	str	r3, [r2, #8]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	da04      	bge.n	800bc70 <__sfputc_r+0x16>
 800bc66:	6994      	ldr	r4, [r2, #24]
 800bc68:	42a3      	cmp	r3, r4
 800bc6a:	db07      	blt.n	800bc7c <__sfputc_r+0x22>
 800bc6c:	290a      	cmp	r1, #10
 800bc6e:	d005      	beq.n	800bc7c <__sfputc_r+0x22>
 800bc70:	6813      	ldr	r3, [r2, #0]
 800bc72:	1c58      	adds	r0, r3, #1
 800bc74:	6010      	str	r0, [r2, #0]
 800bc76:	7019      	strb	r1, [r3, #0]
 800bc78:	0008      	movs	r0, r1
 800bc7a:	bd10      	pop	{r4, pc}
 800bc7c:	f000 f94e 	bl	800bf1c <__swbuf_r>
 800bc80:	0001      	movs	r1, r0
 800bc82:	e7f9      	b.n	800bc78 <__sfputc_r+0x1e>

0800bc84 <__sfputs_r>:
 800bc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc86:	0006      	movs	r6, r0
 800bc88:	000f      	movs	r7, r1
 800bc8a:	0014      	movs	r4, r2
 800bc8c:	18d5      	adds	r5, r2, r3
 800bc8e:	42ac      	cmp	r4, r5
 800bc90:	d101      	bne.n	800bc96 <__sfputs_r+0x12>
 800bc92:	2000      	movs	r0, #0
 800bc94:	e007      	b.n	800bca6 <__sfputs_r+0x22>
 800bc96:	7821      	ldrb	r1, [r4, #0]
 800bc98:	003a      	movs	r2, r7
 800bc9a:	0030      	movs	r0, r6
 800bc9c:	f7ff ffdd 	bl	800bc5a <__sfputc_r>
 800bca0:	3401      	adds	r4, #1
 800bca2:	1c43      	adds	r3, r0, #1
 800bca4:	d1f3      	bne.n	800bc8e <__sfputs_r+0xa>
 800bca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bca8 <_vfiprintf_r>:
 800bca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcaa:	b0a1      	sub	sp, #132	; 0x84
 800bcac:	0006      	movs	r6, r0
 800bcae:	000c      	movs	r4, r1
 800bcb0:	001f      	movs	r7, r3
 800bcb2:	9203      	str	r2, [sp, #12]
 800bcb4:	2800      	cmp	r0, #0
 800bcb6:	d004      	beq.n	800bcc2 <_vfiprintf_r+0x1a>
 800bcb8:	6983      	ldr	r3, [r0, #24]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d101      	bne.n	800bcc2 <_vfiprintf_r+0x1a>
 800bcbe:	f7ff fec7 	bl	800ba50 <__sinit>
 800bcc2:	4b8e      	ldr	r3, [pc, #568]	; (800befc <_vfiprintf_r+0x254>)
 800bcc4:	429c      	cmp	r4, r3
 800bcc6:	d11c      	bne.n	800bd02 <_vfiprintf_r+0x5a>
 800bcc8:	6874      	ldr	r4, [r6, #4]
 800bcca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bccc:	07db      	lsls	r3, r3, #31
 800bcce:	d405      	bmi.n	800bcdc <_vfiprintf_r+0x34>
 800bcd0:	89a3      	ldrh	r3, [r4, #12]
 800bcd2:	059b      	lsls	r3, r3, #22
 800bcd4:	d402      	bmi.n	800bcdc <_vfiprintf_r+0x34>
 800bcd6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcd8:	f7ff ff6b 	bl	800bbb2 <__retarget_lock_acquire_recursive>
 800bcdc:	89a3      	ldrh	r3, [r4, #12]
 800bcde:	071b      	lsls	r3, r3, #28
 800bce0:	d502      	bpl.n	800bce8 <_vfiprintf_r+0x40>
 800bce2:	6923      	ldr	r3, [r4, #16]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d11d      	bne.n	800bd24 <_vfiprintf_r+0x7c>
 800bce8:	0021      	movs	r1, r4
 800bcea:	0030      	movs	r0, r6
 800bcec:	f000 f96c 	bl	800bfc8 <__swsetup_r>
 800bcf0:	2800      	cmp	r0, #0
 800bcf2:	d017      	beq.n	800bd24 <_vfiprintf_r+0x7c>
 800bcf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bcf6:	07db      	lsls	r3, r3, #31
 800bcf8:	d50d      	bpl.n	800bd16 <_vfiprintf_r+0x6e>
 800bcfa:	2001      	movs	r0, #1
 800bcfc:	4240      	negs	r0, r0
 800bcfe:	b021      	add	sp, #132	; 0x84
 800bd00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd02:	4b7f      	ldr	r3, [pc, #508]	; (800bf00 <_vfiprintf_r+0x258>)
 800bd04:	429c      	cmp	r4, r3
 800bd06:	d101      	bne.n	800bd0c <_vfiprintf_r+0x64>
 800bd08:	68b4      	ldr	r4, [r6, #8]
 800bd0a:	e7de      	b.n	800bcca <_vfiprintf_r+0x22>
 800bd0c:	4b7d      	ldr	r3, [pc, #500]	; (800bf04 <_vfiprintf_r+0x25c>)
 800bd0e:	429c      	cmp	r4, r3
 800bd10:	d1db      	bne.n	800bcca <_vfiprintf_r+0x22>
 800bd12:	68f4      	ldr	r4, [r6, #12]
 800bd14:	e7d9      	b.n	800bcca <_vfiprintf_r+0x22>
 800bd16:	89a3      	ldrh	r3, [r4, #12]
 800bd18:	059b      	lsls	r3, r3, #22
 800bd1a:	d4ee      	bmi.n	800bcfa <_vfiprintf_r+0x52>
 800bd1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd1e:	f7ff ff49 	bl	800bbb4 <__retarget_lock_release_recursive>
 800bd22:	e7ea      	b.n	800bcfa <_vfiprintf_r+0x52>
 800bd24:	2300      	movs	r3, #0
 800bd26:	ad08      	add	r5, sp, #32
 800bd28:	616b      	str	r3, [r5, #20]
 800bd2a:	3320      	adds	r3, #32
 800bd2c:	766b      	strb	r3, [r5, #25]
 800bd2e:	3310      	adds	r3, #16
 800bd30:	76ab      	strb	r3, [r5, #26]
 800bd32:	9707      	str	r7, [sp, #28]
 800bd34:	9f03      	ldr	r7, [sp, #12]
 800bd36:	783b      	ldrb	r3, [r7, #0]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d001      	beq.n	800bd40 <_vfiprintf_r+0x98>
 800bd3c:	2b25      	cmp	r3, #37	; 0x25
 800bd3e:	d14e      	bne.n	800bdde <_vfiprintf_r+0x136>
 800bd40:	9b03      	ldr	r3, [sp, #12]
 800bd42:	1afb      	subs	r3, r7, r3
 800bd44:	9305      	str	r3, [sp, #20]
 800bd46:	9b03      	ldr	r3, [sp, #12]
 800bd48:	429f      	cmp	r7, r3
 800bd4a:	d00d      	beq.n	800bd68 <_vfiprintf_r+0xc0>
 800bd4c:	9b05      	ldr	r3, [sp, #20]
 800bd4e:	0021      	movs	r1, r4
 800bd50:	0030      	movs	r0, r6
 800bd52:	9a03      	ldr	r2, [sp, #12]
 800bd54:	f7ff ff96 	bl	800bc84 <__sfputs_r>
 800bd58:	1c43      	adds	r3, r0, #1
 800bd5a:	d100      	bne.n	800bd5e <_vfiprintf_r+0xb6>
 800bd5c:	e0b5      	b.n	800beca <_vfiprintf_r+0x222>
 800bd5e:	696a      	ldr	r2, [r5, #20]
 800bd60:	9b05      	ldr	r3, [sp, #20]
 800bd62:	4694      	mov	ip, r2
 800bd64:	4463      	add	r3, ip
 800bd66:	616b      	str	r3, [r5, #20]
 800bd68:	783b      	ldrb	r3, [r7, #0]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d100      	bne.n	800bd70 <_vfiprintf_r+0xc8>
 800bd6e:	e0ac      	b.n	800beca <_vfiprintf_r+0x222>
 800bd70:	2201      	movs	r2, #1
 800bd72:	1c7b      	adds	r3, r7, #1
 800bd74:	9303      	str	r3, [sp, #12]
 800bd76:	2300      	movs	r3, #0
 800bd78:	4252      	negs	r2, r2
 800bd7a:	606a      	str	r2, [r5, #4]
 800bd7c:	a904      	add	r1, sp, #16
 800bd7e:	3254      	adds	r2, #84	; 0x54
 800bd80:	1852      	adds	r2, r2, r1
 800bd82:	602b      	str	r3, [r5, #0]
 800bd84:	60eb      	str	r3, [r5, #12]
 800bd86:	60ab      	str	r3, [r5, #8]
 800bd88:	7013      	strb	r3, [r2, #0]
 800bd8a:	65ab      	str	r3, [r5, #88]	; 0x58
 800bd8c:	9b03      	ldr	r3, [sp, #12]
 800bd8e:	2205      	movs	r2, #5
 800bd90:	7819      	ldrb	r1, [r3, #0]
 800bd92:	485d      	ldr	r0, [pc, #372]	; (800bf08 <_vfiprintf_r+0x260>)
 800bd94:	f7fe f932 	bl	8009ffc <memchr>
 800bd98:	9b03      	ldr	r3, [sp, #12]
 800bd9a:	1c5f      	adds	r7, r3, #1
 800bd9c:	2800      	cmp	r0, #0
 800bd9e:	d120      	bne.n	800bde2 <_vfiprintf_r+0x13a>
 800bda0:	682a      	ldr	r2, [r5, #0]
 800bda2:	06d3      	lsls	r3, r2, #27
 800bda4:	d504      	bpl.n	800bdb0 <_vfiprintf_r+0x108>
 800bda6:	2353      	movs	r3, #83	; 0x53
 800bda8:	a904      	add	r1, sp, #16
 800bdaa:	185b      	adds	r3, r3, r1
 800bdac:	2120      	movs	r1, #32
 800bdae:	7019      	strb	r1, [r3, #0]
 800bdb0:	0713      	lsls	r3, r2, #28
 800bdb2:	d504      	bpl.n	800bdbe <_vfiprintf_r+0x116>
 800bdb4:	2353      	movs	r3, #83	; 0x53
 800bdb6:	a904      	add	r1, sp, #16
 800bdb8:	185b      	adds	r3, r3, r1
 800bdba:	212b      	movs	r1, #43	; 0x2b
 800bdbc:	7019      	strb	r1, [r3, #0]
 800bdbe:	9b03      	ldr	r3, [sp, #12]
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	2b2a      	cmp	r3, #42	; 0x2a
 800bdc4:	d016      	beq.n	800bdf4 <_vfiprintf_r+0x14c>
 800bdc6:	2100      	movs	r1, #0
 800bdc8:	68eb      	ldr	r3, [r5, #12]
 800bdca:	9f03      	ldr	r7, [sp, #12]
 800bdcc:	783a      	ldrb	r2, [r7, #0]
 800bdce:	1c78      	adds	r0, r7, #1
 800bdd0:	3a30      	subs	r2, #48	; 0x30
 800bdd2:	4684      	mov	ip, r0
 800bdd4:	2a09      	cmp	r2, #9
 800bdd6:	d94f      	bls.n	800be78 <_vfiprintf_r+0x1d0>
 800bdd8:	2900      	cmp	r1, #0
 800bdda:	d111      	bne.n	800be00 <_vfiprintf_r+0x158>
 800bddc:	e017      	b.n	800be0e <_vfiprintf_r+0x166>
 800bdde:	3701      	adds	r7, #1
 800bde0:	e7a9      	b.n	800bd36 <_vfiprintf_r+0x8e>
 800bde2:	4b49      	ldr	r3, [pc, #292]	; (800bf08 <_vfiprintf_r+0x260>)
 800bde4:	682a      	ldr	r2, [r5, #0]
 800bde6:	1ac0      	subs	r0, r0, r3
 800bde8:	2301      	movs	r3, #1
 800bdea:	4083      	lsls	r3, r0
 800bdec:	4313      	orrs	r3, r2
 800bdee:	602b      	str	r3, [r5, #0]
 800bdf0:	9703      	str	r7, [sp, #12]
 800bdf2:	e7cb      	b.n	800bd8c <_vfiprintf_r+0xe4>
 800bdf4:	9b07      	ldr	r3, [sp, #28]
 800bdf6:	1d19      	adds	r1, r3, #4
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	9107      	str	r1, [sp, #28]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	db01      	blt.n	800be04 <_vfiprintf_r+0x15c>
 800be00:	930b      	str	r3, [sp, #44]	; 0x2c
 800be02:	e004      	b.n	800be0e <_vfiprintf_r+0x166>
 800be04:	425b      	negs	r3, r3
 800be06:	60eb      	str	r3, [r5, #12]
 800be08:	2302      	movs	r3, #2
 800be0a:	4313      	orrs	r3, r2
 800be0c:	602b      	str	r3, [r5, #0]
 800be0e:	783b      	ldrb	r3, [r7, #0]
 800be10:	2b2e      	cmp	r3, #46	; 0x2e
 800be12:	d10a      	bne.n	800be2a <_vfiprintf_r+0x182>
 800be14:	787b      	ldrb	r3, [r7, #1]
 800be16:	2b2a      	cmp	r3, #42	; 0x2a
 800be18:	d137      	bne.n	800be8a <_vfiprintf_r+0x1e2>
 800be1a:	9b07      	ldr	r3, [sp, #28]
 800be1c:	3702      	adds	r7, #2
 800be1e:	1d1a      	adds	r2, r3, #4
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	9207      	str	r2, [sp, #28]
 800be24:	2b00      	cmp	r3, #0
 800be26:	db2d      	blt.n	800be84 <_vfiprintf_r+0x1dc>
 800be28:	9309      	str	r3, [sp, #36]	; 0x24
 800be2a:	2203      	movs	r2, #3
 800be2c:	7839      	ldrb	r1, [r7, #0]
 800be2e:	4837      	ldr	r0, [pc, #220]	; (800bf0c <_vfiprintf_r+0x264>)
 800be30:	f7fe f8e4 	bl	8009ffc <memchr>
 800be34:	2800      	cmp	r0, #0
 800be36:	d007      	beq.n	800be48 <_vfiprintf_r+0x1a0>
 800be38:	4b34      	ldr	r3, [pc, #208]	; (800bf0c <_vfiprintf_r+0x264>)
 800be3a:	682a      	ldr	r2, [r5, #0]
 800be3c:	1ac0      	subs	r0, r0, r3
 800be3e:	2340      	movs	r3, #64	; 0x40
 800be40:	4083      	lsls	r3, r0
 800be42:	4313      	orrs	r3, r2
 800be44:	3701      	adds	r7, #1
 800be46:	602b      	str	r3, [r5, #0]
 800be48:	7839      	ldrb	r1, [r7, #0]
 800be4a:	1c7b      	adds	r3, r7, #1
 800be4c:	2206      	movs	r2, #6
 800be4e:	4830      	ldr	r0, [pc, #192]	; (800bf10 <_vfiprintf_r+0x268>)
 800be50:	9303      	str	r3, [sp, #12]
 800be52:	7629      	strb	r1, [r5, #24]
 800be54:	f7fe f8d2 	bl	8009ffc <memchr>
 800be58:	2800      	cmp	r0, #0
 800be5a:	d045      	beq.n	800bee8 <_vfiprintf_r+0x240>
 800be5c:	4b2d      	ldr	r3, [pc, #180]	; (800bf14 <_vfiprintf_r+0x26c>)
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d127      	bne.n	800beb2 <_vfiprintf_r+0x20a>
 800be62:	2207      	movs	r2, #7
 800be64:	9b07      	ldr	r3, [sp, #28]
 800be66:	3307      	adds	r3, #7
 800be68:	4393      	bics	r3, r2
 800be6a:	3308      	adds	r3, #8
 800be6c:	9307      	str	r3, [sp, #28]
 800be6e:	696b      	ldr	r3, [r5, #20]
 800be70:	9a04      	ldr	r2, [sp, #16]
 800be72:	189b      	adds	r3, r3, r2
 800be74:	616b      	str	r3, [r5, #20]
 800be76:	e75d      	b.n	800bd34 <_vfiprintf_r+0x8c>
 800be78:	210a      	movs	r1, #10
 800be7a:	434b      	muls	r3, r1
 800be7c:	4667      	mov	r7, ip
 800be7e:	189b      	adds	r3, r3, r2
 800be80:	3909      	subs	r1, #9
 800be82:	e7a3      	b.n	800bdcc <_vfiprintf_r+0x124>
 800be84:	2301      	movs	r3, #1
 800be86:	425b      	negs	r3, r3
 800be88:	e7ce      	b.n	800be28 <_vfiprintf_r+0x180>
 800be8a:	2300      	movs	r3, #0
 800be8c:	001a      	movs	r2, r3
 800be8e:	3701      	adds	r7, #1
 800be90:	606b      	str	r3, [r5, #4]
 800be92:	7839      	ldrb	r1, [r7, #0]
 800be94:	1c78      	adds	r0, r7, #1
 800be96:	3930      	subs	r1, #48	; 0x30
 800be98:	4684      	mov	ip, r0
 800be9a:	2909      	cmp	r1, #9
 800be9c:	d903      	bls.n	800bea6 <_vfiprintf_r+0x1fe>
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d0c3      	beq.n	800be2a <_vfiprintf_r+0x182>
 800bea2:	9209      	str	r2, [sp, #36]	; 0x24
 800bea4:	e7c1      	b.n	800be2a <_vfiprintf_r+0x182>
 800bea6:	230a      	movs	r3, #10
 800bea8:	435a      	muls	r2, r3
 800beaa:	4667      	mov	r7, ip
 800beac:	1852      	adds	r2, r2, r1
 800beae:	3b09      	subs	r3, #9
 800beb0:	e7ef      	b.n	800be92 <_vfiprintf_r+0x1ea>
 800beb2:	ab07      	add	r3, sp, #28
 800beb4:	9300      	str	r3, [sp, #0]
 800beb6:	0022      	movs	r2, r4
 800beb8:	0029      	movs	r1, r5
 800beba:	0030      	movs	r0, r6
 800bebc:	4b16      	ldr	r3, [pc, #88]	; (800bf18 <_vfiprintf_r+0x270>)
 800bebe:	f7fb f8fd 	bl	80070bc <_printf_float>
 800bec2:	9004      	str	r0, [sp, #16]
 800bec4:	9b04      	ldr	r3, [sp, #16]
 800bec6:	3301      	adds	r3, #1
 800bec8:	d1d1      	bne.n	800be6e <_vfiprintf_r+0x1c6>
 800beca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800becc:	07db      	lsls	r3, r3, #31
 800bece:	d405      	bmi.n	800bedc <_vfiprintf_r+0x234>
 800bed0:	89a3      	ldrh	r3, [r4, #12]
 800bed2:	059b      	lsls	r3, r3, #22
 800bed4:	d402      	bmi.n	800bedc <_vfiprintf_r+0x234>
 800bed6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bed8:	f7ff fe6c 	bl	800bbb4 <__retarget_lock_release_recursive>
 800bedc:	89a3      	ldrh	r3, [r4, #12]
 800bede:	065b      	lsls	r3, r3, #25
 800bee0:	d500      	bpl.n	800bee4 <_vfiprintf_r+0x23c>
 800bee2:	e70a      	b.n	800bcfa <_vfiprintf_r+0x52>
 800bee4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bee6:	e70a      	b.n	800bcfe <_vfiprintf_r+0x56>
 800bee8:	ab07      	add	r3, sp, #28
 800beea:	9300      	str	r3, [sp, #0]
 800beec:	0022      	movs	r2, r4
 800beee:	0029      	movs	r1, r5
 800bef0:	0030      	movs	r0, r6
 800bef2:	4b09      	ldr	r3, [pc, #36]	; (800bf18 <_vfiprintf_r+0x270>)
 800bef4:	f7fb fb94 	bl	8007620 <_printf_i>
 800bef8:	e7e3      	b.n	800bec2 <_vfiprintf_r+0x21a>
 800befa:	46c0      	nop			; (mov r8, r8)
 800befc:	0800c87c 	.word	0x0800c87c
 800bf00:	0800c89c 	.word	0x0800c89c
 800bf04:	0800c85c 	.word	0x0800c85c
 800bf08:	0800c7f4 	.word	0x0800c7f4
 800bf0c:	0800c7fa 	.word	0x0800c7fa
 800bf10:	0800c7fe 	.word	0x0800c7fe
 800bf14:	080070bd 	.word	0x080070bd
 800bf18:	0800bc85 	.word	0x0800bc85

0800bf1c <__swbuf_r>:
 800bf1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf1e:	0005      	movs	r5, r0
 800bf20:	000e      	movs	r6, r1
 800bf22:	0014      	movs	r4, r2
 800bf24:	2800      	cmp	r0, #0
 800bf26:	d004      	beq.n	800bf32 <__swbuf_r+0x16>
 800bf28:	6983      	ldr	r3, [r0, #24]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d101      	bne.n	800bf32 <__swbuf_r+0x16>
 800bf2e:	f7ff fd8f 	bl	800ba50 <__sinit>
 800bf32:	4b22      	ldr	r3, [pc, #136]	; (800bfbc <__swbuf_r+0xa0>)
 800bf34:	429c      	cmp	r4, r3
 800bf36:	d12e      	bne.n	800bf96 <__swbuf_r+0x7a>
 800bf38:	686c      	ldr	r4, [r5, #4]
 800bf3a:	69a3      	ldr	r3, [r4, #24]
 800bf3c:	60a3      	str	r3, [r4, #8]
 800bf3e:	89a3      	ldrh	r3, [r4, #12]
 800bf40:	071b      	lsls	r3, r3, #28
 800bf42:	d532      	bpl.n	800bfaa <__swbuf_r+0x8e>
 800bf44:	6923      	ldr	r3, [r4, #16]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d02f      	beq.n	800bfaa <__swbuf_r+0x8e>
 800bf4a:	6823      	ldr	r3, [r4, #0]
 800bf4c:	6922      	ldr	r2, [r4, #16]
 800bf4e:	b2f7      	uxtb	r7, r6
 800bf50:	1a98      	subs	r0, r3, r2
 800bf52:	6963      	ldr	r3, [r4, #20]
 800bf54:	b2f6      	uxtb	r6, r6
 800bf56:	4283      	cmp	r3, r0
 800bf58:	dc05      	bgt.n	800bf66 <__swbuf_r+0x4a>
 800bf5a:	0021      	movs	r1, r4
 800bf5c:	0028      	movs	r0, r5
 800bf5e:	f7ff fcd5 	bl	800b90c <_fflush_r>
 800bf62:	2800      	cmp	r0, #0
 800bf64:	d127      	bne.n	800bfb6 <__swbuf_r+0x9a>
 800bf66:	68a3      	ldr	r3, [r4, #8]
 800bf68:	3001      	adds	r0, #1
 800bf6a:	3b01      	subs	r3, #1
 800bf6c:	60a3      	str	r3, [r4, #8]
 800bf6e:	6823      	ldr	r3, [r4, #0]
 800bf70:	1c5a      	adds	r2, r3, #1
 800bf72:	6022      	str	r2, [r4, #0]
 800bf74:	701f      	strb	r7, [r3, #0]
 800bf76:	6963      	ldr	r3, [r4, #20]
 800bf78:	4283      	cmp	r3, r0
 800bf7a:	d004      	beq.n	800bf86 <__swbuf_r+0x6a>
 800bf7c:	89a3      	ldrh	r3, [r4, #12]
 800bf7e:	07db      	lsls	r3, r3, #31
 800bf80:	d507      	bpl.n	800bf92 <__swbuf_r+0x76>
 800bf82:	2e0a      	cmp	r6, #10
 800bf84:	d105      	bne.n	800bf92 <__swbuf_r+0x76>
 800bf86:	0021      	movs	r1, r4
 800bf88:	0028      	movs	r0, r5
 800bf8a:	f7ff fcbf 	bl	800b90c <_fflush_r>
 800bf8e:	2800      	cmp	r0, #0
 800bf90:	d111      	bne.n	800bfb6 <__swbuf_r+0x9a>
 800bf92:	0030      	movs	r0, r6
 800bf94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf96:	4b0a      	ldr	r3, [pc, #40]	; (800bfc0 <__swbuf_r+0xa4>)
 800bf98:	429c      	cmp	r4, r3
 800bf9a:	d101      	bne.n	800bfa0 <__swbuf_r+0x84>
 800bf9c:	68ac      	ldr	r4, [r5, #8]
 800bf9e:	e7cc      	b.n	800bf3a <__swbuf_r+0x1e>
 800bfa0:	4b08      	ldr	r3, [pc, #32]	; (800bfc4 <__swbuf_r+0xa8>)
 800bfa2:	429c      	cmp	r4, r3
 800bfa4:	d1c9      	bne.n	800bf3a <__swbuf_r+0x1e>
 800bfa6:	68ec      	ldr	r4, [r5, #12]
 800bfa8:	e7c7      	b.n	800bf3a <__swbuf_r+0x1e>
 800bfaa:	0021      	movs	r1, r4
 800bfac:	0028      	movs	r0, r5
 800bfae:	f000 f80b 	bl	800bfc8 <__swsetup_r>
 800bfb2:	2800      	cmp	r0, #0
 800bfb4:	d0c9      	beq.n	800bf4a <__swbuf_r+0x2e>
 800bfb6:	2601      	movs	r6, #1
 800bfb8:	4276      	negs	r6, r6
 800bfba:	e7ea      	b.n	800bf92 <__swbuf_r+0x76>
 800bfbc:	0800c87c 	.word	0x0800c87c
 800bfc0:	0800c89c 	.word	0x0800c89c
 800bfc4:	0800c85c 	.word	0x0800c85c

0800bfc8 <__swsetup_r>:
 800bfc8:	4b37      	ldr	r3, [pc, #220]	; (800c0a8 <__swsetup_r+0xe0>)
 800bfca:	b570      	push	{r4, r5, r6, lr}
 800bfcc:	681d      	ldr	r5, [r3, #0]
 800bfce:	0006      	movs	r6, r0
 800bfd0:	000c      	movs	r4, r1
 800bfd2:	2d00      	cmp	r5, #0
 800bfd4:	d005      	beq.n	800bfe2 <__swsetup_r+0x1a>
 800bfd6:	69ab      	ldr	r3, [r5, #24]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d102      	bne.n	800bfe2 <__swsetup_r+0x1a>
 800bfdc:	0028      	movs	r0, r5
 800bfde:	f7ff fd37 	bl	800ba50 <__sinit>
 800bfe2:	4b32      	ldr	r3, [pc, #200]	; (800c0ac <__swsetup_r+0xe4>)
 800bfe4:	429c      	cmp	r4, r3
 800bfe6:	d10f      	bne.n	800c008 <__swsetup_r+0x40>
 800bfe8:	686c      	ldr	r4, [r5, #4]
 800bfea:	230c      	movs	r3, #12
 800bfec:	5ee2      	ldrsh	r2, [r4, r3]
 800bfee:	b293      	uxth	r3, r2
 800bff0:	0711      	lsls	r1, r2, #28
 800bff2:	d42d      	bmi.n	800c050 <__swsetup_r+0x88>
 800bff4:	06d9      	lsls	r1, r3, #27
 800bff6:	d411      	bmi.n	800c01c <__swsetup_r+0x54>
 800bff8:	2309      	movs	r3, #9
 800bffa:	2001      	movs	r0, #1
 800bffc:	6033      	str	r3, [r6, #0]
 800bffe:	3337      	adds	r3, #55	; 0x37
 800c000:	4313      	orrs	r3, r2
 800c002:	81a3      	strh	r3, [r4, #12]
 800c004:	4240      	negs	r0, r0
 800c006:	bd70      	pop	{r4, r5, r6, pc}
 800c008:	4b29      	ldr	r3, [pc, #164]	; (800c0b0 <__swsetup_r+0xe8>)
 800c00a:	429c      	cmp	r4, r3
 800c00c:	d101      	bne.n	800c012 <__swsetup_r+0x4a>
 800c00e:	68ac      	ldr	r4, [r5, #8]
 800c010:	e7eb      	b.n	800bfea <__swsetup_r+0x22>
 800c012:	4b28      	ldr	r3, [pc, #160]	; (800c0b4 <__swsetup_r+0xec>)
 800c014:	429c      	cmp	r4, r3
 800c016:	d1e8      	bne.n	800bfea <__swsetup_r+0x22>
 800c018:	68ec      	ldr	r4, [r5, #12]
 800c01a:	e7e6      	b.n	800bfea <__swsetup_r+0x22>
 800c01c:	075b      	lsls	r3, r3, #29
 800c01e:	d513      	bpl.n	800c048 <__swsetup_r+0x80>
 800c020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c022:	2900      	cmp	r1, #0
 800c024:	d008      	beq.n	800c038 <__swsetup_r+0x70>
 800c026:	0023      	movs	r3, r4
 800c028:	3344      	adds	r3, #68	; 0x44
 800c02a:	4299      	cmp	r1, r3
 800c02c:	d002      	beq.n	800c034 <__swsetup_r+0x6c>
 800c02e:	0030      	movs	r0, r6
 800c030:	f7fe fcee 	bl	800aa10 <_free_r>
 800c034:	2300      	movs	r3, #0
 800c036:	6363      	str	r3, [r4, #52]	; 0x34
 800c038:	2224      	movs	r2, #36	; 0x24
 800c03a:	89a3      	ldrh	r3, [r4, #12]
 800c03c:	4393      	bics	r3, r2
 800c03e:	81a3      	strh	r3, [r4, #12]
 800c040:	2300      	movs	r3, #0
 800c042:	6063      	str	r3, [r4, #4]
 800c044:	6923      	ldr	r3, [r4, #16]
 800c046:	6023      	str	r3, [r4, #0]
 800c048:	2308      	movs	r3, #8
 800c04a:	89a2      	ldrh	r2, [r4, #12]
 800c04c:	4313      	orrs	r3, r2
 800c04e:	81a3      	strh	r3, [r4, #12]
 800c050:	6923      	ldr	r3, [r4, #16]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d10b      	bne.n	800c06e <__swsetup_r+0xa6>
 800c056:	21a0      	movs	r1, #160	; 0xa0
 800c058:	2280      	movs	r2, #128	; 0x80
 800c05a:	89a3      	ldrh	r3, [r4, #12]
 800c05c:	0089      	lsls	r1, r1, #2
 800c05e:	0092      	lsls	r2, r2, #2
 800c060:	400b      	ands	r3, r1
 800c062:	4293      	cmp	r3, r2
 800c064:	d003      	beq.n	800c06e <__swsetup_r+0xa6>
 800c066:	0021      	movs	r1, r4
 800c068:	0030      	movs	r0, r6
 800c06a:	f000 f855 	bl	800c118 <__smakebuf_r>
 800c06e:	220c      	movs	r2, #12
 800c070:	5ea3      	ldrsh	r3, [r4, r2]
 800c072:	2001      	movs	r0, #1
 800c074:	001a      	movs	r2, r3
 800c076:	b299      	uxth	r1, r3
 800c078:	4002      	ands	r2, r0
 800c07a:	4203      	tst	r3, r0
 800c07c:	d00f      	beq.n	800c09e <__swsetup_r+0xd6>
 800c07e:	2200      	movs	r2, #0
 800c080:	60a2      	str	r2, [r4, #8]
 800c082:	6962      	ldr	r2, [r4, #20]
 800c084:	4252      	negs	r2, r2
 800c086:	61a2      	str	r2, [r4, #24]
 800c088:	2000      	movs	r0, #0
 800c08a:	6922      	ldr	r2, [r4, #16]
 800c08c:	4282      	cmp	r2, r0
 800c08e:	d1ba      	bne.n	800c006 <__swsetup_r+0x3e>
 800c090:	060a      	lsls	r2, r1, #24
 800c092:	d5b8      	bpl.n	800c006 <__swsetup_r+0x3e>
 800c094:	2240      	movs	r2, #64	; 0x40
 800c096:	4313      	orrs	r3, r2
 800c098:	81a3      	strh	r3, [r4, #12]
 800c09a:	3801      	subs	r0, #1
 800c09c:	e7b3      	b.n	800c006 <__swsetup_r+0x3e>
 800c09e:	0788      	lsls	r0, r1, #30
 800c0a0:	d400      	bmi.n	800c0a4 <__swsetup_r+0xdc>
 800c0a2:	6962      	ldr	r2, [r4, #20]
 800c0a4:	60a2      	str	r2, [r4, #8]
 800c0a6:	e7ef      	b.n	800c088 <__swsetup_r+0xc0>
 800c0a8:	20000014 	.word	0x20000014
 800c0ac:	0800c87c 	.word	0x0800c87c
 800c0b0:	0800c89c 	.word	0x0800c89c
 800c0b4:	0800c85c 	.word	0x0800c85c

0800c0b8 <abort>:
 800c0b8:	2006      	movs	r0, #6
 800c0ba:	b510      	push	{r4, lr}
 800c0bc:	f000 f8a2 	bl	800c204 <raise>
 800c0c0:	2001      	movs	r0, #1
 800c0c2:	f7f7 f925 	bl	8003310 <_exit>
	...

0800c0c8 <__swhatbuf_r>:
 800c0c8:	b570      	push	{r4, r5, r6, lr}
 800c0ca:	000e      	movs	r6, r1
 800c0cc:	001d      	movs	r5, r3
 800c0ce:	230e      	movs	r3, #14
 800c0d0:	5ec9      	ldrsh	r1, [r1, r3]
 800c0d2:	0014      	movs	r4, r2
 800c0d4:	b096      	sub	sp, #88	; 0x58
 800c0d6:	2900      	cmp	r1, #0
 800c0d8:	da08      	bge.n	800c0ec <__swhatbuf_r+0x24>
 800c0da:	220c      	movs	r2, #12
 800c0dc:	5eb3      	ldrsh	r3, [r6, r2]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	602a      	str	r2, [r5, #0]
 800c0e2:	061b      	lsls	r3, r3, #24
 800c0e4:	d411      	bmi.n	800c10a <__swhatbuf_r+0x42>
 800c0e6:	2380      	movs	r3, #128	; 0x80
 800c0e8:	00db      	lsls	r3, r3, #3
 800c0ea:	e00f      	b.n	800c10c <__swhatbuf_r+0x44>
 800c0ec:	466a      	mov	r2, sp
 800c0ee:	f000 f8a9 	bl	800c244 <_fstat_r>
 800c0f2:	2800      	cmp	r0, #0
 800c0f4:	dbf1      	blt.n	800c0da <__swhatbuf_r+0x12>
 800c0f6:	23f0      	movs	r3, #240	; 0xf0
 800c0f8:	9901      	ldr	r1, [sp, #4]
 800c0fa:	021b      	lsls	r3, r3, #8
 800c0fc:	4019      	ands	r1, r3
 800c0fe:	4b05      	ldr	r3, [pc, #20]	; (800c114 <__swhatbuf_r+0x4c>)
 800c100:	18c9      	adds	r1, r1, r3
 800c102:	424b      	negs	r3, r1
 800c104:	4159      	adcs	r1, r3
 800c106:	6029      	str	r1, [r5, #0]
 800c108:	e7ed      	b.n	800c0e6 <__swhatbuf_r+0x1e>
 800c10a:	2340      	movs	r3, #64	; 0x40
 800c10c:	2000      	movs	r0, #0
 800c10e:	6023      	str	r3, [r4, #0]
 800c110:	b016      	add	sp, #88	; 0x58
 800c112:	bd70      	pop	{r4, r5, r6, pc}
 800c114:	ffffe000 	.word	0xffffe000

0800c118 <__smakebuf_r>:
 800c118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c11a:	2602      	movs	r6, #2
 800c11c:	898b      	ldrh	r3, [r1, #12]
 800c11e:	0005      	movs	r5, r0
 800c120:	000c      	movs	r4, r1
 800c122:	4233      	tst	r3, r6
 800c124:	d006      	beq.n	800c134 <__smakebuf_r+0x1c>
 800c126:	0023      	movs	r3, r4
 800c128:	3347      	adds	r3, #71	; 0x47
 800c12a:	6023      	str	r3, [r4, #0]
 800c12c:	6123      	str	r3, [r4, #16]
 800c12e:	2301      	movs	r3, #1
 800c130:	6163      	str	r3, [r4, #20]
 800c132:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c134:	466a      	mov	r2, sp
 800c136:	ab01      	add	r3, sp, #4
 800c138:	f7ff ffc6 	bl	800c0c8 <__swhatbuf_r>
 800c13c:	9900      	ldr	r1, [sp, #0]
 800c13e:	0007      	movs	r7, r0
 800c140:	0028      	movs	r0, r5
 800c142:	f7fe fcd1 	bl	800aae8 <_malloc_r>
 800c146:	2800      	cmp	r0, #0
 800c148:	d108      	bne.n	800c15c <__smakebuf_r+0x44>
 800c14a:	220c      	movs	r2, #12
 800c14c:	5ea3      	ldrsh	r3, [r4, r2]
 800c14e:	059a      	lsls	r2, r3, #22
 800c150:	d4ef      	bmi.n	800c132 <__smakebuf_r+0x1a>
 800c152:	2203      	movs	r2, #3
 800c154:	4393      	bics	r3, r2
 800c156:	431e      	orrs	r6, r3
 800c158:	81a6      	strh	r6, [r4, #12]
 800c15a:	e7e4      	b.n	800c126 <__smakebuf_r+0xe>
 800c15c:	4b0f      	ldr	r3, [pc, #60]	; (800c19c <__smakebuf_r+0x84>)
 800c15e:	62ab      	str	r3, [r5, #40]	; 0x28
 800c160:	2380      	movs	r3, #128	; 0x80
 800c162:	89a2      	ldrh	r2, [r4, #12]
 800c164:	6020      	str	r0, [r4, #0]
 800c166:	4313      	orrs	r3, r2
 800c168:	81a3      	strh	r3, [r4, #12]
 800c16a:	9b00      	ldr	r3, [sp, #0]
 800c16c:	6120      	str	r0, [r4, #16]
 800c16e:	6163      	str	r3, [r4, #20]
 800c170:	9b01      	ldr	r3, [sp, #4]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d00d      	beq.n	800c192 <__smakebuf_r+0x7a>
 800c176:	0028      	movs	r0, r5
 800c178:	230e      	movs	r3, #14
 800c17a:	5ee1      	ldrsh	r1, [r4, r3]
 800c17c:	f000 f874 	bl	800c268 <_isatty_r>
 800c180:	2800      	cmp	r0, #0
 800c182:	d006      	beq.n	800c192 <__smakebuf_r+0x7a>
 800c184:	2203      	movs	r2, #3
 800c186:	89a3      	ldrh	r3, [r4, #12]
 800c188:	4393      	bics	r3, r2
 800c18a:	001a      	movs	r2, r3
 800c18c:	2301      	movs	r3, #1
 800c18e:	4313      	orrs	r3, r2
 800c190:	81a3      	strh	r3, [r4, #12]
 800c192:	89a0      	ldrh	r0, [r4, #12]
 800c194:	4307      	orrs	r7, r0
 800c196:	81a7      	strh	r7, [r4, #12]
 800c198:	e7cb      	b.n	800c132 <__smakebuf_r+0x1a>
 800c19a:	46c0      	nop			; (mov r8, r8)
 800c19c:	0800b9d5 	.word	0x0800b9d5

0800c1a0 <_malloc_usable_size_r>:
 800c1a0:	1f0b      	subs	r3, r1, #4
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	1f18      	subs	r0, r3, #4
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	da01      	bge.n	800c1ae <_malloc_usable_size_r+0xe>
 800c1aa:	580b      	ldr	r3, [r1, r0]
 800c1ac:	18c0      	adds	r0, r0, r3
 800c1ae:	4770      	bx	lr

0800c1b0 <_raise_r>:
 800c1b0:	b570      	push	{r4, r5, r6, lr}
 800c1b2:	0004      	movs	r4, r0
 800c1b4:	000d      	movs	r5, r1
 800c1b6:	291f      	cmp	r1, #31
 800c1b8:	d904      	bls.n	800c1c4 <_raise_r+0x14>
 800c1ba:	2316      	movs	r3, #22
 800c1bc:	6003      	str	r3, [r0, #0]
 800c1be:	2001      	movs	r0, #1
 800c1c0:	4240      	negs	r0, r0
 800c1c2:	bd70      	pop	{r4, r5, r6, pc}
 800c1c4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d004      	beq.n	800c1d4 <_raise_r+0x24>
 800c1ca:	008a      	lsls	r2, r1, #2
 800c1cc:	189b      	adds	r3, r3, r2
 800c1ce:	681a      	ldr	r2, [r3, #0]
 800c1d0:	2a00      	cmp	r2, #0
 800c1d2:	d108      	bne.n	800c1e6 <_raise_r+0x36>
 800c1d4:	0020      	movs	r0, r4
 800c1d6:	f000 f831 	bl	800c23c <_getpid_r>
 800c1da:	002a      	movs	r2, r5
 800c1dc:	0001      	movs	r1, r0
 800c1de:	0020      	movs	r0, r4
 800c1e0:	f000 f81a 	bl	800c218 <_kill_r>
 800c1e4:	e7ed      	b.n	800c1c2 <_raise_r+0x12>
 800c1e6:	2000      	movs	r0, #0
 800c1e8:	2a01      	cmp	r2, #1
 800c1ea:	d0ea      	beq.n	800c1c2 <_raise_r+0x12>
 800c1ec:	1c51      	adds	r1, r2, #1
 800c1ee:	d103      	bne.n	800c1f8 <_raise_r+0x48>
 800c1f0:	2316      	movs	r3, #22
 800c1f2:	3001      	adds	r0, #1
 800c1f4:	6023      	str	r3, [r4, #0]
 800c1f6:	e7e4      	b.n	800c1c2 <_raise_r+0x12>
 800c1f8:	2400      	movs	r4, #0
 800c1fa:	0028      	movs	r0, r5
 800c1fc:	601c      	str	r4, [r3, #0]
 800c1fe:	4790      	blx	r2
 800c200:	0020      	movs	r0, r4
 800c202:	e7de      	b.n	800c1c2 <_raise_r+0x12>

0800c204 <raise>:
 800c204:	b510      	push	{r4, lr}
 800c206:	4b03      	ldr	r3, [pc, #12]	; (800c214 <raise+0x10>)
 800c208:	0001      	movs	r1, r0
 800c20a:	6818      	ldr	r0, [r3, #0]
 800c20c:	f7ff ffd0 	bl	800c1b0 <_raise_r>
 800c210:	bd10      	pop	{r4, pc}
 800c212:	46c0      	nop			; (mov r8, r8)
 800c214:	20000014 	.word	0x20000014

0800c218 <_kill_r>:
 800c218:	2300      	movs	r3, #0
 800c21a:	b570      	push	{r4, r5, r6, lr}
 800c21c:	4d06      	ldr	r5, [pc, #24]	; (800c238 <_kill_r+0x20>)
 800c21e:	0004      	movs	r4, r0
 800c220:	0008      	movs	r0, r1
 800c222:	0011      	movs	r1, r2
 800c224:	602b      	str	r3, [r5, #0]
 800c226:	f7f7 f863 	bl	80032f0 <_kill>
 800c22a:	1c43      	adds	r3, r0, #1
 800c22c:	d103      	bne.n	800c236 <_kill_r+0x1e>
 800c22e:	682b      	ldr	r3, [r5, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d000      	beq.n	800c236 <_kill_r+0x1e>
 800c234:	6023      	str	r3, [r4, #0]
 800c236:	bd70      	pop	{r4, r5, r6, pc}
 800c238:	20000428 	.word	0x20000428

0800c23c <_getpid_r>:
 800c23c:	b510      	push	{r4, lr}
 800c23e:	f7f7 f851 	bl	80032e4 <_getpid>
 800c242:	bd10      	pop	{r4, pc}

0800c244 <_fstat_r>:
 800c244:	2300      	movs	r3, #0
 800c246:	b570      	push	{r4, r5, r6, lr}
 800c248:	4d06      	ldr	r5, [pc, #24]	; (800c264 <_fstat_r+0x20>)
 800c24a:	0004      	movs	r4, r0
 800c24c:	0008      	movs	r0, r1
 800c24e:	0011      	movs	r1, r2
 800c250:	602b      	str	r3, [r5, #0]
 800c252:	f7f7 f8ac 	bl	80033ae <_fstat>
 800c256:	1c43      	adds	r3, r0, #1
 800c258:	d103      	bne.n	800c262 <_fstat_r+0x1e>
 800c25a:	682b      	ldr	r3, [r5, #0]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d000      	beq.n	800c262 <_fstat_r+0x1e>
 800c260:	6023      	str	r3, [r4, #0]
 800c262:	bd70      	pop	{r4, r5, r6, pc}
 800c264:	20000428 	.word	0x20000428

0800c268 <_isatty_r>:
 800c268:	2300      	movs	r3, #0
 800c26a:	b570      	push	{r4, r5, r6, lr}
 800c26c:	4d06      	ldr	r5, [pc, #24]	; (800c288 <_isatty_r+0x20>)
 800c26e:	0004      	movs	r4, r0
 800c270:	0008      	movs	r0, r1
 800c272:	602b      	str	r3, [r5, #0]
 800c274:	f7f7 f8a9 	bl	80033ca <_isatty>
 800c278:	1c43      	adds	r3, r0, #1
 800c27a:	d103      	bne.n	800c284 <_isatty_r+0x1c>
 800c27c:	682b      	ldr	r3, [r5, #0]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d000      	beq.n	800c284 <_isatty_r+0x1c>
 800c282:	6023      	str	r3, [r4, #0]
 800c284:	bd70      	pop	{r4, r5, r6, pc}
 800c286:	46c0      	nop			; (mov r8, r8)
 800c288:	20000428 	.word	0x20000428

0800c28c <_init>:
 800c28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c28e:	46c0      	nop			; (mov r8, r8)
 800c290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c292:	bc08      	pop	{r3}
 800c294:	469e      	mov	lr, r3
 800c296:	4770      	bx	lr

0800c298 <_fini>:
 800c298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c29a:	46c0      	nop			; (mov r8, r8)
 800c29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c29e:	bc08      	pop	{r3}
 800c2a0:	469e      	mov	lr, r3
 800c2a2:	4770      	bx	lr
